summary: Exercises a simultaneous kernel and base refresh with a single reboot

# TODO make the test work with ubuntu-core-20
systems: [ubuntu-core-18-*]

environment:
    BLOB_DIR: $(pwd)/fake-store-blobdir

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"
    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh

    setup_fake_store "$BLOB_DIR"

    readlink /snap/pc-kernel/current > pc-kernel.rev
    readlink "/snap/core18/current" > core.rev

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    teardown_fake_store "$BLOB_DIR"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh

    if [ "$SPREAD_REBOOT" = 0 ]; then
        # break the pc-kernel snap
        unsquashfs -d pc-kernel-snap /var/lib/snapd/snaps/pc-kernel_*.snap
        truncate -s 0 pc-kernel-snap/initrd.img

        init_fake_refreshes "$BLOB_DIR" pc-kernel --snap-blob "$PWD/pc-kernel-snap"
        init_fake_refreshes "$BLOB_DIR" core18

        # taken from transition_to_recover_mode()
        cp /bin/systemctl /tmp/orig-systemctl
        mount -o bind "$TESTSLIB/mock-shutdown" /bin/systemctl
        tests.cleanup defer umount /bin/systemctl

        snap refresh --no-wait core18 pc-kernel > refresh-change-id
        test -n "$(cat refresh-change-id)"
        change_id="$(cat refresh-change-id)"
        # wait until we observe reboots
        # shellcheck disable=SC2016
        retry -n 100 --wait 5 sh -c 'test "$(wc -l < /tmp/mock-shutdown.calls)" -gt "1"'
        # stop snapd now to avoid snapd waiting for too long and deciding to
        # error out assuming a rollback across reboot
        systemctl stop snapd.service snapd.socket

        # both link snaps should be done now, snapd was stopped, so we cannot
        # use 'snap change' and we need to inspect the state directly (even if
        # snapd was up, it would not respond to API requests as it would be busy
        # retrying auto-connect)
        snap debug state --change "$change_id" /var/lib/snapd/state.json > tasks.state
        # both link snaps are done
        MATCH ' Done\s+.*Make snap "pc-kernel" .* available' < tasks.state
        MATCH ' Done\s+.*Make snap "core18" .* available' < tasks.state
        # auto-connect of the base is in doing and waiting for reboot
        MATCH ' Doing\s+.*Automatically connect eligible plugs and slots of snap "core18"' < tasks.state
        # auto-connect of the kernel is still queued
        MATCH ' Do\s+.*Automatically connect eligible plugs and slots of snap "pc-kernel"' < tasks.state

        snap debug boot-vars > boot-vars.dump
        MATCH 'snap_mode=try' < boot-vars.dump
        MATCH 'snap_try_core=core18_.*.snap' < boot-vars.dump
        MATCH 'snap_try_kernel=pc-kernel_.*.snap' < boot-vars.dump

        # restore shutdown so that spread can reboot the host
        tests.cleanup pop

        REBOOT
    elif [ "$SPREAD_REBOOT" = 1 ]; then
        change_id="$(cat refresh-change-id)"
        # we expect the change to have failed due to the kernel not booting
        # properly
        snap watch "$change_id" || true
        snap changes | MATCH "$change_id\s+Error"
        snap change "$change_id" > tasks.done
        # both link snaps were undone
        MATCH 'Undone\s+.*Make snap "pc-kernel" .* available' < tasks.done
        MATCH 'Undone\s+.*Make snap "core18" .* available' < tasks.done

        # boot variables should have been cleared
        snap debug boot-vars > boot-vars.dump
        MATCH 'snap_mode=$' < boot-vars.dump
        MATCH 'snap_try_core=$' < boot-vars.dump
        MATCH 'snap_try_kernel=$' < boot-vars.dump

        # make sure the system is in stable state, no pending reboots
        # XXX systemctl exits with non-0 when in degraded state
        (systemctl is-system-running || true) | MATCH '(running|degraded)'

        # we're expecting the old revisions to be back
        expecting_kernel="$(cat pc-kernel.rev)"
        expecting_core="$(cat core.rev)"

        # verify that current points to old revisions
        test "$(readlink /snap/pc-kernel/current)" = "$expecting_kernel"
        test "$(readlink /snap/core18/current)" = "$expecting_core"
    else
        echo "unexpected reboot"
        exit 1
    fi
