summary: verify booting into recovery mode on UC20 systems

systems: [ubuntu-core-20-*]

restore: |
    rm -f /writable/systems.json.run
    rm -f /writable/systems.label

    if mountpoint /usr/sbin/shutdown; then
        umount /usr/sbin/shutdown
    fi

debug: |
    if [ -e systems.json ]; then
        cat systems.json
    fi
    if [ -e system-info ]; then
        cat system-info
    fi
    if [ -e /tmp/mock-shutdown.calls ]; then
        cat /tmp/mock-shutdown.calls
    fi

execute: |
    # shellcheck source=tests/lib/uc20-recovery.sh
    . "$TESTSLIB/uc20-recovery.sh"

    if [ "$SPREAD_REBOOT" == "0" ]; then
        echo "In run mode"

        snap install --edge jq
        # devmode as the snap does not have snapd-control
        snap install test-snapd-curl --devmode --edge

        MATCH 'snapd_recovery_mode=run' < /proc/cmdline
        # verify we are in run mode via the API
        test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/system-info > system-info
        jq -r '.result["system-mode"]' < system-info | MATCH 'run'

        echo "Obtain available systems"
        test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems > systems.json
        # TODO:UC20: there is only one system for now
        jq .result.systems[0].current < systems.json | MATCH 'true'
        label="$(jq -r .result.systems[0].label < systems.json)"
        test -n "$label"
        # make sure that the seed exists
        test -d "/var/lib/snapd/seed/systems/$label"
        jq -r .result.systems[0].actions[].mode < systems.json | sort | tr '\n' ' ' | MATCH 'install recover run'

        # keep a copy of the systems dump for later reference
        cp systems.json /writable/systems.json.run
        echo "$label" > /writable/systems.label

        transition_to_recover_mode "$label"

    elif [ "$SPREAD_REBOOT" == "1" ]; then
        echo "In recovery mode"

        prepare_recover_mode

        # host data should be accessible
        test -e /host/ubuntu-data/systems.json.run

        test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems > systems.json
        jq -r .result.systems[0].actions[].mode < systems.json | sort | tr '\n' ' ' | MATCH 'install run'

        label="$(cat /host/ubuntu-data/systems.label)"
        test -n "$label"
        # seed in mounted in recover mode too
        test -d "/var/lib/snapd/seed/systems/$label"

        MATCH "snapd_recovery_system=$label" < /proc/cmdline

        transition_to_run_mode "$label"
    elif [ "$SPREAD_REBOOT" == "2" ]; then
        echo "In run mode again"
        test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/system-info > system-info
        jq -r '.result["system-mode"]' < system-info | MATCH 'run'

        # now go back to recover mode so we can test that a simple reboot 
        # works to transition us back to run mode
        label="$(jq -r .result.systems[0].label < systems.json)"
        transition_to_recover_mode "$label"
    elif [ "$SPREAD_REBOOT" == "3" ]; then
        echo "In recover mode again"
        
        prepare_recover_mode

        # if we are using the external backend, remove the .ssh/rc hack we used
        # to copy data around, it's not necessary going back to run mode, and it
        # somehow interferes with spread re-connecting over ssh, causing
        # spread to timeout trying to reconnect after the reboot with an error
        # message like this:
        # ssh: unexpected packet in response to channel open: <nil>
        if [ "$SPREAD_BACKEND" = "external" ]; then
            # TODO:UC20: if/when /host is mounted ro, then we will need to 
            # either remount it rw or do some other hack to fix this
            rm -f /host/ubuntu-data/user-data/external/.ssh/rc
        fi

        # do a simple reboot to verify that we go back to run mode
        REBOOT
    elif [ "$SPREAD_REBOOT" == "4" ]; then
        echo "In run mode again again"
        test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/system-info > system-info
        jq -r '.result["system-mode"]' < system-info | MATCH 'run'
    fi
