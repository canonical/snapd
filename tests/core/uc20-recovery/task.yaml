summary: verify booting into recovery mode on UC20 systems

systems: [ ubuntu-core-20-* ]

restore: |
  rm -f /writable/systems.json.run
  rm -f /writable/systems.label

  if mountpoint /usr/sbin/shutdown; then
      umount /usr/sbin/shutdown
  fi

debug: |
  if [ -e systems.json ]; then
      cat systems.json
  fi
  if [ -e system-info ]; then
      cat system-info
  fi
  if [ -e /tmp/mock-shutdown.calls ]; then
      cat /tmp/mock-shutdown.calls
  fi

execute: |
  if [ "$SPREAD_REBOOT" == "0" ]; then
      echo "In run mode"

      snap install jq
      # devmode as the snap does not have snapd-control
      snap install test-snapd-curl --devmode --edge

      MATCH 'snapd_recovery_mode=run' < /proc/cmdline
      # verify we are in run mode via the API
      test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/system-info > system-info
      jq -r '.result["system-mode"]' < system-info | MATCH 'run'

      echo "Obtain available systems"
      test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems > systems.json
      # TODO:UC20: there is only one system for now
      jq .result.systems[0].current < systems.json | MATCH 'true'
      label="$(jq -r .result.systems[0].label < systems.json)"
      test -n "$label"
      # make sure that the seed exists
      test -d "/var/lib/snapd/seed/systems/$label"
      jq -r .result.systems[0].actions[].mode < systems.json | sort | tr '\n' ' ' | MATCH 'install recover run'

      # keep a copy of the systems dump for later reference
      cp systems.json /writable/systems.json.run
      echo "$label" > /writable/systems.label

      # redirect shutdown command to our mock to observe calls and avoid racing
      # with spread
      mount -o bind "$PWD/mock-shutdown" /usr/sbin/shutdown

      # request a recovery mode
      echo "Request rebooting into recovery mode"
      # response contains maintenance: {"maintenance":{"message":"system is restarting","kind":"system-restart"}}
      test-snapd-curl.curl -X POST --data '{"action":"do","mode":"recover"}' \
          -s --unix-socket /run/snapd.socket "http://localhost/v2/systems/$label" | \
          MATCH '"system-restart"'

      # snapd schedules a slow timeout and an immediate one, however it is
      # scheduled asynchronously, try keep the check simple
      # shellcheck disable=SC2016
      retry -n 30 --wait 1 sh -c 'test "$(wc -l < /tmp/mock-shutdown.calls)" = "2"'
      # an immediate reboot should have been scheduled
      MATCH -- '-r \+0' < /tmp/mock-shutdown.calls

      # restore shutdown so that spread can reboot the host
      umount /usr/sbin/shutdown

      # XXX: is this a race between spread seeing REBOOT and machine rebooting?
      REBOOT

  elif [ "$SPREAD_REBOOT" == "1" ]; then
      echo "In recovery mode"

      # the system is seeding and snap command may not be available yet
      # shellcheck disable=SC2016
      retry -n 60 --wait 1 sh -c 'test "$(command -v snap)" = /usr/bin/snap'

      # wait till the system seeding is finished
      snap wait system seed.loaded

      # we're running in an ephemeral system and thus have to re-install snaps
      snap install jq
      snap install test-snapd-curl --devmode --edge

      MATCH 'snapd_recovery_mode=recover' < /proc/cmdline
      # verify we are in recovery mode via the API
      test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/system-info > system-info
      jq -r '.result["system-mode"]' < system-info | MATCH 'recover'

      # host data should be accessible
      test -e /host/ubuntu-data/systems.json.run

      test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems > systems.json
      jq -r .result.systems[0].actions[].mode < systems.json | sort | tr '\n' ' ' | MATCH 'install run'

      label="$(cat /host/ubuntu-data/systems.label)"
      test -n "$label"
      # seed in mounted in recover mode too
      test -d "/var/lib/snapd/seed/systems/$label"

      MATCH "snapd_recovery_system=$label" < /proc/cmdline

      # see earlier note
      mount -o bind "$PWD/mock-shutdown" /usr/sbin/shutdown

      # request going back to run mode
      test-snapd-curl.curl -X POST --data '{"action":"do","mode":"run"}' \
          -s --unix-socket /run/snapd.socket "http://localhost/v2/systems/$label" | \
          MATCH '"system-restart"'
      # XXX: is this a race between spread seeing REBOOT and machine rebooting?

      # see earlier note about shutdown
      # shellcheck disable=SC2016
      retry -n 30 --wait 1 sh -c 'test "$(wc -l < /tmp/mock-shutdown.calls)" = "2"'
      # an immediate reboot should have been scheduled
      MATCH -- '-r \+0' < /tmp/mock-shutdown.calls

      umount /usr/sbin/shutdown

      REBOOT

  elif [ "$SPREAD_REBOOT" == "2" ]; then
      echo "In run mode again"
      test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/system-info > system-info
      jq -r '.result["system-mode"]' < system-info | MATCH 'run'
  fi
