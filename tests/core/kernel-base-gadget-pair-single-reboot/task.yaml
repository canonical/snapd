summary: Ensures that any combination of two of base, gadget and kernel will refresh with just a single reboot.

details: |
    Test ensures that if any two of the essential snaps (base, gadget and kernel) can be refreshed
    together with a single reboot. The test then reverts each of the snaps to ensure system is left
    in untouched state. (Otherwise our spread checks will complain).

# TODO make the test work with ubuntu-core-20
systems: [ubuntu-core-18-*]

environment:
    SNAP_ONE/kernel_base: core
    SNAP_TWO/kernel_base: pc-kernel

    SNAP_ONE/gadget_base: core
    SNAP_TWO/gadget_base: pc
    
    SNAP_ONE/kernel_gadget: pc
    SNAP_TWO/kernel_gadget: pc-kernel

    BLOB_DIR: $(pwd)/fake-store-blobdir

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    core_snap=core20
    if os.query is-core18; then
        core_snap=core18
    fi

    # read all for simplification
    readlink /snap/pc-kernel/current > pc-kernel.rev
    readlink "/snap/$core_snap/current" > core.rev
    readlink "/snap/pc/current" > pc.rev

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    "$TESTSTOOLS"/store-state teardown-fake-store "$BLOB_DIR"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    core_snap=core20
    if os.query is-core18; then
        core_snap=core18
    fi

    if [ "$SNAP_ONE" = "core" ]; then
        SNAP_ONE=$core_snap
    elif [ "$SNAP_TWO" = "core" ]; then
        SNAP_TWO=$core_snap
    fi

    if [ "$SPREAD_REBOOT" = 0 ]; then
        snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"
        "$TESTSTOOLS"/store-state setup-fake-store "$BLOB_DIR"

        "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" "$SNAP_ONE"
        "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" "$SNAP_TWO"

        snap refresh --no-wait "$SNAP_ONE" "$SNAP_TWO" > refresh-change-id
        test -n "$(cat refresh-change-id)"
        change_id="$(cat refresh-change-id)"
        
        # wait for the link tasks to be done
        retry -n 50 --wait 1 sh -c 'journalctl -b -u snapd | MATCH "Waiting for system reboot"'

        # both link snaps should be done now, snapd was stopped, so we cannot
        # use 'snap change' and we need to inspect the state directly (even if
        # snapd was up, it would not respond to API requests as it would be busy
        # retrying auto-connect)
        snap debug state --change "$change_id" /var/lib/snapd/state.json > tasks.state
        # both link snaps are done
        MATCH " Wait\s+.*Make snap \"$SNAP_TWO\" .* available" < tasks.state
        MATCH " Done\s+.*Make snap \"$SNAP_ONE\" .* available" < tasks.state
        # auto-connect of the base is in doing and waiting for reboot
        MATCH " Do\s+.*Automatically connect eligible plugs and slots of snap \"$SNAP_ONE\"" < tasks.state
        # auto-connect of the kernel is still queued
        MATCH " Do\s+.*Automatically connect eligible plugs and slots of snap \"$SNAP_TWO\"" < tasks.state

        if os.query is-core18; then
            snap debug boot-vars > boot-vars.dump
            if [[ "$SNAP_ONE" == *"core"* ]] || [[ "$SNAP_TWO" == *"core"* ]]; then
                MATCH 'snap_mode=try' < boot-vars.dump
                MATCH 'snap_try_core=core18_.*.snap' < boot-vars.dump
            fi
            if [[ "$SNAP_ONE" == "pc-kernel" ]] || [[ "$SNAP_TWO" == "pc-kernel" ]]; then
                MATCH 'snap_mode=try' < boot-vars.dump
                MATCH 'snap_try_kernel=pc-kernel_.*.snap' < boot-vars.dump
            fi
        elif os.query is-core20; then
            if [[ "$SNAP_ONE" == "pc-kernel" ]] || [[ "$SNAP_TWO" == "pc-kernel" ]]; then
                stat /boot/grub/try-kernel.efi | MATCH 'pc_kernel.*.snap/kernel.efi'
                stat -L /boot/grub/try-kernel.efi
            fi
            if [[ "$SNAP_ONE" == *"core"* ]] || [[ "$SNAP_TWO" == *"core"* ]]; then
                MATCH 'try_base=core20_.*.snap' < /var/lib/snapd/modeenv
            fi
        else
            echo "unsupported Ubuntu Core system"
            exit 1
        fi

        REBOOT
    elif [ "$SPREAD_REBOOT" = 1 ]; then
        change_id="$(cat refresh-change-id)"
        # XXX: is this sufficiently robust?
        snap watch "$change_id" || true
        snap changes | MATCH "$change_id\s+(Done|Error)"
        # we expect re-refresh to fail since the tests uses a fake store
        snap change "$change_id" > tasks.done
        MATCH '^Error .* Monitoring .* to determine whether extra refresh steps are required' < tasks.done
        # no other errors
        grep -v 'Monitoring .* to determine whether extra refresh steps are required' < tasks.done | NOMATCH '^Error'
        # nothing was undone
        grep -v 'Monitoring .* to determine whether extra refresh steps are required' < tasks.done | NOMATCH '^Undone'
        # we did not even try to hijack shutdown (/bin/systemctl) because that
        # could race with snapd (if that wanted to call it), so just check that
        # the system is in a stable state once we have already determined that
        # the change is complete
        # XXX systemctl exits with non-0 when in degraded state
        # Note: on bionic, is-system-running does not support --wait
        retry -n 30 sh -c '(systemctl is-system-running || true) | MATCH "(running|degraded)"'

        # fake refreshes generate revision numbers that are n+1
        # verify that current points to new revisions
        if [[ "$SNAP_ONE" == *"core"* ]] || [[ "$SNAP_TWO" == *"core"* ]]; then
            expecting_core="$(($(cat core.rev) + 1))"
            test "$(readlink /snap/$core_snap/current)" = "$expecting_core"
        fi
        if [[ "$SNAP_ONE" == "pc" ]] || [[ "$SNAP_TWO" == "pc" ]]; then
            expecting_gadget="$(($(cat pc.rev) + 1))"
            test "$(readlink /snap/pc/current)" = "$expecting_gadget"
        fi
        if [[ "$SNAP_ONE" == "pc-kernel" ]] || [[ "$SNAP_TWO" == "pc-kernel" ]]; then
            expecting_kernel="$(($(cat pc-kernel.rev) + 1))"
            test "$(readlink /snap/pc-kernel/current)" = "$expecting_kernel"
        fi

        # now we need to revert both snaps for restore to behave properly, go from
        # reverse order
        snap revert "$SNAP_TWO" --revision "$(cat ${SNAP_TWO}.rev)"
        REBOOT
    elif [ "$SPREAD_REBOOT" = 2 ]; then
        snap watch --last=revert\?
        # now the first
        snap revert "$SNAP_ONE" --revision "$(cat ${SNAP_ONE}.rev)"
        REBOOT
    elif [ "$SPREAD_REBOOT" = 3 ]; then
        snap watch --last=revert\?
        # we're done, verify current symlinks to the right revisions
        if [[ "$SNAP_ONE" == *"core"* ]] || [[ "$SNAP_TWO" == *"core"* ]]; then
            test "$(readlink /snap/$core_snap/current)" = "$(cat core.rev)"
        fi
        if [[ "$SNAP_ONE" == "pc" ]] || [[ "$SNAP_TWO" == "pc" ]]; then
            test "$(readlink /snap/pc/current)" = "$(cat pc.rev)"
        fi
        if [[ "$SNAP_ONE" == "pc-kernel" ]] || [[ "$SNAP_TWO" == "pc-kernel" ]]; then
            test "$(readlink /snap/pc-kernel/current)" = "$(cat pc-kernel.rev)"
        fi
    else
        echo "unexpected reboot"
        exit 1
    fi
