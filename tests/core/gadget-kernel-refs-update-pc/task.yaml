summary: Exercise a gadget update with kernel refs on a PC

environment:
    BLOB_DIR: $(pwd)/fake-store-blobdir
    # snap-id of 'pc' gadget snap
    PC_SNAP_ID: UqFziVZDHLSyO3TqSWgNBoAdHbLI4dAH
    # snap-id of 'pc-kernel' snap
    PC_KERNEL_ID: pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza
    START_REVISION: 1000

# TODO:UC20: once LP: #1907056 is fixed and we have an updated
#            pi gadget and pi-kernel snap this test should be
#            replaced with a pi-only test. This test is artificial
#            and only useful until we have the real PI based environment.
#
# the test is only meaningful on core devices
# XXX: uc20
systems: [ubuntu-core-1*]

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"
    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    setup_fake_store "$BLOB_DIR"
    readlink /snap/pc/current > pc-revision.txt
    readlink /snap/pc-kernel/current > pc-kernel-revision.txt
    # create kernel-ref kernel/gadget pair
    cp /var/lib/snapd/snaps/pc-kernel_*.snap kernel.snap
    unsquashfs -d pc-kernel-snap kernel.snap
    # prepare kernel with content
    mkdir pc-kernel-snap/some-dir/
    touch pc-kernel-snap/some-dir/foo-from-some-dir
    touch pc-kernel-snap/some-dir/some-subdir
    touch pc-kernel-snap/some-file
    cat >> pc-kernel-snap/meta/kernel.yaml<<EOF
    assets:
      test:
        update: true
        content:
          - some-dir/
          - some-file
    EOF
    snap pack --filename=pc-kernel_x1.snap pc-kernel-snap
    # has to be asserted
    cat <<EOF > decl-headers.json
    {"snap-id": "$PC_KERNEL_ID"}
    EOF
    cat <<EOF > rev-headers.json
    {"snap-id": "$PC_KERNEL_ID", "snap-revision": "$START_REVISION"}
    EOF
    new_snap_declaration "$BLOB_DIR" pc-kernel_x1.snap --snap-decl-json decl-headers.json
    new_snap_revision "$BLOB_DIR" pc-kernel_x1.snap --snap-rev-json rev-headers.json
    # new gadget
    cp /var/lib/snapd/snaps/pc_*.snap gadget.snap
    unsquashfs -d pc-snap gadget.snap
    # prepare version with kernel ref
    cat >> pc-snap/meta/gadget.yaml <<'EOF'
              - source: $kernel:test/some-dir/
                target: /
              - source: $kernel:test/some-file
                target: /
    EOF
    snap pack --filename=pc_x1.snap pc-snap
    # has to be asserted
    cat <<EOF > decl-headers.json
    {"snap-id": "$PC_SNAP_ID"}
    EOF
    cat <<EOF > rev-headers.json
    {"snap-id": "$PC_SNAP_ID", "snap-revision": "$START_REVISION"}
    EOF
    new_snap_declaration "$BLOB_DIR" pc_x1.snap --snap-decl-json decl-headers.json
    new_snap_revision "$BLOB_DIR" pc_x1.snap --snap-rev-json rev-headers.json
restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    teardown_fake_store "$BLOB_DIR"
    # XXX: ideally we would restore the kernel/gadget here but the kernel
    #      restore requires a reboot :/
    
execute: |
    if [ "$SPREAD_REBOOT" = 0 ]; then
        # XXX: Note that the order will change here as we adjust the policy.
        #
        # first install the asserted kernel so that the gadget can resolve
        # the kernel refs
        snap install pc-kernel_x1.snap
        REBOOT
    fi
    if [ "$SPREAD_REBOOT" = 1 ]; then
        # wait for change to complete
        snap watch --last=install\?
        # now install the asserted gadget
        snap install  pc_x1.snap
        # and kernel again because the previous gadget update did not
        # have a edition bump so it won't have installed the new kernel
        # refs automatically (XXX: that is what we want, right?)
        snap pack --filename=pc-kernel_x2.snap pc-kernel-snap
        # has to be asserted
        cat <<EOF > decl-headers.json
    {"snap-id": "$PC_KERNEL_ID"}
    EOF
        cat <<EOF > rev-headers.json
    {"snap-id": "$PC_KERNEL_ID", "snap-revision": "$((START_REVISION+1))"}
    EOF
        #shellcheck source=tests/lib/store.sh
        . "$TESTSLIB"/store.sh
        new_snap_declaration "$BLOB_DIR" pc-kernel_x2.snap --snap-decl-json decl-headers.json
        new_snap_revision "$BLOB_DIR" pc-kernel_x2.snap --snap-rev-json rev-headers.json
        snap install pc-kernel_x2.snap
        REBOOT
    fi
    if [ "$SPREAD_REBOOT" = 2 ]; then
        # wait for change to complete
        snap watch --last=install\?
        # now we should have the kernel gadgets installed
        bootdir=/boot/efi
        test -e "$bootdir"/foo-from-some-dir
        test -e "$bootdir"/some-subdir
        test -e "$bootdir"/some-file
        # restore
        snap revert pc --revision="$(cat pc-revision.txt)"
        snap revert pc-kernel --revision="$(cat pc-kernel-revision.txt)"
        REBOOT
    fi
    if [ "$SPREAD_REBOOT" = 3 ]; then
        # Nothing to do/check here. Just waiting for the revert to
        # finish.  This reboot is only needed so that the system is
        # fully restored to the original state.
        snap watch --last=revert\?
    fi
