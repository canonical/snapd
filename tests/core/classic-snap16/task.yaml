summary: Ensure classic dimension works correctly

# classic snap is not maintained for UC18+, for these releases the lxd snaps is
# recommended instead of the classic snap
systems: [ubuntu-core-16-*]

environment:
    # We need to set the SUDO_USER here to simulate the real
    # behavior. I.e. when entering classic it happens via
    # `sudo classic` and the user gets a user shell inside
    # the classic environment that has sudo support.
    SUDO_USER: test

prepare: |
    echo "test ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/create-test

restore: |
    rm -f /etc/sudoers.d/create-test
    # Undo the change done by the classic snap.
    # FIXME: https://github.com/snapcore/classic-snap/issues/32
    if [ "$(mountinfo.query /dev/pts .sb_opts)" = "rw,mode=666,ptmxmode=666" ]; then
        mount devpts -t devpts /dev/pts -o remount,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000
    fi

execute: |
    echo "Ensure classic can be installed"
    snap install --devmode --beta classic
    snap list|MATCH classic

    echo "Check that classic can run commands inside classic"
    classic test -f /var/lib/dpkg/status

    echo "Ensure that after classic exits no processes are left behind"
    classic "sleep 133713371337&"
    # use "[f]oo" to search for "foo" in ps output without having to filter yourself out
    if pgrep -f 133713371337; then
        echo "The sleep process was not killed when classic exited"
        echo "Something is wrong with the cleanup"
        exit 1
    fi

    echo "Ensure sudo works without a password inside classic"
    # classic uses "script" to work around the issue that
    # tty reports "no tty" inside snaps (LP: #1611493)
    #
    # "script" adds extra \r into the output that we need to filter here
    if [ "$(classic sudo id -u|tr -d '\r')" != "0" ]; then
        echo "sudo inside classic did not work as expected"
        exit 1
    fi

    for d in /proc /run /sys /dev /snappy; do
        if ! classic test -d $d; then
            echo "Expected dir $d is missing inside classic"
            exit 1
        fi
        if ! classic mount | MATCH "$d"; then
            echo "Expected bind mount for $d in classic missing"
            exit 1
        fi
    done
