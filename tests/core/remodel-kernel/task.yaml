summary: |
    Test a remodel that switches to a new kernel

environment:
    OLD_KERNEL: pc-kernel
    NEW_KERNEL: test-snapd-pc-kernel

# FIXME: add core18 test as well
# TODO:UC20: enable for UC20
systems: [ubuntu-core-16-64]

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh

    # Save the revision of the pc-kernel snap.
    readlink /snap/pc-kernel/current > original-revision.txt

    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    # Generic setup for test account
    prepare_core_model
    prepare_test_account developer1
    prepare_test_model developer1-pc
    prepare_testrootorg_store

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh

    # Wait for the final refresh to complete.
    snap watch --last=refresh

    # Remove all the revisions of pc-kernel that should not be there.
    for revno_path in /snap/pc-kernel/*; do
        revno="$(basename "$revno_path")"
        if [ "$revno" == current ] || [ "$revno" == "$(cat original-revision.txt)" ]; then
            continue;
        fi
        snap remove pc-kernel --revision="$revno"
    done

    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    # Generic restore for test account
    restore_test_account developer1
    restore_test_model developer1-pc
    restore_testrootorg_store
    restore_core_model

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

    # extra paranoia because failure to cleanup earlier took us a long time
    # to find
    if [ -e /var/snap/$NEW_KERNEL/current ]; then
        echo "Leftover $NEW_KERNEL data dir found, test does not "
        echo "properly cleanup"
        echo "see https://github.com/snapcore/snapd/pull/6620"
        echo
        find /var/snap -ls
        exit 1
    fi

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh

    wait_change_done() {
        chg_summary="$1"
        for _ in $(seq 10); do
            if snap changes | grep -qE "[0-9]+\ +Done\ +.* $chg_summary"; then
                break
            fi
            # some debug output
            snap changes
            # wait a bit
            sleep 5
        done
        snap changes | MATCH "$chg_summary"
    }

    # initial boot with the current model 
    if [ "$SPREAD_REBOOT" = 0 ]; then
        # sanity check
        snap list "$OLD_KERNEL"

        echo "We have the right model assertion"
        snap debug model|MATCH "model: my-model"

        echo "Now we remodel"
        MODEL="$(get_test_model developer1-pc-new-kernel)"
        snap remodel "${TESTSLIB}/assertions/${MODEL}"

        echo "Double check that we boot into the right kernel"
        grub-editenv list | MATCH "snap_try_kernel=$NEW_KERNEL"

        echo "reboot to finish the change"
        REBOOT
    fi

    # first boot with the new model kernel
    if [ "$SPREAD_REBOOT" = 1 ]; then
        echo "and we have the new kernel snap installed"
        snap list "$NEW_KERNEL"

        echo "And are using it"
        "$TESTSTOOLS"/boot-state wait-core-post-boot
        grub-editenv list | MATCH "snap_kernel=$NEW_KERNEL"

        echo "and we got the new model assertion"
        wait_change_done "Refresh model assertion from revision 0 to 2"
        snap debug model|MATCH "revision: 2"

        echo "and we cannot remove the kernel snap"
        not snap remove --purge "$NEW_KERNEL"

        # TODO: test when keeping the old kernel
        echo "but we can remove the old kernel"
        snap remove --purge "$OLD_KERNEL"

        echo "And we can remodel again and remove the new kernel"
        MODEL="$(get_test_model developer1-pc-revno3)"
        snap remodel "${TESTSLIB}/assertions/${MODEL}"
        REBOOT
    fi

    # reboot from new model to undo the new model again (to not pollute tests)
    if [ "$SPREAD_REBOOT" = 2 ]; then
        "$TESTSTOOLS"/boot-state wait-core-post-boot
        grub-editenv list | MATCH "snap_kernel=$OLD_KERNEL"

        wait_change_done "Refresh model assertion from revision 2 to 3"
        snap debug model|MATCH "revision: 3"
        echo "cleanup"
        snap remove --purge "$NEW_KERNEL"

        echo "Ensure we are back to the original kernel channel and kernel"
        snap refresh --channel="$KERNEL_CHANNEL" "$OLD_KERNEL"
        REBOOT
    fi
