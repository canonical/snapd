summary: Ensure that snap-repair works on Ubuntu Core

environment:
    BLOB_DIR: $(pwd)/fake-store-blobdir
    STORE_ADDR: localhost:11028

prepare: |
    snap install jq
    tests.cleanup defer snap remove jq

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    teardown_fake_store "$BLOB_DIR"

execute: |
    echo "Ensure the snap-repair timer is enabled"
    systemctl list-timers | MATCH snapd.snap-repair.timer

    # shellcheck source=tests/lib/uc20-recovery.sh
    . "$TESTSLIB/uc20-recovery.sh"

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh

    # All the tests below are only relevant on an ubuntu-core system
    if [ "$SPREAD_REBOOT" == "0" ]; then

        echo "Check that the snap-repair timer is active"
        systemctl list-timers | MATCH snapd.snap-repair.timer

        echo "Check that snap-repair can be run"
        snapd.tool exec snap-repair run

        echo "No repairs should have been run yet"
        snapd.tool exec snap-repair list 2>&1 | MATCH "no repairs yet" 

        if [ "$TRUST_TEST_KEYS" = "false" ]; then
            echo "This test needs test keys to be trusted"
            exit
        fi

        # produce the run-mode repair assertion
        if os.query is-core16; then
            REPAIR_SCRIPT=uc18.sh
            REPAIR_JSON=uc16.json
        elif os.query is-core18; then
            REPAIR_SCRIPT=uc18.sh
            REPAIR_JSON=uc18.json
        elif os.query is-core20; then
            REPAIR_SCRIPT=uc20-run.sh
            REPAIR_JSON=uc20-run.json
        fi

        fakestore new-repair --dir "$BLOB_DIR" "$REPAIR_SCRIPT" --repair-json="$PWD/$REPAIR_JSON"

        setup_fake_store "$BLOB_DIR"

        # now snap repairs should be run when pointed at the fakestore

        SNAPPY_FORCE_SAS_URL="http://$STORE_ADDR/v2/"
        export SNAPPY_FORCE_SAS_URL
        echo "Now we should be able to execute snap repairs"
        snapd.tool exec snap-repair run

        echo "And we should see them executed"
        snapd.tool exec snap-repair list | MATCH "testrootorg-1\s+0\s+done\s+some test keys repair"

        echo "And running multiple times is idempotent"
        snapd.tool exec snap-repair run

        test "$(snapd.tool exec snap-repair list | tail -n +2 | wc -l)" = 1

        echo "And the SNAP_SYSTEM_MODE env var is set appropriately"
        if os.query is-core20; then
            snapd.tool exec snap-repair show testrootorg-1 | MATCH "echo run"
        else
            snapd.tool exec snap-repair show testrootorg-1 | MATCH "echo ''"
        fi

        # produce a retry repair assertion with repair ID 2 that does not 
        # complete, and another revision that succeeds

        # note that the value "2" here _must_ be a string, otherwise we can't 
        # sign it as all values must be strings or lists of strings, etc. 
        jq '."repair-id" = "2"' < "$PWD/$REPAIR_JSON" > "$PWD/$REPAIR_JSON.tmp"
        mv "$PWD/$REPAIR_JSON.tmp" "$PWD/2-$REPAIR_JSON"

        fakestore new-repair --dir "$BLOB_DIR" retry.sh --repair-json="$PWD/2-$REPAIR_JSON"

        echo "Adding a new repair ID 2 repair assertion will cause another run to be fetched and executed"

        snapd.tool exec snap-repair run

        test "$(snapd.tool exec snap-repair list | tail -n +2 | wc -l)" = 2
        snapd.tool exec snap-repair list | MATCH "testrootorg-1\s+0\s+done\s+some test keys repair"
        snapd.tool exec snap-repair list | MATCH "testrootorg-2\s+0\s+retry\s+some test keys repair"

        echo "Add a new repair ID 2 revision that completes successfully"

        jq '."revision" = "1"' < "$PWD/2-$REPAIR_JSON" > "$PWD/2-$REPAIR_JSON.tmp"
        mv "$PWD/2-$REPAIR_JSON.tmp" "$PWD/2-$REPAIR_JSON"

        fakestore new-repair --dir "$BLOB_DIR" "$REPAIR_SCRIPT" --repair-json="$PWD/2-$REPAIR_JSON"

        snapd.tool exec snap-repair run

        test "$(snapd.tool exec snap-repair list | tail -n +2 | wc -l)" = 3
        snapd.tool exec snap-repair list | MATCH "testrootorg-1\s+0\s+done\s+some test keys repair"
        snapd.tool exec snap-repair list | MATCH "testrootorg-2\s+0\s+retry\s+some test keys repair"
        snapd.tool exec snap-repair list | MATCH "testrootorg-2\s+1\s+done\s+some test keys repair"

        # on UC20 we also check that repair assertions scoped to recover mode 
        # work too
        if os.query is-core20; then
            transition_to_recover_mode ""
        fi
    elif [ "$SPREAD_REBOOT" == "1" ]; then
        echo "In recovery mode"
        prepare_recover_mode

        snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"

        # we have to standup the fakestore again 
        fakestore new-repair --dir "$BLOB_DIR" uc20-recover.sh --repair-json="$PWD/uc20-recover.json"

        setup_fake_store "$BLOB_DIR"

        SNAPPY_FORCE_SAS_URL="http://$STORE_ADDR/v2/"
        export SNAPPY_FORCE_SAS_URL
        echo "Now we should be able to execute snap repairs"
        snapd.tool exec snap-repair run

        echo "And we should see them executed"
        snapd.tool exec snap-repair list | MATCH "testrootorg-1\s+0\s+done\s+recovery mode repair assertion"

        snapd.tool exec snap-repair show testrootorg-1 | MATCH "echo recover"

        echo "Transition back to run mode"
        transition_to_run_mode ""
        
    elif [ "$SPREAD_REBOOT" == "2" ]; then
        echo "In run mode again"

        if [ ! -f /var/lib/snapd/FIXED ]; then
            echo "Repair assertion failed to fix snapd!"
            exit 1
        fi
    fi
