summary: the boot base provides essential fsck programs

details: |
  Snapd uses vfat on certain essential boot partitions, due to external
  requirements imposed by the bootloader architecture. This test verifies
  that fsck.vfat is shipped in the image, and that it can correctly clean
  the dirty bit that is artificially set by this test.

  A separate test examines how fsck is automatically invoked during the boot
  process. This is not verified here.

execute: |
  echo "Essential fsck programs are in the boot base"
  test -n "$(command -v fsck.vfat)"
  test -n "$(command -v fsck.fat)"
  test -n "$(command -v fsck.ext2)"
  test -n "$(command -v fsck.ext3)"
  test -n "$(command -v fsck.ext4)"

  echo "mkfs.vfat can create a FAT 12 filesystem"
  dd if=/dev/zero of=fat.img bs=1M count=1
  mkfs.vfat fat.img > mkfs.vfat.log

  echo "fsck.fat reports all-ok on such filesystem"
  fsck.vfat fat.img > fsck.vfat.vanilla.log
  MATCH 'fat.img: 0 files, 0/502 clusters' <fsck.vfat.vanilla.log

  echo "We can simulate uncleanly unmounted FAT"
  # FAT uses a specific byte to effectively indicate that the file system is
  # dirty. The precise details as to how this byte is used by each system vary,
  # but Linux sets it on a non-read-only mount, and clears it on unmount. We
  # can set it manually, verify it when the image is mounted and observe fsck
  # clearing it. Note that larger block devices use FAT32 and the offset
  # differs. FAT12 and FAT16 uses 37 while FAT32 uses 65.
  printf "\x01" > one
  tests.cleanup defer rm -f one
  dd if=one of=fat.img seek=37 bs=1 count=1 conv=notrunc

  echo "Mounting dirty FAT generated a kernel message"
  mount fat.img /mnt
  tests.cleanup defer umount /mnt
  # If this ever fails because the kernel log message has changed, please
  # adjust the fsck-on-boot tests as well. It relies on absence of this exact
  # message.
  dmesg -c | MATCH "Volume was not properly unmounted. Some data may be corrupt. Please run fsck."
  tests.cleanup pop # unmount

  echo "fsck.fat can fix such corruption"
  set +e
  fsck.vfat -v -a fat.img > fsck.vfat.dirty.log
  retval=$?
  set -e
  test "$retval" -eq 1  # see fsck.vfat(8) for details
  MATCH '0x25: Dirty bit is set. Fs was not properly unmounted and some data may be corrupt.' < fsck.vfat.dirty.log
  MATCH 'Automatically removing dirty bit.' < fsck.vfat.dirty.log

  echo "fsck.fat reports the file system as clean"
  fsck.vfat -v -a fat.img > fsck.vfat.cleaned.log
  NOMATCH '0x25: Dirty bit is set. Fs was not properly unmounted and some data may be corrupt.' < fsck.vfat.cleaned.log

  echo "Cleaned FAT mounts without warnings"
  mount fat.img /mnt
  tests.cleanup defer umount /mnt
  dmesg -c | NOMATCH "Volume was not properly unmounted. Some data may be corrupt. Please run fsck."
  tests.cleanup pop # unmount
