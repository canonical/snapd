summary: |
    Test that configuration defaults are only applied once.

# it is not yet possible to install snapd on UC16
# TODO:UC20: enable for UC20, currently fails because there is no seed.yaml in
#            the same place as UC18
systems: [ubuntu-core-18-*]

environment:
    GADGET_FILE: gadget-defaults.yaml

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh

    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    # Configure the pc snap
    unpack_pc_snap

    # Update the gadget config file
    cat "$GADGET_FILE" >> squashfs-root/meta/gadget.yaml

    pack_pc_snap

    # Generic setup for test account
    # shellcheck disable=SC2119
    prepare_and_manip_seed
    prepare_test_account developer1
    prepare_testrootorg_store

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh

    # XXX: this should work once it is possible to install snapd on core
    SNAP=snapd
    SERVICES="ssh rsyslog"
    if os.query is-core18; then
        # a core18 already has a snapd snap, verify whether installation of core
        # does not break the configuration
        SNAP=core
        SERVICES=ssh
    fi

    echo "Undo the service disable"
    rm -f /etc/ssh/sshd_not_to_be_run
    for service in $SERVICES; do
        systemctl unmask "$service.service" || true
        systemctl enable "$service.service" || true
        systemctl start "$service.service" || true
    done

    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    # Restore pc snap configuration
    restore_pc_snap

    REVNO="$(readlink /snap/$SNAP/current)"
    sysp=$(systemd-escape --path "/snap/$SNAP/$REVNO.mount")
    if systemctl status "$sysp"; then
       systemctl stop "$sysp"
       rm -f "/etc/systemd/system/$sysp"
       rm -f "/etc/systemd/system/multi-user.target.wants/$sysp"
       rm -f "/var/lib/snapd/snaps/${SNAP}"_*.snap
       rm -rf "/snap/$SNAP"
       systemctl daemon-reload
    fi
    rm -f "/var/lib/snapd/seed/snaps/${SNAP}"_*.snap
    rm -f "/var/lib/snapd/seed/assertions/${SNAP}"_*.assert

    # Generic restore for test account
    restore_updated_seed
    restore_test_account developer1
    restore_testrootorg_store

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # XXX: this should work once it is possible to install snapd on core
    SNAP=snapd
    SERVICES="ssh rsyslog"
    if os.query is-core18; then
        # a core18 already has a snapd snap, verify whether installation of core
        # does not break the configuration
        SNAP=core
        SERVICES=ssh
    fi

    echo "The defaults are applied"
    for service in $SERVICES; do
        snap get system "service.$service.disable" | MATCH true
        systemctl status "$service.service" | MATCH '(inactive|masked)'
    done
    MATCH "SSH has been disabled by snapd system configuration" < /etc/ssh/sshd_not_to_be_run

    for service in $SERVICES; do
        snap set system "service.$service.disable"=false
    done

    # install a snap that could trigger system defaults to be reapplied
    snap install "$SNAP"

    # services are still not-disabled
    for service in $SERVICES; do
        snap get system "service.$service.disable" | MATCH false
    done
    test ! -e /etc/ssh/sshd_not_to_be_run

    # Unmask rsyslog service on core18
    if os.query is-core18; then
        systemctl unmask rsyslog
    fi
