summary: Test that config defaults are applied correctly

details: |
    Test that config defaults specified in the gadget are picked up
    for first boot snaps with either configure hook only, or combination
    of default-configure and configure hooks

# the test is only meaningful on core devices
# TODO:UC20: enable for UC20, it assumes /var/lib/snapd/seed/assertions/model
#            which we don't have currently
systems: [ubuntu-core-1*]

environment:
    SERVICE/rsyslog: rsyslog
    GADGET_FILE/rsyslog: gadget-rsyslog.yaml
    SERVICE/ssh_common: ssh
    GADGET_FILE/ssh_common: gadget-ssh-common.yaml
    SERVICE/ssh_oneline: ssh
    GADGET_FILE/ssh_oneline: gadget-ssh-oneline.yaml

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh

    if [ "$SERVICE" = "rsyslog" ] && os.query is-core18; then
        echo "The service to test does not exist in the core18 system, skipping..."
        touch "${SERVICE}.skip"
        exit
    fi

    SUFFIX="$(get_test_snap_suffix)"

    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    snap download --edge "test-snapd-with-configure${SUFFIX}"

    # Configure the pc snap
    unpack_pc_snap

    # Select IDs for snaps to receive defaults from gadget
    TEST_SNAP_CONF_ID=
    TEST_SNAP_DFLT_CONF_ID=
    if [ "$SNAPPY_USE_STAGING_STORE" = 1 ]; then
        # test-snapd-with-configure
        TEST_SNAP_CONF_ID=jHxWQxtGqu7tHwiq7F8Ojk5qazcEeslT
        TEST_SNAP_DFLT_CONF_ID=cvfpQTiK2jlDAcwfalq47asjAfQT9pnn

        if os.query is-core18; then
            # test-snapd-with-configure-core18
            TEST_SNAP_CONF_ID=jHxWQxtGqu7tHwiq7F8Ojk5qazcEeslT
            TEST_SNAP_DFLT_CONF_ID=1kC7gPKoWul5j8qZ0GyxwJww1sm8vddh
        fi
    else
        # test-snapd-with-configure
        TEST_SNAP_CONF_ID=aLcJorEJZgJNUGL2GMb3WR9SoVyHUNAd
        TEST_SNAP_DFLT_CONF_ID=cvfpQTiK2jlDAcwfalq47asjAfQT9pnn

        if os.query is-core18; then
            # test-snapd-with-configure-core18
            TEST_SNAP_CONF_ID=BzMG26hwO2ccNBzV5BxK4DZgulJ2AXsa
            TEST_SNAP_DFLT_CONF_ID=1kC7gPKoWul5j8qZ0GyxwJww1sm8vddh
        fi
    fi

    # Update the gadget config file
    cat "$GADGET_FILE" >> squashfs-root/meta/gadget.yaml
    sed -i -e "s/TEST_SNAP_CONF_ID/$TEST_SNAP_CONF_ID/" squashfs-root/meta/gadget.yaml
    sed -i -e "s/TEST_SNAP_DFLT_CONF_ID/$TEST_SNAP_DFLT_CONF_ID/" squashfs-root/meta/gadget.yaml

    pack_pc_snap

    cp "test-snapd-with-configure${SUFFIX}"_*.snap /var/lib/snapd/seed/snaps/
    
    # Generic setup for test account
    prepare_core_model
    prepare_and_manip_seed "test-snapd-with-configure${SUFFIX}"_*.snap
    prepare_test_account developer1
    prepare_test_model developer1-pc-w-config
    prepare_testrootorg_store

    cp "test-snapd-with-configure${SUFFIX}"_*.assert /var/lib/snapd/seed/assertions

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

    # install snap with default-configure hook
    snap install --edge "test-snapd-with-default-configure${SUFFIX}"

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    if [ -f "${SERVICE}.skip" ]; then
        echo "The service to test does not exist in the system, skipping..."
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh

    SUFFIX="$(get_test_snap_suffix)"

    echo "Undo the service disable"
    if [ "$SERVICE" = ssh ]; then
        rm -f /etc/ssh/sshd_not_to_be_run
    else
        systemctl unmask "$SERVICE.service" || true
    fi
    systemctl enable "$SERVICE.service" || true
    systemctl start "$SERVICE.service" || true

    # remove the default configure snap before snapd lib is cleaned
    if snap list "test-snapd-with-default-configure${SUFFIX}"; then
        snap remove --purge "test-snapd-with-default-configure${SUFFIX}"
    fi

    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    # Restore pc snap configuration
    restore_pc_snap

    TEST_REVNO=$(awk "/^snap-revision: / {print \$2}" "test-snapd-with-configure${SUFFIX}"_*.assert)
    mount_unit="$(systemd-escape --path "/snap/test-snapd-with-configure${SUFFIX}/$TEST_REVNO").mount"
    systemctl stop "${mount_unit}" || true
    systemctl disable "${mount_unit}" || true
    rm -f "/etc/systemd/system/${mount_unit}"
    systemctl daemon-reload
    rm "/var/lib/snapd/seed/snaps/test-snapd-with-configure${SUFFIX}"_*.snap

    # Generic restore for test account
    restore_updated_seed
    restore_test_account developer1
    restore_test_model developer1-pc-w-config
    restore_testrootorg_store
    restore_core_model

    rm -f "/var/lib/snapd/seed/assertions/test-snapd-with-configure${SUFFIX}"_*.assert

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

    # clean leftovers of test-snapd-with-configure snap
    rm -rf "/snap/test-snapd-with-configure${SUFFIX}"
    rm -rf "/var/snap/test-snapd-with-configure${SUFFIX}"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    if [ -f "${SERVICE}.skip" ]; then
        echo "The service to test does not exist in the system, skipping..."
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh

    SUFFIX="$(get_test_snap_suffix)"

    echo "We have a model assertion"
    snap model --verbose|MATCH "model:\s* my-model-w-config"

    echo "Snap with configure hook only: Installed"
    snap list "test-snapd-with-configure${SUFFIX}"

    echo "Snap with configure hook only: The config defaults from the gadget where applied by configure hook"
    snap get "test-snapd-with-configure${SUFFIX}" a | MATCH "^A$"
    snap get "test-snapd-with-configure${SUFFIX}" b | MATCH "^B$"

    echo "Snap with default-configure and configure hooks: Installed"
    snap list "test-snapd-with-default-configure${SUFFIX}"

    echo "Snap with default-configure and configure hooks: The config defaults from the gadget where applied by default-configure hook"
    snap get "test-snapd-with-default-configure${SUFFIX}" a | MATCH "^C\+defaultConfigureHook\+configureHook$"
    snap get "test-snapd-with-default-configure${SUFFIX}" b | MATCH "^D$"

    echo "Snap with default-configure and configure hooks: The default-configure hook was run before services started"
    SNAP_COMMON="/var/snap/test-snapd-with-default-configure${SUFFIX}/common"
    MATCH "^a: C$" < "$SNAP_COMMON/default-configure-info"
    MATCH "^b: D$" < "$SNAP_COMMON/default-configure-info"
    MATCH "^test-snapd-with-default-configure${SUFFIX}.some *disabled *inactive *-$" < "$SNAP_COMMON/default-configure-info"

    echo "Snap with default-configure and configure hooks: The configure hook was run after services started"
    MATCH "^a: C\+defaultConfigureHook$" < "$SNAP_COMMON/configure-info"
    MATCH "^b: D$" < "$SNAP_COMMON/configure-info"
    MATCH "^test-snapd-with-default-configure${SUFFIX}.some *enabled *active *-$" < "$SNAP_COMMON/configure-info"

    echo "The configuration for core is applied"
    snap get core "service.$SERVICE.disable" | MATCH true
    # request a document (-d) to ensure we get an integer
    snap get -d system refresh.retain | MATCH "refresh.retain\": +5$"

    if [ "$SERVICE" = ssh ]; then
        echo "And the ssh service is disabled"
        MATCH "SSH has been disabled by snapd system configuration" < /etc/ssh/sshd_not_to_be_run
        systemctl status "$SERVICE.service" | MATCH inactive
    else
        echo "And the service is masked"
        systemctl status "$SERVICE.service" | MATCH masked
    fi
