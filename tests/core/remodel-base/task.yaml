summary: Test a remodel that switches to a new base
environment:
    OLD_BASE: core18
    NEW_BASE: test-snapd-core18

# TODO:UC20: enable on UC20
systems: [ubuntu-core-18-64]

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json
    mv /var/lib/snapd/seed/assertions/model model.bak
    cp "$TESTSLIB"/assertions/developer1.account /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/developer1.account-key /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/developer1-pc-18.model /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/testrootorg-store.account-key /var/lib/snapd/seed/assertions
    # kick first boot again
    systemctl start snapd.service snapd.socket
    retry-tool -n 60 --wait 5 sh -c 'snap changes | grep -q "Done.*Initialize system state"'

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json
    rm -f /var/lib/snapd/seed/assertions/developer1.account
    rm -f /var/lib/snapd/seed/assertions/developer1.account-key
    rm -f /var/lib/snapd/seed/assertions/developer1-pc-18.model
    rm -f /var/lib/snapd/seed/assertions/testrootorg-store.account-key
    mv model.bak /var/lib/snapd/seed/assertions/model
    rm -f ./*.bak
    # kick first boot again
    systemctl start snapd.service snapd.socket
    # wait for first boot to be done
    snap wait system seed.loaded
    retry-tool -n 60 --wait 5 sh -c 'snap changes | grep -q "Done.*Initialize system state"'    
    # extra paranoia because failure to cleanup earlier took us a long time
    # to find
    if [ -e /var/snap/$NEW_BASE/current ]; then
        echo "Leftover $NEW_BASE data dir found, test does not "
        echo "properly cleanup"
        echo "see https://github.com/snapcore/snapd/pull/6620"
        echo
        find /var/snap
        exit 1
    fi
execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/boot.sh
    . "$TESTSLIB"/boot.sh
    wait_change_done() {
        chg_summary="$1"
        for _ in $(seq 10); do
            if snap changes | MATCH "[0-9]+\\ +Done\\ +.* $chg_summary"; then
                break
            fi
            # some debug output
            snap changes
            # wait a bit
            sleep 5
        done
        snap changes | MATCH "[0-9]+\\ +Done\\ +.* $chg_summary"
    }
    # initial boot with the current model 
    if [ "$SPREAD_REBOOT" = 0 ]; then
        # sanity check
        snap list "$OLD_BASE"

        echo "We have the right model assertion"
        snap debug model|MATCH "model: my-model"
        echo "Now we remodel"
        snap remodel "$TESTSLIB"/assertions/developer1-pc-18-new-base.model
        echo "Double check that we boot into the right base"
        MATCH "snap_try_core=$NEW_BASE" < /boot/grub/grubenv
        echo "reboot to finish the change"
        REBOOT
    fi
    # first boot with the new model base
    if [ "$SPREAD_REBOOT" = 1 ]; then
        echo "and we have the new base snap installed"
        snap list "$NEW_BASE"
        echo "And are using it"
        wait_core_post_boot
        MATCH "snap_core=$NEW_BASE" < /boot/grub/grubenv
        echo "and we got the new model assertion"
        wait_change_done "Refresh model assertion from revision 0 to 2"
        snap debug model|MATCH "revision: 2"
        echo "and we cannot remove the base snap"
        not snap remove --purge "$NEW_BASE"
        # TODO: test when keeping the old base, test removing the old base
        #       (not possible here as the pc gadget uses core18 as its base)
        echo "And we can remodel again and remove the new base"
        snap remodel "$TESTSLIB"/assertions/developer1-pc-18-revno3.model
        REBOOT
    fi
    # reboot from new model to undo the new model again (to not pollute tests)
    if [ "$SPREAD_REBOOT" = 2 ]; then
        wait_core_post_boot
        MATCH "snap_core=$OLD_BASE" < /boot/grub/grubenv
        wait_change_done "Refresh model assertion from revision 2 to 3"
        snap debug model|MATCH "revision: 3"
        echo "cleanup"
        snap remove --purge "$NEW_BASE"
        snap refresh --channel="$BASE_CHANNEL" "$OLD_BASE"
        REBOOT
    fi
