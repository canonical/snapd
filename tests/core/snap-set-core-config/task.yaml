summary: Ensure "snap set core" works

systems: [ubuntu-core-*]

# TODO: use `snap set system` instead of `snap set core`

prepare: |
    rc=0
    systemctl status rsyslog.service || rc=$?
    if [ $rc = 4 ]; then
        # systemctl(1) exit code 4: no such unit

        # start fake rsyslog service
        printf '[Unit]\nDescription=test %s\n[Service]\nType=simple\nExecStart=%s\n' "${SPREAD_JOB:-unknown}" "/bin/sleep 2h" > /run/systemd/system/rsyslog.service
        systemctl daemon-reload
        systemctl start rsyslog

        # create a flag to indicate the ryslog service is fake
        touch rsyslog.fake
    fi
    # hostname is modified during the tests
    hostnamectl status --static > hostname

restore: |
    if [ -f rsyslog.fake ]; then
        systemctl stop rsyslog
        rm /run/systemd/system/rsyslog.service
        systemctl daemon-reload
    else
        systemctl enable rsyslog.service
        systemctl start rsyslog.service
    fi
    rm -f /etc/systemd/login.conf.d/00-snap-core.conf
    # restore hostname
    hostnamectl set-hostname "$(cat hostname)"

execute: |
    echo "Check that service disable works"
    systemctl status rsyslog.service|MATCH "Active: active"
    snap set core service.rsyslog.disable=true
    systemctl status rsyslog.service|MATCH "Active: inactive"
    systemctl status rsyslog.service|MATCH "Loaded: masked"
    snap set core service.rsyslog.disable=false

    echo "Check that powerkey handling works"
    snap set core system.power-key-action=reboot
    MATCH HandlePowerKey=reboot < /etc/systemd/logind.conf.d/00-snap-core.conf
    echo "Ensure unsetting cleans the file again"
    snap set core system.power-key-action=""
    if test -f /etc/systemd/logind.conf.d/00-snap-core.conf; then
        echo "unsetting system.power-key-action did not cleanup correctly"
        exit 1
    fi


    echo "Check that pi config handline works"
    if [ -e /boot/uboot/config.txt ]; then
        cp /boot/uboot/config.txt config.txt.save

        snap set core pi-config.hdmi-mode=1
        MATCH ^hdmi_mode=1 < /boot/uboot/config.txt
        snap set core pi-config.hdmi-mode=""
        MATCH ^#hdmi_mode=1 < /boot/uboot/config.txt

        echo "Ensure the config.txt are fully undo when an option is unset"
        if ! diff -u /boot/uboot/config.txt config.txt.save; then
            echo "error: unexpected diff in /boot/uboot/config.txt"
            exit 1
        fi
    fi

    echo "Check that the proxy config handling works"
    for proto in http https ftp; do
        snap set core proxy.${proto}=http://example.com:8021/
        MATCH "^${proto}_proxy=http://example.com:8021" < /etc/environment
        snap set core proxy.${proto}=""
        if grep "^{proto}_proxy=" /etc/environment; then
            echo "proxy setting was not properly cleaned up"
            cat /etc/environment
            exit 1
        fi
    done

    echo "Check that the no_proxy config handling works"
    snap set core proxy.no-proxy="example.com,bar.com"
    MATCH "^no_proxy=example.com,bar.com" < /etc/environment
    snap set core proxy.no-proxy=""
    if grep "^no_proxy=" /etc/environment ; then
        echo "proxy setting was not properly cleaned up"
        cat /etc/environment
        exit 1
    fi

    echo "Changing 'service.console-conf.disable' at runtime does not work"
    console_conf_disabled="false"
    if [ -e /var/lib/console-conf/complete ]; then
        console_conf_disabled="true"
    fi
    if [ "$console_conf_disabled" = "true" ]; then
        not snap set system service.console-conf.disable=false 2>stderr
        MATCH "cannot toggle console-conf at runtime, but only initially via gadget defaults" < stderr
        # and the console-conf complete file is unchanged
        test -e /var/lib/console-conf/complete
        # but setting to again (without changing) is fine
        snap set system service.console-conf.disable=true
    elif [ "$console_conf_disabled" = "false" ]; then
        not snap set system service.console-conf.disable=true 2>stderr
        MATCH "cannot toggle console-conf at runtime, but only initially via gadget defaults" < stderr
        # and the console-conf complete file is unchanged
        not test -e /var/lib/console-conf/complete
        # but setting to again (without changing) is fine
        snap set system service.console-conf.disable=false
    else
        echo "internal error: $console_conf_disabled var has unexpected setting"
    fi

    echo "Check that 'system.kernel.printk.console-loglevel' handling works"
    snap set system system.kernel.printk.console-loglevel=7
    test -e /etc/sysctl.d/99-snapd.conf
    sysctl -n kernel.printk|MATCH "^7\s+"

    snap unset system system.kernel.printk.console-loglevel
    not test -e /etc/sysctl.d/99-snapd.conf
    sysctl -n kernel.printk|MATCH "^4\s+"

    echo "setting the timezone works"
    tests.cleanup defer timedatectl set-timezone "$(cat /etc/timezone)"
    snap set system system.timezone=Europe/Malta
    MATCH "Europe/Malta" < /etc/timezone
    test "$(readlink -f /etc/localtime)" = "/usr/share/zoneinfo/Europe/Malta"

    echo "and timezone setting shows up in the document"
    snap get system -d | MATCH "Europe/Malta"
    echo "but the timezone is not stored in the config state"
    python3 -c 'import json,sys; j=json.loads(sys.stdin.read()); print(j["data"]["config"]);' < /var/lib/snapd/state.json | NOMATCH Europe/Malta

    echo "and setting it again in snapd also works"
    snap set system system.timezone=Europe/Berlin
    MATCH "Europe/Berlin" < /etc/timezone
    test "$(readlink -f /etc/localtime)" = "/usr/share/zoneinfo/Europe/Berlin"
    
    echo "and setting the timezone outside of snapd is reflected by snap get"
    timedatectl set-timezone "America/Denver"
    snap get system system.timezone | MATCH "America/Denver"
    snap get system -d | MATCH "America/Denver"

    echo "setting the hostname works"
    tests.cleanup defer hostnamectl set-hostname "$(hostname)"
    snap set system system.hostname=foo
    hostname | MATCH foo
    snap set system system.hostname=F00
    hostnamectl status | MATCH F00
