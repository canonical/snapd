summary: Ensure "snap set core" works

systems: [ubuntu-core-*]

# TODO: use `snap set system` instead of `snap set core`

prepare: |
    rc=0
    systemctl status rsyslog.service || rc=$?
    if [ $rc = 4 ]; then
        # systemctl(1) exit code 4: no such unit

        #shellcheck source=tests/lib/systemd.sh
        . "$TESTSLIB"/systemd.sh

        # start fake rsyslog service
        systemd_create_and_start_unit rsyslog "/bin/sleep 2h"

        # create a flag to indicate the ryslog service is fake
        touch rsyslog.fake
    fi

restore: |
    if [ -f rsyslog.fake ]; then
        #shellcheck source=tests/lib/systemd.sh
        . "$TESTSLIB"/systemd.sh
        systemd_stop_and_destroy_unit rsyslog
    else
        systemctl enable rsyslog.service
        systemctl start rsyslog.service
    fi

    rm -f /etc/systemd/login.conf.d/00-snap-core.conf

execute: |
    echo "Check that service disable works"
    systemctl status rsyslog.service|MATCH "Active: active"
    snap set core service.rsyslog.disable=true
    systemctl status rsyslog.service|MATCH "Active: inactive"
    systemctl status rsyslog.service|MATCH "Loaded: masked"
    snap set core service.rsyslog.disable=false

    echo "Check that powerkey handling works"
    snap set core system.power-key-action=reboot
    MATCH HandlePowerKey=reboot < /etc/systemd/logind.conf.d/00-snap-core.conf
    echo "Ensure unsetting cleans the file again"
    snap set core system.power-key-action=""
    if test -f /etc/systemd/logind.conf.d/00-snap-core.conf; then
        echo "unsetting system.power-key-action did not cleanup correctly"
        exit 1
    fi


    echo "Check that pi config handline works"
    if [ -e /boot/uboot/config.txt ]; then
        cp /boot/uboot/config.txt config.txt.save

        snap set core pi-config.hdmi-mode=1
        MATCH ^hdmi_mode=1 < /boot/uboot/config.txt
        snap set core pi-config.hdmi-mode=""
        MATCH ^#hdmi_mode=1 < /boot/uboot/config.txt

        echo "Ensure the config.txt are fully undo when an option is unset"
        if ! diff -u /boot/uboot/config.txt config.txt.save; then
            echo "error: unexpected diff in /boot/uboot/config.txt"
            exit 1
        fi
    fi

    echo "Check that the proxy config handling works"
    for proto in http https ftp; do
        snap set core proxy.${proto}=http://example.com:8021/
        MATCH "^${proto}_proxy=http://example.com:8021" < /etc/environment
        snap set core proxy.${proto}=""
        if grep "^{proto}_proxy=" /etc/environment; then
            echo "proxy setting was not properly cleaned up"
            cat /etc/environment
            exit 1
        fi
    done

    echo "Check that the no_proxy config handling works"
    snap set core proxy.no-proxy="example.com,bar.com"
    MATCH "^no_proxy=example.com,bar.com" < /etc/environment
    snap set core proxy.no-proxy=""
    if grep "^no_proxy=" /etc/environment ; then
        echo "proxy setting was not properly cleaned up"
        cat /etc/environment
        exit 1
    fi

    echo "Check that 'service.console-conf.disable' handling works"
    # start some instances of console-conf
    systemctl start console-conf@tty1
    systemctl start console-conf@tty2
    systemctl start serial-console-conf@ttyS0

    systemctl status 'console-conf@*' | MATCH "Active: active"
    systemctl status 'serial-console-conf@*' | MATCH "Active: active"

    snap set system service.console-conf.disable=true
    test -e /var/lib/console-conf/complete
    # no output for anything console-conf
    test -z "$(systemctl status 'console-conf@*')"
    # serial-console-conf is usually in failed status, depending on how the
    # process went down
    systemctl status 'serial-console-conf@*' | MATCH "(|Active: (inactive|failed))"

    # getty@ services are now active
    systemctl status getty@tty1 | MATCH "Active: active"
    systemctl status getty@tty2 | MATCH "Active: active"
    systemctl status serial-getty@ttyS0 | MATCH "Active: active"

    # enable it again
    snap set system service.console-conf.disable=false
    not test -e /var/lib/console-conf/complete

    # console-conf@ services are now active
    systemctl status 'console-conf@tty1' | MATCH "Active: active"
    systemctl status 'console-conf@tty2' | MATCH "Active: active"
    systemctl status 'serial-console-conf@ttyS0' | MATCH "Active: active"
    # but getty@ ones are not
    systemctl status getty@tty1 | MATCH "Active: (inactive|failed)"
    systemctl status getty@tty2 | MATCH "Active: (inactive|failed)"
    systemctl status serial-getty@ttyS0 | MATCH "Active: (inactive|failed)"

    echo "Check that 'system.kernel.printk.console-loglevel' handling works"
    snap set system system.kernel.printk.console-loglevel=7
    test -e /etc/sysctl.d/99-snapd.conf
    sysctl -n kernel.printk|MATCH "^7\s+"

    snap unset system system.kernel.printk.console-loglevel
    not test -e /etc/sysctl.d/99-snapd.conf
    sysctl -n kernel.printk|MATCH "^4\s+"
