summary: check that the core and kernel snaps roll back correctly after a failed upgrade

details: |
    This test ensures that the system can survive to a failed upgrade of a fundamental
    snap, rolling back to the last good known version.

    The logic common to all the scenarios unpacks the target snap, injects the failure,
    repacks and installs it. Then it checks that all is set for installed the snap with
    the failure and executes a reboot. The test checks that after the reboot (in fact two
    reboots, one for trying the upgrade and another for rolling back) the installed
    fundamental snap is the good one and the boot environment variables are correctly set.

# TODO: enable for UC20 ?
systems: [ubuntu-core-16-*, ubuntu-core-18-*]

# Start early as it takes a long time.
priority: 100

environment:
    INJECT_FAILURE/rclocalcrash: inject_rclocalcrash_failure
    INJECT_FAILURE/emptysystemd: inject_emptysystemd_failure
    # FIXME: disabled until we find what to do!
    # fails with:  ERROR cannot replace signed kernel snap with an unasserted one
    #INJECT_FAILURE/emptyinitrd: inject_emptyinitrd_failure
    TARGET_SNAP/rclocalcrash: core
    TARGET_SNAP/emptysystemd: core
    #TARGET_SNAP/emptyinitrd: kernel
    BUILD_DIR: /home/tmp
    # uploading the core or otherwise large snap triggers OOM
    SNAPD_NO_MEMORY_LIMIT: 1

prepare: |
    mkdir -p "$BUILD_DIR"

restore: |
    rm -rf "$BUILD_DIR"

    # FIXME: remove the unset when we reset properly snap_try_{core,kernel} on rollback
    "$TESTSTOOLS"/boot-state bootenv unset snap_try_core
    "$TESTSTOOLS"/boot-state bootenv unset snap_try_kernel

debug: |
    snap debug boot-vars
    snap list
    snap changes

execute: |
    inject_rclocalcrash_failure(){
        chmod a+x "$BUILD_DIR/unpack/etc/rc.local"
        cat <<EOF > "$BUILD_DIR/unpack/etc/rc.local"
    #!bin/sh
    printf c > /proc/sysrq-trigger
    EOF
    }

    inject_emptysystemd_failure(){
        truncate -s 0 "$BUILD_DIR/unpack/lib/systemd/systemd"
    }

    inject_emptyinitrd_failure(){
        truncate -s 0 "$BUILD_DIR/unpack/initrd.img"
    }

    if os.query is-core18 && [[ "$SPREAD_VARIANT" = "rclocalcrash" ]]; then
        # there is no /etc/rc.local on core18
        echo "scenario isn't supported on core18"
        exit 0
    fi

    #shellcheck source=tests/lib/names.sh
    . "$TESTSLIB"/names.sh
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh

    core_name="core"
    if os.query is-core18; then
        core_name="core18"
    elif os.query is-core20; then
        core_name="core20"
    fi

    if [ "$TARGET_SNAP" = kernel ]; then
        TARGET_SNAP_NAME=$kernel_name
    else
        TARGET_SNAP_NAME="$core_name"
    fi

    if [ "$SPREAD_REBOOT" = 0 ]; then
        # first pass, save current target snap revision
        snap list | awk "/^${TARGET_SNAP_NAME} / {print(\$3)}" > prevBoot

        # unpack current target snap
        unsquashfs -no-progress -d "$BUILD_DIR/unpack" "/var/lib/snapd/snaps/${TARGET_SNAP_NAME}_$(cat prevBoot).snap"

        # set failure condition
        eval "${INJECT_FAILURE}"

        # repack new target snap
        mksnap_fast "$BUILD_DIR/unpack" failing.snap

        # use journalctl wrapper to grep only the logs collected while the test is running
        if "$TESTSTOOLS"/journal-state get-log | MATCH "Waiting for system reboot"; then
            echo "Already waiting for system reboot, exiting..."
            exit 1
        fi

        # install new target snap
        snap install --no-wait --dangerous failing.snap

        # use journalctl wrapper to grep only the logs collected while the test is running
        # waiting up to 100s to reach waiting for reboot
        for _ in $(seq 50); do
            if "$TESTSTOOLS"/journal-state match-log "Waiting for system reboot"; then
                 break
            fi
            sleep 2
        done

        if ! "$TESTSTOOLS"/journal-state match-log "Waiting for system reboot"; then
            echo "Taking too long to reach waiting for reboot"
            exit 1
        fi

        # check boot env vars
        readlink "/snap/$core_name/current" > failBoot
        if [ "$TARGET_SNAP" = kernel ]; then
            snap debug boot-vars | MATCH "snap_try_kernel=${TARGET_SNAP_NAME}_$(cat failBoot).snap\$"
            snap debug boot-vars | MATCH "snap_kernel=${TARGET_SNAP_NAME}_$(cat prevBoot).snap\$"
        else
            snap debug boot-vars | MATCH "snap_try_core=${TARGET_SNAP_NAME}_$(cat failBoot).snap\$"
            snap debug boot-vars | MATCH "snap_core=${TARGET_SNAP_NAME}_$(cat prevBoot).snap\$"
        fi

        REBOOT
    fi

    # after rollback, we have the original target snap for a while
    # wait until the kernel and core snap revisions are in place
    #shellcheck disable=SC2016
    retry -n 60 --wait 1 --env TARGET_SNAP_NAME="$TARGET_SNAP_NAME" sh -c 'test $(snap list | awk "/^${TARGET_SNAP_NAME} / {print(\$3)}") = $(cat prevBoot)'

    # ensure the last install change failed as expected
    snap change --last=install | MATCH "cannot finish $TARGET_SNAP_NAME installation, there was a rollback across reboot"
    snap change --last=install | MATCH "^Error.*Automatically connect"

    # and the boot env vars are correctly set
    echo "Waiting for snapd to clean snap_mode"
    #shellcheck disable=SC2148
    #shellcheck disable=SC2016
    retry -n 200 --wait 1 sh -c 'snap debug boot-vars | MATCH "snap_mode=\$"'

    if [ "$TARGET_SNAP" = kernel ]; then
        snap debug boot-vars | MATCH 'snap_try_kernel=$'
        snap debug boot-vars | MATCH "snap_kernel=${TARGET_SNAP_NAME}_$(cat prevBoot).snap\$"
    else
        snap debug boot-vars | MATCH 'snap_try_core=$'
        snap debug boot-vars | MATCH "snap_core=${TARGET_SNAP_NAME}_$(cat prevBoot).snap\$"
    fi
