summary: check that the core and kernel snaps roll back correctly after a failed upgrade

details: |
    This test ensures that the system can survive to a failed upgrade of a fundamental
    snap, rolling back to the last good known version.

    The logic common to all the scenarios unpacks the target snap, injects the failure,
    repacks and installs it. Then it checks that all is set for installed the snap with
    the failure and executes a reboot. The test checks that after the reboot (in fact two
    reboots, one for trying the upgrade and another for rolling back) the installed
    fundamental snap is the good one and the boot environment variables are correctly set.

# TODO: enable for UC18 ?
systems: [ubuntu-core-16-*]

# Start early as it takes a long time.
priority: 100

environment:
    INJECT_FAILURE/rclocalcrash: inject_rclocalcrash_failure
    INJECT_FAILURE/emptysystemd: inject_emptysystemd_failure
    # FIXME: disabled until we find what to do!
    # fails with:  ERROR cannot replace signed kernel snap with an unasserted one
    #INJECT_FAILURE/emptyinitrd: inject_emptyinitrd_failure
    TARGET_SNAP/rclocalcrash: core
    TARGET_SNAP/emptysystemd: core
    #TARGET_SNAP/emptyinitrd: kernel
    BUILD_DIR: /home/tmp

prepare: |
    mkdir -p "$BUILD_DIR"

restore: |
    rm -rf "$BUILD_DIR"

    # FIXME: remove the unset when we reset properly snap_try_{core,kernel} on rollback
    "$TESTSTOOLS"/boot-state bootenv unset snap_try_core
    "$TESTSTOOLS"/boot-state bootenv unset snap_try_kernel

debug: |
    "$TESTSTOOLS"/boot-state bootenv show
    snap list
    snap changes

execute: |
    inject_rclocalcrash_failure(){
        chmod a+x "$BUILD_DIR/unpack/etc/rc.local"
        cat <<EOF > "$BUILD_DIR/unpack/etc/rc.local"
    #!bin/sh
    printf c > /proc/sysrq-trigger
    EOF
    }

    inject_emptysystemd_failure(){
        truncate -s 0 "$BUILD_DIR/unpack/lib/systemd/systemd"
    }

    inject_emptyinitrd_failure(){
        truncate -s 0 "$BUILD_DIR/unpack/initrd.img"
    }

    #shellcheck source=tests/lib/names.sh
    . "$TESTSLIB"/names.sh
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh

    if [ "$TARGET_SNAP" = kernel ]; then
        TARGET_SNAP_NAME=$kernel_name
    else
        TARGET_SNAP_NAME=core
    fi

    if [ "$SPREAD_REBOOT" = 0 ]; then
        # first pass, save current target snap revision
        snap list | awk "/^${TARGET_SNAP_NAME} / {print(\$3)}" > prevBoot

        # unpack current target snap
        unsquashfs -no-progress -d "$BUILD_DIR/unpack" "/var/lib/snapd/snaps/${TARGET_SNAP_NAME}_$(cat prevBoot).snap"

        # set failure condition
        eval "${INJECT_FAILURE}"

        # repack new target snap
        mksnap_fast "$BUILD_DIR/unpack" failing.snap

        # use journalctl wrapper to grep only the logs collected while the test is running
        if "$TESTSTOOLS"/journal-state get-log | MATCH "Waiting for system reboot"; then
            echo "Already waiting for system reboot, exiting..."
            exit 1
        fi

        # install new target snap
        snap install --no-wait --dangerous failing.snap

        # use journalctl wrapper to grep only the logs collected while the test is running
        # waiting up to 100s to reach waiting for reboot
        for _ in $(seq 50); do
            if "$TESTSTOOLS"/journal-state match-log "Waiting for system reboot"; then
                 break
            fi
            sleep 2
        done

        if ! "$TESTSTOOLS"/journal-state match-log "Waiting for system reboot"; then
            echo "Taking too long to reach waiting for reboot"
            exit 1
        fi

        # check boot env vars
        readlink /snap/core/current > failBoot
        test "$("$TESTSTOOLS"/boot-state bootenv show snap_"${TARGET_SNAP}")" = "${TARGET_SNAP_NAME}_$(cat prevBoot).snap"
        test "$("$TESTSTOOLS"/boot-state bootenv show snap_try_"${TARGET_SNAP}")" = "${TARGET_SNAP_NAME}_$(cat failBoot).snap"

        REBOOT
    fi

    # after rollback, we have the original target snap for a while
    # wait until the kernel and core snap revisions are in place
    while true ; do
        current=$(snap list | awk "/^${TARGET_SNAP_NAME} / {print(\$3)}")
        if [ "$current" = "$(cat prevBoot)" ] ; then
            break
        fi
        sleep 1
    done

    # ensure the last install change failed as expected
    snap change --last=install | MATCH "cannot finish core installation, there was a rollback across reboot"
    snap change --last=install | MATCH "^Error.*Automatically connect"

    # and the boot env vars are correctly set
    echo "Waiting for snapd to clean snap_mode"
    while [ "$("$TESTSTOOLS"/boot-state bootenv show snap_mode)" != "" ]; do
        sleep 1
    done

    test "$("$TESTSTOOLS"/boot-state bootenv show snap_"${TARGET_SNAP}")" = "${TARGET_SNAP_NAME}_$(cat prevBoot).snap"
    # FIXME: reenable the last check when we reset properly snap_try_{core,kernel} on rollback
    # test "$("$TESTSTOOLS"/boot-state bootenv show snap_try_${TARGET_SNAP})" = ""
