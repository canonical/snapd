summary: Ensures that any combination of two of base, gadget and kernel will undo with a single reboot in each direction.

details: |
    Test ensures that if any two of the essential snaps (base, gadget and kernel) can be refreshed
    together with a single reboot, and will also revert with no more than a single reboot.

# TODO make the test work with ubuntu-core-20
systems: [ubuntu-core-18-*]

environment:
    SNAP_ONE/kernel_base: core
    SNAP_TWO/kernel_base: pc-kernel

    SNAP_ONE/gadget_base: core
    SNAP_TWO/gadget_base: pc
    
    SNAP_ONE/kernel_gadget: pc
    SNAP_TWO/kernel_gadget: pc-kernel

    BLOB_DIR: $(pwd)/fake-store-blobdir

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    core_snap=core20
    if os.query is-core18; then
        core_snap=core18
    fi

    # read all for simplification
    readlink /snap/pc-kernel/current > pc-kernel.rev
    readlink "/snap/$core_snap/current" > core.rev
    readlink "/snap/pc/current" > pc.rev

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    "$TESTSTOOLS"/store-state teardown-fake-store "$BLOB_DIR"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # shellcheck source=tests/lib/prepare.sh
    . "$TESTSLIB/prepare.sh"

    core_snap=core20
    if os.query is-core18; then
        core_snap=core18
    fi

    if [ "$SNAP_ONE" = "core" ]; then
        SNAP_ONE=$core_snap
    elif [ "$SNAP_TWO" = "core" ]; then
        SNAP_TWO=$core_snap
    fi

    if [ "$SPREAD_REBOOT" = 0 ]; then
        snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"
        "$TESTSTOOLS"/store-state setup-fake-store "$BLOB_DIR"

        # break the pc-kernel snap if that is the last snap
        if [[ "$SNAP_TWO" == "pc-kernel" ]]; then
            if os.query is-core18; then
                unsquashfs -d pc-kernel-snap /var/lib/snapd/snaps/pc-kernel_*.snap
                truncate -s 0 pc-kernel-snap/initrd.img
            elif os.query is-core20; then
                uc20_build_initramfs_kernel_snap pc-kernel.snap "$PWD" --inject-kernel-panic-in-initramfs
            else
                echo "unsupported Ubuntu Core system"
                exit 1
            fi
            "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" pc-kernel --snap-blob "$PWD/pc-kernel-snap"
        elif [[ "$SNAP_ONE" == "pc-kernel" ]]; then
            "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" pc-kernel
        fi

        # break the gadget snap if that is the second snap
        if [[ "$SNAP_TWO" == "pc" ]]; then
            unsquashfs -d pc-snap /var/lib/snapd/snaps/pc_*.snap
            echo 'exit 1' >> ./pc-snap/snap/hooks/configure
            "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" pc --snap-blob "$PWD/pc-snap"
        elif [[ "$SNAP_ONE" == "pc" ]]; then
            "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" pc
        fi

        if [[ "$SNAP_ONE" == "$core_snap" ]] || [[ "$SNAP_TWO" == "$core_snap" ]]; then
            "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" "$core_snap"
        fi

        snap refresh --no-wait "$SNAP_ONE" "$SNAP_TWO" > refresh-change-id
        test -n "$(cat refresh-change-id)"
        change_id="$(cat refresh-change-id)"
        
        # wait for the link tasks to be done
        retry -n 50 --wait 1 sh -c 'journalctl -b -u snapd | MATCH "Waiting for system reboot"'

        # both link snaps should be done now, snapd was stopped, so we cannot
        # use 'snap change' and we need to inspect the state directly (even if
        # snapd was up, it would not respond to API requests as it would be busy
        # retrying auto-connect)
        snap debug state --change "$change_id" /var/lib/snapd/state.json > tasks.state
        # both link snaps are done
        MATCH " Wait\s+.*Make snap \"$SNAP_TWO\" .* available" < tasks.state
        MATCH " Done\s+.*Make snap \"$SNAP_ONE\" .* available" < tasks.state
        # auto-connect of the base is in doing and waiting for reboot
        MATCH " Do\s+.*Automatically connect eligible plugs and slots of snap \"$SNAP_ONE\"" < tasks.state
        # auto-connect of the kernel is still queued
        MATCH " Do\s+.*Automatically connect eligible plugs and slots of snap \"$SNAP_TWO\"" < tasks.state

        if os.query is-core18; then
            snap debug boot-vars > boot-vars.dump
            if [[ "$SNAP_ONE" == *"core"* ]] || [[ "$SNAP_TWO" == *"core"* ]]; then
                MATCH 'snap_mode=try' < boot-vars.dump
                MATCH 'snap_try_core=core18_.*.snap' < boot-vars.dump
            fi
            if [[ "$SNAP_ONE" == "pc-kernel" ]] || [[ "$SNAP_TWO" == "pc-kernel" ]]; then
                MATCH 'snap_mode=try' < boot-vars.dump
                MATCH 'snap_try_kernel=pc-kernel_.*.snap' < boot-vars.dump
            fi
        elif os.query is-core20; then
            if [[ "$SNAP_ONE" == "pc-kernel" ]] || [[ "$SNAP_TWO" == "pc-kernel" ]]; then
                stat /boot/grub/try-kernel.efi | MATCH 'pc_kernel.*.snap/kernel.efi'
                stat -L /boot/grub/try-kernel.efi
            fi
            if [[ "$SNAP_ONE" == *"core"* ]] || [[ "$SNAP_TWO" == *"core"* ]]; then
                MATCH 'try_base=core20_.*.snap' < /var/lib/snapd/modeenv
            fi
        else
            echo "unsupported Ubuntu Core system"
            exit 1
        fi

        REBOOT
    elif [ "$SPREAD_REBOOT" = 1 ] || [ "$SPREAD_REBOOT" = 2 ]; then
        # Because it's the configure hook we expect the error to happen after
        # system comes up, where-as with the kernel failure it happens before
        # we're able to observe it
        if [ "$SPREAD_REBOOT" = 2 ] && [[ "$SNAP_TWO" != "pc" ]]; then
            echo "unexpected reboot"
            exit 1
        fi

        change_id="$(cat refresh-change-id)"
        snap watch "$change_id" || true

        # The gadget snap continue after the reboot, and then fails, the change reverts
        # and requests another reboot for a total of 2 reboots (one for do, one for undo)
        if [ "$SPREAD_REBOOT" = 1 ] && [[ "$SNAP_TWO" == "pc" ]]; then
            # wait for a restart to be requested
            retry -n 50 --wait 1 sh -c 'journalctl -b -u snapd | MATCH "Waiting for system reboot"'
            REBOOT
        fi

        # we expect the change to have failed due to the kernel not booting
        # properly
        snap watch "$change_id" || true
        snap changes | MATCH "$change_id\s+Error"
        snap change "$change_id" > tasks.done
        # both link snaps were undone
        MATCH "Undone\s+.*Make snap \"$SNAP_ONE\" .* available" < tasks.done
        MATCH "Undone\s+.*Make snap \"$SNAP_TWO\" .* available" < tasks.done

        # TODO: checks for UC20+
        if os.query is-core18; then
            # boot variables should have been cleared
            snap debug boot-vars > boot-vars.dump
            MATCH 'snap_mode=$' < boot-vars.dump
            MATCH 'snap_try_core=$' < boot-vars.dump
            MATCH 'snap_try_kernel=$' < boot-vars.dump
        fi

        # make sure the system is in stable state, no pending reboots
        # XXX systemctl exits with non-0 when in degraded state
        # Note: on bionic, is-system-running does not support --wait
        retry -n 30 sh -c '(systemctl is-system-running || true) | MATCH "(running|degraded)"'

        # we're expecting the old revisions to be back
        # verify that current points to old revisions

        if [[ "$SNAP_ONE" == *"core"* ]] || [[ "$SNAP_TWO" == *"core"* ]]; then
            expecting_core="$(cat core.rev)"
            test "$(readlink /snap/$core_snap/current)" = "$expecting_core"
        fi
        if [[ "$SNAP_ONE" == "pc" ]] || [[ "$SNAP_TWO" == "pc" ]]; then
            expecting_gadget="$(cat pc.rev)"
            test "$(readlink /snap/pc/current)" = "$expecting_gadget"
        fi
        if [[ "$SNAP_ONE" == "pc-kernel" ]] || [[ "$SNAP_TWO" == "pc-kernel" ]]; then
            expecting_kernel="$(cat pc-kernel.rev)"
            test "$(readlink /snap/pc-kernel/current)" = "$expecting_kernel"
        fi
    else
        echo "unexpected reboot"
        exit 1
    fi
