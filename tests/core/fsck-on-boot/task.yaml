summary: the boot base provides essential fsck programs

details: |
  Snapd uses vfat on certain essential boot partitions, due to external
  requirements imposed by the bootloader architecture. This test verifies that
  the boot process is capable of detecting unclean vfat and fixing it before
  such file system is mounted. This is an essential property to ensure
  longevity of devices that rely on write to vfat to operate.

execute: |
  unmount_vfat() {
    if os.query is-core16; then
      # Refer to the core 16 gadgets for details:
      # https://github.com/snapcore/pc-amd64-gadget/blob/16/gadget.yaml
      # https://github.com/snapcore/pi2-gadget/blob/master/gadget.yaml
      if os.query is-arm; then
        umount /boot/uboot
      else
        umount /boot/efi
        umount /boot/grub
      fi
    elif os.query is-core18; then
      # Refer to the core 18 gadgets for details:
      # https://github.com/snapcore/pc-amd64-gadget/blob/18/gadget.yaml
      # https://github.com/snapcore/pi2-gadget/blob/18/gadget.yaml
      if os.query is-arm; then
        umount /boot/uboot
      else
        umount /boot/efi
        umount /boot/grub
      fi
    elif os.query is-core20; then
      # TODO:UC20 The property of having to keep a mounted vfat at all time
      # is not the most fortunate. Any power loss will result in a dirty
      # filesystem. Could ubuntu-seed be re-mounted read-only at some point
      # during the start-up process?  Power loss on read-only vfat is
      # harmless in comparison.

      # The snapd snap from the recovery system will only be mounted if we are
      # on the first boot - subsequent boots do not mount it, because we will
      # unset RecoverySystem in the modeenv, and it's not necessary for
      # seeding anymore

      if mountpoint /run/mnt/snapd >/dev/null; then
        umount /run/mnt/snapd
      fi
      retry -n 20 --wait 2 sh -c 'umount /var/lib/snapd/seed'
      umount /run/mnt/ubuntu-seed

      # Refer to the core 20 gadgets for details:
      # https://github.com/snapcore/pc-amd64-gadget/blob/20/gadget.yaml
      # https://github.com/snapcore/pi-gadget/blob/20-arm64/gadget.yaml
      if os.query is-arm; then
        umount /boot/uboot
      else
        umount /boot/efi
      fi
    else
      echo "Please adjust the test to support this core system"
      false
    fi
  }

  if os.query is-core16 || os.query is-core18; then
    LABEL=system-boot
  elif os.query is-core20; then
    LABEL=ubuntu-seed
  else
    echo "unknown core system, please update test"
    exit 1
  fi

  case "$SPREAD_REBOOT" in
    0)
      echo "We can corrupt the boot partition"
      # FAT uses a specific byte to effectively indicate that the file system is
      # dirty. The precise details as to how this byte is used by each system vary,
      # but Linux sets it on a non-read-only mount, and clears it on unmount. We
      # can set it manually, verify it when the image is mounted and observe fsck
      # clearing it. Note that larger block devices use FAT32 and the offset
      # differs. FAT12 and FAT16 uses 37 while FAT32 uses 65.
      unmount_vfat
      # Use offset 65 as FAT32 kicks in for devices larger than 32MB
      printf "\x01" > one
      tests.cleanup defer rm -f one
      dd if=one of="/dev/disk/by-label/$LABEL" seek=65 bs=1 count=1 conv=notrunc
      tests.cleanup pop

      # Reboot to give the early boot process a chance to fix the corruption.
      REBOOT
      ;;
    1)
      echo "On the next boot, we should not see the dirty flag anymore"
      # Note that we cannot read the dirty byte from the filesystem as it is
      # automatically set by the kernel when vfat is mounted. We must resort
      # to observing the kernel ring buffer. Should this message ever change, the
      # sister fsck-vfat test does a controlled experiment in mounting a dirty
      # vfat, to ensure that we are aware of such changes.
      dmesg -c > dmesg-on-boot.log
      NOMATCH "Volume was not properly unmounted. Some data may be corrupt. Please run fsck." < dmesg-on-boot.log

      # Unmount vfat again and read the dirty flag manually. The kernel doesn't
      # clean the dirty flag on unmount, if it was present on mount. This method is
      # less sensitive to kernel log messages being preserved in the early boot
      # chain.
      unmount_vfat
      cat /proc/self/mountinfo >boot1-after-umount.log
      dd if="/dev/disk/by-label/$LABEL" of=dirty skip=65 bs=1 count=1 conv=notrunc
      test "$(od -t x1 -A n dirty)" = " 00"  # NOTE: the leading space is relevant

      # Reboot to restore mount points.
      REBOOT
      ;;
  esac
