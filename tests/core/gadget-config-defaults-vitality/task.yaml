summary: |
   Test that vitality defaults specified in the gadget are picked up
   for first boot snaps

# the test is only meaningful on core devices
# TODO:UC20: enable for UC20, it assumes /var/lib/snapd/seed/assertions/model
#            which we don't have currently
systems: [ubuntu-core-1*]

environment:
    GADGET_FILE/vitality_hint: gadget-vitality-hint.yaml

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    SUFFIX=
    MODEL=developer1-pc-w-config.model
    if is_core18_system; then
        SUFFIX=-core18
        MODEL=developer1-pc-18-w-config.model
    fi

    # Stop snapd and remove existing state, modify and repack gadget
    # snap and provide developer assertions in order to force first
    # boot again.
    #
    # TODO: find common pattern and extract code from the various tests
    #       that use similar code to simulate a first-boot
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json

    snap download --edge "test-snapd-with-configure${SUFFIX}"
    unsquashfs -no-progress /var/lib/snapd/snaps/pc_*.snap

    # Update the gadget config file
    cat "$GADGET_FILE" >> squashfs-root/meta/gadget.yaml
    # add service to the gadget
    cat <<EOF >> squashfs-root/meta/snap.yaml
    apps:
     other:
      command: service
      daemon: simple
    EOF
    cat <<EOF >> squashfs-root/service
    #!/bin/sh
    echo other service
    exec sleep infinity
    EOF
    chmod +x squashfs-root/service

    mksquashfs squashfs-root pc_x1.snap -comp xz -no-fragments -no-progress
    rm -rf squashfs-root
    cp pc_x1.snap /var/lib/snapd/seed/snaps/
    cp "test-snapd-with-configure${SUFFIX}"_*.snap /var/lib/snapd/seed/snaps/
    mv /var/lib/snapd/seed/assertions/model model.bak
    cp /var/lib/snapd/seed/seed.yaml seed.yaml.bak
    python3 ./manip_seed.py /var/lib/snapd/seed/seed.yaml "test-snapd-with-configure${SUFFIX}"_*.snap
    cp "$TESTSLIB"/assertions/developer1.account /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/developer1.account-key /var/lib/snapd/seed/assertions
    cp "$TESTSLIB/assertions/$MODEL" /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/testrootorg-store.account-key /var/lib/snapd/seed/assertions
    cp "test-snapd-with-configure${SUFFIX}"_*.assert /var/lib/snapd/seed/assertions

    # kick first boot again
    systemctl start snapd.service snapd.socket

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    SUFFIX=
    MODEL=developer1-pc-w-config.model
    if is_core18_system; then
        SUFFIX=-core18
        MODEL=developer1-pc-18-w-config.model
    fi

    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json

    if systemctl status snap-pc-x1.mount ; then
       systemctl stop snap-pc-x1.mount
       rm -f /etc/systemd/system/snap-pc-x1.mount
       rm -f /etc/systemd/system/multi-user.target.wants/snap-pc-x1.mount
       rm -f /var/lib/snapd/snaps/pc_x1.snap
       systemctl daemon-reload
    fi
    rm /var/lib/snapd/seed/snaps/pc_x1.snap

    TEST_REVNO=$(awk "/^snap-revision: / {print \$2}" "test-snapd-with-configure${SUFFIX}"_*.assert)
    if systemctl status "$(systemd-escape --path "/snap/test-snapd-with-configure${SUFFIX}/$TEST_REVNO.mount")"; then
       systemctl stop "$(systemd-escape --path "/snap/test-snapd-with-configure${SUFFIX}/$TEST_REVNO.mount")"
       rm -f "/etc/systemd/system/snap-test-snapd-with-configure${SUFFIX}-${TEST_REVNO}.mount"
       rm -f "/etc/systemd/system/multi-user.target.wants/snap-test-snapd-with-configure${SUFFIX}-${TEST_REVNO}.mount"
       rm -f "/var/lib/snapd/snaps/test-snapd-with-configure${SUFFIX}"_*.snap
       systemctl daemon-reload
    fi
    rm "/var/lib/snapd/seed/snaps/test-snapd-with-configure${SUFFIX}"_*.snap

    cp seed.yaml.bak /var/lib/snapd/seed/seed.yaml
    rm -f /var/lib/snapd/seed/assertions/developer1.account
    rm -f /var/lib/snapd/seed/assertions/developer1.account-key
    rm -f "/var/lib/snapd/seed/assertions/$MODEL"
    rm -f /var/lib/snapd/seed/assertions/testrootorg-store.account-key
    rm -f "/var/lib/snapd/seed/assertions/test-snapd-with-configure${SUFFIX}"_*.assert
    cp model.bak /var/lib/snapd/seed/assertions/model
    # kick first boot again
    systemctl start snapd.service snapd.socket
    # wait for first boot to be done
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done

execute: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    SUFFIX=
    if is_core18_system; then
        SUFFIX=-core18
    fi

    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    echo "Wait for first boot to be done"
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
    echo "We have a model assertion"
    snap model --verbose|MATCH "model:\s* my-model-w-config"

    echo "The configurable snap was installed"
    snap list|MATCH "test-snapd-with-configure${SUFFIX}"

    echo "The configuration for the service is applied"
    systemctl show snap.pc.other.service |MATCH "OOMScoreAdjust=-898"
    if [ "$SUFFIX" = "" ]; then
        systemctl show snap.test-snapd-with-configure${SUFFIX}.some.service |MATCH "OOMScoreAdjust=-897"
    elif [ "$SUFFIX" = -"core18" ]; then
        systemctl show snap.test-snapd-with-configure${SUFFIX}.some.service |MATCH "OOMScoreAdjust=-896"
    else
        echo "Unknown suffix $SUFFIX"
        exit 1
    fi
