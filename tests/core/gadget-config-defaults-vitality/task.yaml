summary: |
   Test that vitality defaults specified in the gadget are picked up
   for first boot snaps

# the test is only meaningful on core devices
# TODO:UC20: enable for UC20, it assumes /var/lib/snapd/seed/assertions/model
#            which we don't have currently
systems: [ubuntu-core-1*]

environment:
    GADGET_FILE/vitality_hint: gadget-vitality-hint.yaml

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh

    # Stop snapd and remove existing state, modify and repack gadget
    # snap and provide developer assertions in order to force first
    # boot again.
    #
    # TODO: find common pattern and extract code from the various tests
    #       that use similar code to simulate a first-boot
    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    SUFFIX="$(get_test_snap_suffix)"
    snap download --edge "test-snapd-with-configure${SUFFIX}"
    
    # Configure the pc snap
    unpack_pc_snap

    # Update the gadget config file
    cat "$GADGET_FILE" >> squashfs-root/meta/gadget.yaml
    # add service to the gadget
    cat <<EOF >> squashfs-root/meta/snap.yaml
    apps:
     other:
      command: service
      daemon: simple
    EOF
    cat <<EOF >> squashfs-root/service
    #!/bin/sh
    echo other service
    exec sleep infinity
    EOF
    chmod +x squashfs-root/service

    pack_pc_snap

    cp "test-snapd-with-configure${SUFFIX}"_*.snap /var/lib/snapd/seed/snaps/
    prepare_core_model
    prepare_and_manip_seed "test-snapd-with-configure${SUFFIX}"_*.snap
    
    prepare_test_account developer1
    prepare_test_model developer1-pc-w-config
    prepare_testrootorg_store
    cp "test-snapd-with-configure${SUFFIX}"_*.assert /var/lib/snapd/seed/assertions

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh

    SUFFIX="$(get_test_snap_suffix)"

    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    clean_snapd_lib

    # Restore pc snap configuration
    restore_pc_snap

    TEST_REVNO=$(awk "/^snap-revision: / {print \$2}" "test-snapd-with-configure${SUFFIX}"_*.assert)
    if systemctl status "$(systemd-escape --path "/snap/test-snapd-with-configure${SUFFIX}/$TEST_REVNO.mount")"; then
       systemctl stop "$(systemd-escape --path "/snap/test-snapd-with-configure${SUFFIX}/$TEST_REVNO.mount")"
       rm -f "/etc/systemd/system/snap-test-snapd-with-configure${SUFFIX}-${TEST_REVNO}.mount"
       rm -f "/etc/systemd/system/multi-user.target.wants/snap-test-snapd-with-configure${SUFFIX}-${TEST_REVNO}.mount"
       rm -f "/var/lib/snapd/snaps/test-snapd-with-configure${SUFFIX}"_*.snap
       systemctl daemon-reload
    fi
    rm "/var/lib/snapd/seed/snaps/test-snapd-with-configure${SUFFIX}"_*.snap

    # Generic restore for test account
    restore_updated_seed
    restore_test_account developer1
    restore_test_model developer1-pc-w-config
    restore_testrootorg_store
    restore_core_model

    rm -f "/var/lib/snapd/seed/assertions/test-snapd-with-configure${SUFFIX}"_*.assert

    # kick first boot again
    systemctl start snapd.service snapd.socket

    # wait for first boot to be done
    wait_for_first_boot_change

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh

    SUFFIX="$(get_test_snap_suffix)"

    echo "We have a model assertion"
    snap model --verbose|MATCH "model:\s* my-model-w-config"

    echo "The configurable snap was installed"
    snap list|MATCH "test-snapd-with-configure${SUFFIX}"

    echo "The configuration for the service is applied"
    systemctl show snap.pc.other.service |MATCH "OOMScoreAdjust=-898"
    if [ "$SUFFIX" = "" ]; then
        systemctl show "snap.test-snapd-with-configure${SUFFIX}.some.service" | MATCH "OOMScoreAdjust=-897"
    elif [ "$SUFFIX" = -"core18" ]; then
        systemctl show "snap.test-snapd-with-configure${SUFFIX}.some.service" | MATCH "OOMScoreAdjust=-896"
    else
        echo "Unknown suffix $SUFFIX"
        exit 1
    fi
