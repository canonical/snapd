summary: Verify behavior of undoing essential snap updates, when updating base, gadget and kernel

details: |
    Test ensures that if one of the essential snaps fail to update, together with
    other essential snaps (boot-base, gadget, kernel specifically), then all of
    them are rolled back.

    The order we expect things to happen in is:
    1. Boot-base updates and requests restart
    2. Gadget updates and requests restart
    3. Kernel updates, requests restart
    4. Kernel update fails, reverts to previous
    5. Gadget reverts, no restart request
       - The reason for this is that there are no command-line changes, i.e no request done
       - The second reason is that "update-gadget-assets" have no undo logic, i.e no request done 
    6. Boot-base reverts, requests restart
    7. Change is undone, with 4 reboots.

# TODO make the test work with ubuntu-core-20
systems: [ubuntu-core-18-*]

environment:
    BLOB_DIR: $(pwd)/fake-store-blobdir

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    readlink "/snap/pc-kernel/current" > pc-kernel.rev
    readlink "/snap/core18/current" > core.rev
    readlink "/snap/pc/current" > pc.rev

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    
execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"
    "$TESTSTOOLS"/store-state setup-fake-store "$BLOB_DIR"

    if [ "$SPREAD_REBOOT" = 0 ]; then
        # break the pc-kernel snap
        unsquashfs -d pc-kernel-snap /var/lib/snapd/snaps/pc-kernel_*.snap
        truncate -s 0 pc-kernel-snap/initrd.img

        "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" pc-kernel --snap-blob "$PWD/pc-kernel-snap"
        "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" core18
        "$TESTSTOOLS"/store-state init-fake-refreshes "$BLOB_DIR" pc

        snap refresh --no-wait core18 pc pc-kernel > refresh-change-id
        
        # wait for the link task to be done for base
        retry -n 50 --wait 1 sh -c 'journalctl -b -u snapd | MATCH "Waiting for system reboot"'

        snap debug boot-vars > boot-vars.dump
        MATCH 'snap_mode=try' < boot-vars.dump
        MATCH 'snap_try_core=core18_.*.snap' < boot-vars.dump

        REBOOT
    elif [ "$SPREAD_REBOOT" = 1 ]; then
        change_id="$(cat refresh-change-id)"
        snap watch "$change_id" || true

        # wait for the link task to be done for gadget
        retry -n 50 --wait 1 sh -c 'journalctl -b -u snapd | MATCH "Waiting for system reboot"'

        snap debug boot-vars > boot-vars.dump
        MATCH 'snap_mode=try' < boot-vars.dump
        MATCH 'snap_try_kernel=pc-kernel_.*.snap' < boot-vars.dump

        REBOOT
    elif [ "$SPREAD_REBOOT" = 2 ]; then
        # wait for reboot to occur as change reverts, at this point kernel will have reverted, and
        # now we are waiting for the base to request a restart as the gadget is not requesting one
        retry -n 50 --wait 1 sh -c 'journalctl -b -u snapd | MATCH "Waiting for system reboot"'

        REBOOT
    elif [ "$SPREAD_REBOOT" = 3 ]; then
        change_id="$(cat refresh-change-id)"
        # we expect the change to have failed due to the kernel not booting
        # properly
        snap watch "$change_id" || true
        snap changes | MATCH "$change_id\s+Error"
        snap change "$change_id" > tasks.done
        
        # and since kernel, gadget and base all are considered to be forced as a transaction
        # we expect all to be undone
        MATCH 'Undone\s+.*Make snap "pc-kernel" .* available' < tasks.done
        MATCH 'Undone\s+.*Make snap "core18" .* available' < tasks.done
        MATCH 'Undone\s+.*Make snap "pc" .* available' < tasks.done

        # boot variables should have been cleared
        snap debug boot-vars > boot-vars.dump
        MATCH 'snap_mode=$' < boot-vars.dump
        MATCH 'snap_try_core=$' < boot-vars.dump
        MATCH 'snap_try_kernel=$' < boot-vars.dump

        # make sure the system is in stable state, no pending reboots
        # XXX systemctl exits with non-0 when in degraded state
        # Note: on bionic, is-system-running does not support --wait
        retry -n 30 sh -c '(systemctl is-system-running || true) | MATCH "(running|degraded)"'

        # we're expecting the old revisions to be back
        original_kernel="$(cat pc-kernel.rev)"
        original_core="$(cat core.rev)"
        original_pc="$(cat pc.rev)"

        # verify that current points to old revisions
        test "$(readlink /snap/pc-kernel/current)" = "$original_kernel"
        test "$(readlink /snap/core18/current)" = "$original_core"
        test "$(readlink /snap/pc/current)" = "$original_pc"
    else
        echo "unexpected reboot"
        exit 1
    fi
