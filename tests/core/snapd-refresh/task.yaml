summary: Test refreshing snapd and running new units

# UC16 still uses the core snap rather than the snapd snap, so disable this test
# for UC16
systems: [-ubuntu-core-16-*]

environment:
    # uploading large snap triggers OOM
    SNAPD_NO_MEMORY_LIMIT: 1

restore: |
    # Remove all inactive revisions of snapd.
    current=$(readlink /snap/snapd/current)
    for revno_path in /snap/snapd/*; do
        revno=$(basename "$revno_path")
        if [ "$revno" == current ] || [ "$revno" == "$current" ]; then
            continue
        fi
        snap remove snapd --revision="$revno"
    done

execute: |
    echo "Testing refresh/revert of snapd"
    current=$(readlink /snap/snapd/current)
    SNAPD_SNAP=$(ls /var/lib/snapd/snaps/snapd_"$current".snap)
    for _ in $(seq 10); do

        echo "Installing a new snapd snap"
        snap install --dangerous "$SNAPD_SNAP"
        echo "Still leaves 'snap list' working"
        if snap list | grep "snapd.*$current "; then
            echo "snap install of new snapd did not update to new snapd"
            exit 1
        fi
        running="$(readlink -f /proc/"$(pidof snapd)"/exe)"
        if echo "$running" | grep "/snap/snapd/$current/usr/lib/"; then
            echo "The current running snapd is not $running"
            exit 1
        fi

        echo "And reverting snapd"
        snap revert snapd
        echo "Also gives us a working snapd"
        snap list | MATCH "snapd.*$current "
        echo "And we see the original snapd running"
        running="$(readlink -f /proc/"$(pidof snapd)"/exe)"
        echo "$running" | MATCH "/snap/snapd/$current/usr/lib/"
    done
    snap changes | MATCH 'Install "snapd"'
    snap changes | MATCH 'Revert "snapd" snap'

    # ensure snapd is working after a reboot
    if [ "$SPREAD_REBOOT" = 0 ]; then
        REBOOT
    fi

    snap list | MATCH "snapd.*$current "
    snap install test-snapd-sh-core18
    test-snapd-sh-core18.sh -c 'echo hello' | MATCH hello
