summary: Check that `snap connect` runs interface hooks

environment:
    CONSUMER_DATA: /var/snap/basic-iface-hooks-consumer/common
    PRODUCER_DATA: /var/snap/basic-iface-hooks-producer/common

prepare: |
    snap install --devmode jq

    echo "Install test hooks snaps"
    "$TESTSTOOLS"/snaps-state install-local basic-iface-hooks-consumer
    "$TESTSTOOLS"/snaps-state install-local basic-iface-hooks-producer

restore: |
    rm -f "$CONSUMER_DATA/prepare-plug-consumer-done"
    rm -f "$PRODUCER_DATA/prepare-slot-producer-done"
    rm -f "$CONSUMER_DATA/connect-plug-consumer-done"
    rm -f "$PRODUCER_DATA/connect-slot-producer-done"
    rm -f "$CONSUMER_DATA/disconnect-plug-consumer-done"
    rm -f "$PRODUCER_DATA/disconnect-slot-producer-done"
    rm -f "$CONSUMER_DATA/unprepare-plug-consumer-done"
    rm -f "$PRODUCER_DATA/unprepare-slot-producer-done"
    snap remove --purge basic-iface-hooks-consumer
    snap remove --purge basic-iface-hooks-producer

execute: |
    remove_markers() {
        rm -f "$CONSUMER_DATA"/*-plug-*done
        rm -f "$PRODUCER_DATA"/*-slot-*done
    }
    check_attributes(){
        # static values should have the values defined in snap's yaml
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["plug-static"]["consumer-attr-1"]' /var/lib/snapd/state.json | MATCH "consumer-value-1"
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["plug-static"]["consumer-attr-2"]' /var/lib/snapd/state.json | MATCH "consumer-value-2"
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["slot-static"]["producer-attr-1"]' /var/lib/snapd/state.json | MATCH "producer-value-1"
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["slot-static"]["producer-attr-2"]' /var/lib/snapd/state.json | MATCH "producer-value-2"
        # dynamic attributes have values created by the hooks, the "-validated" suffix is added by our test interface
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["plug-dynamic"]["before-connect"]' /var/lib/snapd/state.json | MATCH 'plug-changed\(consumer-value\)'
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["slot-dynamic"]["before-connect"]' /var/lib/snapd/state.json | MATCH 'slot-changed\(producer-value\)'
    }

    check_hooks_were_run(){
        # producer/consumer hooks dump marker files, check if they exist to verify hooks were run
        test -f "$CONSUMER_DATA/prepare-plug-consumer-done"
        test -f "$PRODUCER_DATA/prepare-slot-producer-done"
        test -f "$CONSUMER_DATA/connect-plug-consumer-done"
        test -f "$PRODUCER_DATA/connect-slot-producer-done"
    }

    echo "Test that snap connect with plug and slot hooks succeeds"
    snap connect basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer

    echo "Ensure the hooks were actually executed"
    check_hooks_were_run
  
    # stop snapd before inspecting state.json
    systemctl stop snapd.service snapd.socket

    echo "Verify static and dynamic attributes have expected values"
    check_attributes
    systemctl start snapd.service snapd.socket

    remove_markers

    echo "Make sure that disconnect hooks are executed when disconnecting the interface"
    snap disconnect basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer
    snap change --last=disconnect | MATCH "Run hook disconnect-slot-producer of snap \"basic-iface-hooks-producer"
    snap change --last=disconnect | MATCH "Run hook disconnect-plug-consumer of snap \"basic-iface-hooks-consumer"

    test -f "$CONSUMER_DATA/disconnect-plug-consumer-done"
    test -f "$PRODUCER_DATA/disconnect-slot-producer-done"

    remove_markers

    echo "Make connect hooks fail and check that undo hooks were executed"
    snap set basic-iface-hooks-consumer fail=connect
    if snap connect basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer ; then
        echo "Expected snap connect to fail"
        exit 1
    fi

    test -f "$CONSUMER_DATA/unprepare-plug-consumer-done"
    test -f "$PRODUCER_DATA/unprepare-slot-producer-done"
    test -f "$PRODUCER_DATA/connect-slot-producer-done"
    test -f "$PRODUCER_DATA/disconnect-slot-producer-done"

    MATCH "plug-changed.consumer-value" < "$CONSUMER_DATA/unprepare-plug-consumer-done" 

    remove_markers

    echo "Check disconnect hooks are executed on snap removal"
    snap set basic-iface-hooks-consumer fail=none
    snap connect basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer
    snap remove --purge basic-iface-hooks-consumer
    test -f "$PRODUCER_DATA/disconnect-slot-producer-done"
    snap change --last=remove | MATCH "Run hook disconnect-slot-producer of snap \"basic-iface-hooks-producer"
    snap change --last=remove | MATCH "Run hook disconnect-plug-consumer of snap \"basic-iface-hooks-consumer"
