summary: Check that `snap connect` runs interface hook

environment:
    CONSUMER_DATA: /var/snap/basic-iface-hooks-consumer/common
    PRODUCER_DATA: /var/snap/basic-iface-hooks-producer/common

prepare: |
    . "$TESTSLIB/snaps.sh"
    snap install --devmode jq

    echo "Install test hooks snaps"
    install_local basic-iface-hooks-consumer
    install_local basic-iface-hooks-producer

restore: |
    rm -f "$CONSUMER_DATA/prepare-plug-consumer-done"
    rm -f "$PRODUCER_DATA/prepare-slot-producer-done"
    rm -f "$CONSUMER_DATA/connect-plug-consumer-done"
    rm -f "$PRODUCER_DATA/connect-slot-producer-done"
    snap remove basic-iface-hooks-consumer
    snap remove basic-iface-hooks-producer

execute: |
    . "$TESTSLIB/snaps.sh"
    check_attributes(){
        # static values should have the values defined in snap's yaml
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["plug-static"]["consumer-attr-1"]' /var/lib/snapd/state.json | MATCH "consumer-value-1"
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["plug-static"]["consumer-attr-2"]' /var/lib/snapd/state.json | MATCH "consumer-value-2"
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["slot-static"]["producer-attr-1"]' /var/lib/snapd/state.json | MATCH "producer-value-1"
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["slot-static"]["producer-attr-2"]' /var/lib/snapd/state.json | MATCH "producer-value-2"
        # dynamic attributes have values created by the hooks, the "-validated" suffix is added by our test interface
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["plug-dynamic"]["before-connect"]' /var/lib/snapd/state.json | MATCH "plug-changed\(consumer-value\)"
        jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["slot-dynamic"]["before-connect"]' /var/lib/snapd/state.json | MATCH "slot-changed\(producer-value\)"
    }

    check_hooks_were_run(){
        # producer/consumer hooks dump marker files, check if they exist to verify hooks were run
        [ -f "$CONSUMER_DATA/prepare-plug-consumer-done" ]
        [ -f "$PRODUCER_DATA/prepare-slot-producer-done" ]
        [ -f "$CONSUMER_DATA/connect-plug-consumer-done" ]
        [ -f "$PRODUCER_DATA/connect-slot-producer-done" ]
    }

    echo "Test that snap connect with plug and slot hooks succeeds"

    snap connect basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer

    echo "Ensure the hooks were actually executed"
    check_hooks_were_run
  
    # stop snapd before inspecting state.json
    systemctl stop snapd.service snapd.socket

    echo "Verify static and dynamic attributes have expected values"
    check_attributes

    rm -f "$CONSUMER_DATA/prepare-plug-consumer-done" "$PRODUCER_DATA/prepare-slot-producer-done" "$CONSUMER_DATA/connect-plug-consumer-done" "$PRODUCER_DATA/connect-slot-producer-done"

    systemctl start snapd.service snapd.socket
    echo "Verify that hooks are re-run on update and attributes in the state get updated"
    install_local basic-iface-hooks-consumer

    echo "Ensure the hooks were executed again"
    check_hooks_were_run

    # stop snapd before inspecting state.json
    systemctl stop snapd.service snapd.socket

    check_attributes
    jq -r '.data["conns"]["basic-iface-hooks-consumer:consumer basic-iface-hooks-producer:producer"]["plug-dynamic"]["exec-count"]' /var/lib/snapd/state.json | MATCH "2"
    systemctl start snapd.service snapd.socket
