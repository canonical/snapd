summary: Check that changing the experimental.apparmor-prompting flag causes snapd to restart

details: |
    This test checks that snapd is restarted when the experimental.apparmor-prompting
    flag is changed, and that snapd is not restarted when the flag is set to
    the same value repeatedly. Restarting snapd when the flag changes is
    necessary so that apparmor kernel and parser features are re-probed, in
    case support for prompting has changed since snapd last started.

systems:
  - ubuntu-16.04-*
  - ubuntu-18.04-*
  - ubuntu-2*
  - ubuntu-core-*

prepare: |
    if ! command -v curl; then
        snap install --devmode --edge test-snapd-curl
        snap alias test-snapd-curl.curl curl
    fi

debug: |
    # Report system-info
    curl -sS --unix-socket /run/snapd.socket http://localhost/v2/system-info | jq

execute: |
    . /etc/os-release

    # Necessary since we restart snapd many times
    restart_snapd() {
        systemctl stop snapd.service snapd.socket
        systemctl reset-failed snapd.service snapd.socket
        systemctl start snapd.service
        retry --wait 1 -n 100 sh -x -c 'systemctl is-active snapd.service snapd.socket'
    }

    # Check that snapd has restarted and now has a new PID, then set SNAPD_PID to that new PID.
    check_snapd_restarted() {
        #shellcheck disable=SC2016
        retry --wait 1 -n 100 --env SNAPD_PID="$SNAPD_PID" sh -x -c 'NEW_PID="$(systemctl show --property MainPID snapd.service | cut -f2 -d=)"; test ! "$NEW_PID" = "0" && test ! "$NEW_PID" = "$SNAPD_PID" && systemctl is-active snapd.service snapd.socket'
        # Set SNAPD_PID so future checks use most recent PID
        SNAPD_PID="$(systemctl show --property MainPID snapd.service | cut -f2 -d=)"
    }

    check_prompting_setting() {
        # Check that snap CLI reports prompting flag set correctly
        snap get system experimental.apparmor-prompting | MATCH "$1"
        # Check that /v2/snaps/system/conf reports prompting flag set correctly
        curl -sS --unix-socket /run/snapd.socket http://localhost/v2/snaps/system/conf | jq -r '.result.experimental."apparmor-prompting"' | MATCH "$1"
        # Check that /v2/system-info reports prompting correctly
        curl -sS --unix-socket /run/snapd.socket http://localhost/v2/system-info | jq -r '.result.features."apparmor-prompting".enabled' | MATCH "$1"
    }

    echo "Precondition check that snapd is active"
    retry --wait 1 -n 100 sh -x -c 'systemctl is-active snapd.service snapd.socket'
    SNAPD_PID="$(systemctl show --property MainPID snapd.service | cut -f2 -d=)"

    echo "Ensure prompting is initially disabled"
    if snap get system experimental.apparmor-prompting | grep 'true' ; then
        snap set system experimental.apparmor-prompting=false
        check_snapd_restarted
        check_prompting_setting "false"
    fi

    echo "Enable prompting via snap client"
    snap set system experimental.apparmor-prompting=true

    echo "Check that snapd restarted after prompting set to true via snap client"
    check_snapd_restarted
    check_prompting_setting "true"

    echo "Disable prompting via snap client"
    snap set system experimental.apparmor-prompting=false

    echo "Check that snapd restarted after prompting set to false via snap client"
    check_snapd_restarted
    check_prompting_setting "false"

    echo "Enable prompting via API request"
    curl -sS --unix-socket /run/snapd.socket http://localhost/v2/snaps/system/conf -X PUT -d '{"experimental.apparmor-prompting": true}' | jq -r '.status' | MATCH "Accepted"

    echo "Check that snapd restarted after prompting set to true via curl"
    check_snapd_restarted
    check_prompting_setting "true"

    echo "Disable prompting via API request"
    curl -sS --unix-socket /run/snapd.socket http://localhost/v2/snaps/system/conf -X PUT -d '{"experimental.apparmor-prompting": false}' | jq -r '.status' | MATCH "Accepted"

    echo "Check that snapd restarted after prompting set to false via curl"
    check_snapd_restarted
    check_prompting_setting "false"

    # Check that setting the same value multiple times does not restart snapd
    for value in true false; do
        # Reset failed count
        restart_snapd
        check_snapd_restarted

        echo "Initially set value, which will trigger a restart"
        snap set system experimental.apparmor-prompting="$value"
        check_snapd_restarted
        check_prompting_setting "$value"

        echo "Set same value again, which should not trigger a restart"
        snap set system experimental.apparmor-prompting="$value"
        # snap changes blocks until the change is done, or errors if snapd is restarting
        snap changes
        systemctl is-active snapd.service snapd.socket
        echo "Check that snapd has not restarted"
        test "$SNAPD_PID" = "$(systemctl show --property MainPID snapd.service | cut -f2 -d=)"
        check_prompting_setting "$value"

        echo "Set same value again, which should not trigger a restart"
        snap set system experimental.apparmor-prompting="$value"
        # snap changes blocks until the change is done, or errors if snapd is restarting
        snap changes
        systemctl is-active snapd.service snapd.socket
        echo "Check that snapd has not restarted"
        test "$SNAPD_PID" = "$(systemctl show --property MainPID snapd.service | cut -f2 -d=)"
        check_prompting_setting "$value"
    done

    # Reset failed count, in case test is repeated multiple times
    restart_snapd
