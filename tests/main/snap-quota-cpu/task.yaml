summary: Functional test for cpu quota-related snap commands.

details: |
  Functional test for snap cpu quota group commands ensuring that they are 
  effective in practice.

# these systems do not support quota groups due to their old systemd versions,
# and this is tested in the snap-quota spread test.
systems:
  - -ubuntu-14.04-*
  - -centos-7-*
  - -amazon-linux-2-*
  - -ubuntu-16.04-*
  - -ubuntu-core-16-*

prepare: |
  snap install test-snapd-stressd --edge --devmode
  tests.cleanup defer snap remove --purge test-snapd-stressd

restore: |
  echo "Stopping the service"
  snap stop test-snapd-stressd.stress-sc

execute: |
  echo "Starting service and verifying cpu usage"
  snap start test-snapd-stressd.stress-sc

  # helper function that has retry logic to allow for cpu usage to stabilize
  function ensure_cpu_usage_higher_than() {
    local service_name="$1"
    local expected_usage="$(($2*100))"
    local n
    
    n=0
    until [ "$n" -ge 5 ]
    do
      # We use 'top' here to get the current CPU usage as top sorts by CPU usage, 
      # so we assume that 'stress' is going to lie in the top as the odds of another
      # process being in the top is close to 0.
      usage=$(top -w256 -b -n 2 -d 0.2 | head | grep "$service_name" | awk '{print $9*100}')
      if [ "$usage" -gt "$expected_usage" ]; then
        return 0
      fi
      n=$((n+1))
      sleep 1
    done

    echo "Expected cpu usage to be minimum $expected_usage%, got $usage%"
    exit 1
  }
  
  echo "Verifying cpu usage, expecting at least above 60% as we test against 50%"
  ensure_cpu_usage_higher_than "stress" 60

  echo "Create a group with a snap in it"
  snap set-quota group-one --cpu=2x25% test-snapd-stressd

  echo "The systemd slice should be active now"
  sliceName="snap.$(systemd-escape --path group-one).slice"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=active"

  echo "The service should also still be active"
  snap services test-snapd-stressd.stress-sc | MATCH "test-snapd-stressd.stress-sc\s+disabled\s+active"

  # systemd/kernel have three different locations for the cgroup pids depending
  # on version
  echo "The systemd slice should have two processes (all from stress snap) in it now"
  cgroupsV1OldSystemdProcsFile="/sys/fs/cgroup/cpuacct/$sliceName/snap.test-snapd-stressd.stress-sc.service/cgroup.procs"
  cgroupsV1ProcsFile="/sys/fs/cgroup/cpuacct/$sliceName/cgroup.procs"
  cgroupsV2ProcsFile="/sys/fs/cgroup/$sliceName/snap.test-snapd-stressd.stress-sc.service/cgroup.procs"
  if [ -e "$cgroupsV2ProcsFile" ]; then
      cgroupProcsFile="$cgroupsV2ProcsFile"
  elif [ -e "$cgroupsV1OldSystemdProcsFile" ]; then
      cgroupProcsFile="$cgroupsV1OldSystemdProcsFile"
  elif [ -e "$cgroupsV1ProcsFile" ]; then
      cgroupProcsFile="$cgroupsV1ProcsFile"
  else
      echo "cannot detect cgroup procs file"
      exit 1
  fi

  #shellcheck disable=SC2016
  retry --wait 1 -n 100 --env cgroupProcsFile="$cgroupProcsFile" sh -x -c 'test "$(wc -l < $cgroupProcsFile)" = 2'
  SERVER_PID=$(cat "$cgroupProcsFile")

  echo "And that process is the main PID for the stress daemon"
  systemctl show --property=MainPID snap.test-snapd-stressd.stress-sc.service | MATCH "MainPID=$SERVER_PID"

  echo "And the service is in the Control Group for the slice"
  # using a regexp for the ControlGroup match here as on older systemd (16.04)
  # the group is double escaped
  systemctl show --property=ControlGroup snap.test-snapd-stressd.stress-sc.service | MATCH 'ControlGroup=/snap.group(.*)one.slice/snap.test-snapd-stressd.stress-sc.service'

  # helper function that has retry logic to allow for cpu usage to stabilize
  function ensure_cpu_usage_lower_than() {
    local service_name="$1"
    local expected_usage="$(($2*100))"
    local n

    n=0
    until [ "$n" -ge 5 ]
    do
      # We use 'top' here to get the current CPU usage as top sorts by CPU usage, 
      # so we assume that 'stress' is going to lie in the top as the odds of another
      # process being in the top is close to 0.
      usage=$(top -w256 -b -n 2 -d 0.2 | head | grep "$service_name" | awk '{print $9*100}')
      if [ "$usage" -lt "$expected_usage" ]; then
        return 0
      fi
      n=$((n+1))
      sleep 1
    done

    echo "Expected cpu usage to be maximum $expected_usage%, got $usage%"
    exit 1
  }

  echo "Verifying quota cpu usage, expecting around 50% usage"
  # allow for up to 10% difference, this is necessary due to how we measure
  ensure_cpu_usage_lower_than "stress" 60

  echo "Update the quota to a lower percentage while running"
  snap set-quota group-one --cpu=1x20%

  echo "Verifying quota cpu usage, expecting around 20% usage"
  # allow for up to 10% difference, this is necessary due to how we measure
  ensure_cpu_usage_lower_than "stress" 30

  echo "Removing the quota will stop the slice and the service will be restarted"
  snap remove-quota group-one
  systemctl show --property=MainPID snap.test-snapd-stressd.stress-sc.service | NOMATCH "MainPID=$SERVER_PID"
  snap services test-snapd-stressd.stress-sc | MATCH "test-snapd-stressd.stress-sc\s+disabled\s+active"

  echo "And the service is not in a slice anymore"
  systemctl show --property=ControlGroup snap.test-snapd-stressd.stress-sc.service | NOMATCH "/$sliceName/snap.test-snapd-stressd.stress-sc.service"

  echo "And the slice is not active anymore"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=inactive"

  echo "Verifying cpu usage, expecting at least above 60% again"
  ensure_cpu_usage_higher_than "stress" 60
