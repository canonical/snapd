summary: Ensure that commands run when their core provided interfaces are connected

details: |
    Install a test snap that plugs as many core provided interfaces as is 
    possible and verify the command can run (ie, don't test the interface 
    functionality itself). This will help catch things like AppArmor 
    policy syntax errors, seccomp policy parsing, udev querying bugs, etc.

# memory issue inside the adt environment
backends: [-autopkgtest]

# Ideally we would run this everywhere, but on systems with full security
# support, it takes a while, which leads to travis timeouts. Limit to:
# - Ubuntu Core
# - Ubuntu classic
# - All Ubuntu autopkgtests
# - Debian sid amd64 VM
# - TODO: All Fedora systems (for classic-only; unrelated error elsewhere)
systems:
    - ubuntu-*
    - debian-*

# Start early as it takes a long time.
priority: 100

environment:
    CONSUMER_SNAP: test-snapd-policy-app-consumer

prepare: |
    echo "Given a snap is installed"
    "$TESTSTOOLS"/snaps-state install-local "$CONSUMER_SNAP"

    # If possible, prepare a session for the test user. On many systems this
    # will allow running all tests as the unprivileged user. This shields us
    # from accidentally triggering any additional processes from run in the
    # session of the root user and stay behind after this test terminates.
    if tests.session has-session-systemd-and-dbus; then
        tests.session -u test prepare
    fi

restore: |
    # Remove the snaps to avoid timeout in next test
    snap remove --purge "$CONSUMER_SNAP"
    if tests.session has-session-systemd-and-dbus; then
        tests.session -u test restore
    fi

debug: |
    # get the full journal to see any out-of-memory errors
    # shellcheck disable=SC2119
    "$TESTSTOOLS"/journal-state get-log

execute: |
    echo "For each core-provided slot"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    for plugcmd in "$SNAP_MOUNT_DIR"/bin/"$CONSUMER_SNAP".* ; do

        # Just connect 30% of the interfaces on debian 10
        # Debian 10 has bad performance disconnecting interfaces
        # and the test fails (kill-timeout) trying either to remove
        # interfaces or removing the snap
        if os.query is-debian-10 && [ "$((RANDOM % 3))" != 0 ]; then
            echo "skipping plug: $plugcmd"
            continue
        fi

        plugcmd_bn=$(basename "$plugcmd")
        plug_iface=$(echo "$plugcmd_bn" | tr '.' ':')
        #shellcheck disable=SC2001
        slot_iface=$(echo "$plug_iface" | sed "s/$CONSUMER_SNAP//")

        # we test browser-support two different ways, so account for that
        if [ "$plug_iface" = "$CONSUMER_SNAP:browser-sandbox" ]; then
            slot_iface=":browser-support"
        fi

        CONNECTED_PATTERN="$slot_iface +.*$CONSUMER_SNAP"
        DISCONNECTED_PATTERN="$slot_iface +-"

        # Skip any interfaces that core doesn't ship
        if ! snap interfaces | grep -E -q "$slot_iface +"; then
            echo "$slot_iface not present, skipping"
            continue
        fi

        if [ "$plug_iface" = "$CONSUMER_SNAP:qualcomm-ipc-router" ] && ( os.query is-trusty || os.query is-xenial || os.query is-core16) ; then
            # the qualcomm-ipc-router interface is known not to work on xenial,
            # just check that it cannot be connected and move on
            snap connect "$plug_iface" "$slot_iface" 2>&1 | MATCH "cannot connect plug on system without qipcrtr socket support"
            continue
        fi

        if [ "$plug_iface" = "$CONSUMER_SNAP:mount-control" ] && os.query is-trusty ; then
            # systemd version is too old, skipping
            snap connect "$plug_iface" "$slot_iface" 2>&1 | MATCH "systemd version 204 is too old \\(expected at least 209\\)"
            continue
        fi

        # The netlink-audit interface adds the `audit_read` capability to the
        # AppArmor profile, but that's not supported on some older systems
        if [ "$plug_iface" = "$CONSUMER_SNAP:netlink-audit" ] && os.query is-trusty; then
            snap connect "$plug_iface" "$slot_iface" 2>&1 | MATCH "cannot connect plug on system without audit_read support"
            continue
        fi

        echo "When slot $slot_iface is connected"
        if snap interfaces | grep -E -q "$DISCONNECTED_PATTERN"; then
            if [ "$slot_iface" = ":broadcom-asic-control" ] || [ "$slot_iface" = ":firewall-control" ] || [ "$slot_iface" = ":kubernetes-support" ] || [ "$slot_iface" = ":microstack-support" ] || [ "$slot_iface" = ":openvswitch-support" ] || [ "$slot_iface" = ":ppp" ]; then
                # TODO: when the kmod backend no longer fails on missing
                # modules, we can remove this
                snap connect "$plug_iface" "$slot_iface" || true
            else
                snap connect "$plug_iface" "$slot_iface"
            fi
        fi
        snap interfaces | MATCH "$CONNECTED_PATTERN"

        echo "Then $plugcmd should succeed"
        if tests.session has-session-systemd-and-dbus; then
            tests.session -u test exec "$plugcmd" | MATCH PASS
        else
            # If we cannot run the plug command as the test user, in the
            # relative safety of the user session which gets torn down, then
            # run the test directly EXCEPT when testing the desktop interface.
            #
            # The desktop interface causes, at minimum, XDG document portal to
            # activate in the root users's session, which is not cleaned up.
            # Since that interface will only be used in a real session, leaving
            # it out is acceptable.
            if [ "$plugcmd" != "${CONSUMER_SNAP}.desktop" ]; then
                "$plugcmd" | MATCH PASS
            else
                echo "skipping $plugcmd on an unsupported system"
            fi
        fi

        echo "Finally disconnect the interface"
        if snap interfaces | grep -E -q "$CONNECTED_PATTERN"; then
            if [ "$plug_iface" = "$CONSUMER_SNAP:browser-sandbox" ]; then
                snap disconnect "$CONSUMER_SNAP:browser-support" "$slot_iface"
            else
                snap disconnect "$plug_iface" "$slot_iface"
            fi
        fi
    done
