summary: The file-access command provides information about access to file paths

details: |
    The "snap routine file-access" command is intended to be a helper for
    xdg-document-portal.  When xdg-document-portal is asked to make a
    file available to a snap, we would like to avoid proxying files
    that the snap can access directly.

    The command reports whether a particular file path represents the
    same file in both the host and sandbox mount namespaces, and
    whether it is readable or writable inside the snap sandbox.  When
    used with the SaveFile portal API, it may be asked about file
    paths that don't yet exist.

    False negatives are not considered to be a problem: if file-access
    reports that a path is hidden, then it will just result in the
    document portal proxying a file that it didn't need to.

    The command may also report greater access than unix file
    permissions actually allow.  This is acceptable since there is
    nothing the document portal can do to increase the level of
    access.

prepare: |
    "$TESTSTOOLS"/snaps-state install-local test-snapd-file-access

    # Ensure interfaces are disconnected
    snap disconnect test-snapd-file-access:home
    snap disconnect test-snapd-file-access:removable-media

    case "$SPREAD_SYSTEM" in
        fedora-*|arch-*|centos-*)
            # although classic snaps do not work out of the box on fedora,
            # we still want to verify if the basics do work if the user
            # symlinks /snap to $SNAP_MOUNT_DIR themselves
            SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
            ln -sf "$SNAP_MOUNT_DIR" /snap
            ;;
    esac

restore: |
    case "$SPREAD_SYSTEM" in
        fedora-*|arch-*|centos-*)
            rm -f /snap
            ;;
    esac

execute: |
    access() {
        snap routine file-access test-snapd-file-access "$@"
    }
    # The root directory for strict confined snaps is hidden
    access / | MATCH hidden

    # The snap has access to its $SNAP_DATA and $SNAP_COMMON directories
    access /var/snap/test-snapd-file-access/common | MATCH read-write
    access /var/snap/test-snapd-file-access/current | MATCH read-write
    access /var/snap/test-snapd-file-access/x1 | MATCH read-write
    # It has read-only access to $SNAP_DATA for other revisions
    access /var/snap/test-snapd-file-access/42 | MATCH read-only
    # Access to other snap's data is blocked
    access /var/snap/other-snap/common | MATCH hidden

    # The snap has access to $SNAP_USER_DATA and $SNAP_USER_COMMON
    access "$HOME"/snap/test-snapd-file-access/common | MATCH read-write
    access "$HOME"/snap/test-snapd-file-access/current | MATCH read-write
    access "$HOME"/snap/test-snapd-file-access/x1 | MATCH read-write
    # It has read-only access to $SNAP_USER_DATA for other revisions
    access "$HOME"/snap/test-snapd-file-access/42 | MATCH read-only
    # Access to other snap's data is blocked
    access "$HOME"/snap/other-snap/common | MATCH hidden

    # Access to other user's snap data is blocked
    TEST_HOME=$(getent passwd test | cut -d: -f 6)
    access "$TEST_HOME"/snap/test-snapd-file-access/common | MATCH hidden

    # Without interfaces connected, the snap does not have access to
    # rest of the home directory or removable media
    access "$HOME"/Documents/foo.txt | MATCH hidden
    access /media/volume/foo.txt | MATCH hidden

    # With the home interface connected, the snap can access the home
    # directory (but not data owned by other snaps)
    snap connect test-snapd-file-access:home
    access "$HOME"/Documents/foo.txt | MATCH read-write
    access "$HOME"/snap/other-snap/common | MATCH hidden

    # With the removable-media interface connected, the snap can
    # access removable media
    snap connect test-snapd-file-access:removable-media
    access /media/volume/foo.txt | MATCH read-write

    # File access checks for unknown snaps fail
    not snap routine file-access no-such-snap /

    # Classic confinement snaps run in the host system's mount
    # namespace, so there are no restrictions on it's file access.
    if os.query is-core; then
        exit 0
    fi
    "$TESTSTOOLS"/snaps-state install-local test-snapd-classic-confinement --classic

    snap routine file-access test-snapd-classic-confinement / | MATCH read-write
