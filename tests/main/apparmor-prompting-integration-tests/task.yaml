summary: Check that AppArmor Prompting works end-to-end

details: |
    Test that the AppArmor Prompting subsystems work by simulating common usage
    scenarios. Manually carry out operations which generate prompts and, using
    the prompting-client snap in scripted mode, check that those prompts match
    what is expected, and that the client suffessfully allows the operations.

systems:
  - ubuntu-16.04-*
  - ubuntu-18.04-64
  - ubuntu-2*
  - ubuntu-core-*

environment:
    VARIANT/read_single_allow: read_single_allow
    VARIANT/read_single_deny: read_single_deny
    VARIANT/write_single_allow: write_single_allow
    VARIANT/write_single_deny: write_single_deny
    VARIANT/create_multiple_allow: create_multiple_allow
    VARIANT/create_multiple_deny: create_multiple_deny
    VARIANT/download_file_defaults: download_file_defaults
    VARIANT/download_file_safer: download_file_safer
    VARIANT/download_file_conflict: download_file_conflict
    VARIANT/timespan_allow: timespan_allow
    VARIANT/timespan_deny: timespan_deny
    VARIANT/create_multiple_actioned_by_other_pid_always_allow: create_multiple_actioned_by_other_pid_always_allow
    VARIANT/create_multiple_actioned_by_other_pid_always_deny: create_multiple_actioned_by_other_pid_always_deny
    VARIANT/create_multiple_not_actioned_by_other_pid_single_allow: create_multiple_not_actioned_by_other_pid_single_allow
    VARIANT/create_multiple_not_actioned_by_other_pid_single_deny: create_multiple_not_actioned_by_other_pid_single_deny
    #VARIANT/overwrite_file: overwrite_file

prepare: |
    tests.session prepare -u test
    #shellcheck disable=SC2016
    tests.session -u test exec sh -c 'mkdir -p "$HOME/integration-tests"' # $HOME must be that of test user
    snap install prompting-client

restore: |
    #shellcheck disable=SC2016
    tests.session -u test exec sh -c 'rm -rf "$HOME/integration-tests"' # $HOME must be that of test user
    tests.session restore -u test

debug: |

execute: |
    echo "Enable prompting via snap client where possible"
    # Prompting is unsupported everywhere but the Ubuntu non-core systems with
    # kernels which support apparmor prompting
    if ! os.query is-ubuntu || os.query is-core || ! grep 'prompt' /sys/kernel/security/apparmor/features/policy/permstable32 ; then
        not snap set system experimental.apparmor-prompting=true >& err.out
        if os.query is-core ; then
            MATCH "cannot enable prompting feature as it is not supported on Ubuntu Core systems" < err.out
        else
            MATCH "cannot enable prompting feature as it is not supported by the system" < err.out
        fi

        # even if unsupported setting it to false should succeed
        snap set system experimental.apparmor-prompting=false
        exit 0
    fi

    echo "Enable AppArmor prompting experimental feature"
    snap set system experimental.apparmor-prompting=true

    # Wait for snapd to begin restart
    sleep 1

    echo "Wait until prompting is active"
    retry --wait 1 -n 60 systemctl is-active snapd

    echo "Check that shell script and scripted replies exist for $VARIANT"
    test -f "$VARIANT.sh"
    test -f "$VARIANT.json"

    # Create unique tmpdir and copy the script to it.
    # The tmpdir must be in the test user's home directory.
    #shellcheck disable=SC2016
    TEST_DIR="$(tests.session -u test exec sh -c 'mktemp --directory --tmpdir="$HOME/integration-tests"')"
    cp "$VARIANT.sh" "${TEST_DIR}/${VARIANT}.sh"
    chown test "${TEST_DIR}/${VARIANT}.sh"
    cp "$VARIANT.json" "${TEST_DIR}/script.json"
    chown test "${TEST_DIR}/script.json"

    # Test scripts can rely on the scripted client writing their result to
    # "${TEST_DIR}/result". Those results will be "success" if the scripted
    # client exits without error, or an error message if it encounters an
    # unexpected prompt or an error from snapd.

    echo "Run the prompting client in scripted mode in the background as the test user"
    tests.session -u test exec prompting-client.scripted \
        --script="${TEST_DIR}/script.json" \
        --grace-period=1 \
        --var="BASE_PATH:${TEST_DIR}" | tee "${TEST_DIR}/result" &

    timeout 5 sh -xc 'while ! pgrep -f "prompting-client-scripted" > /dev/null; do sleep 0.1; done'
    sleep 1 # wait for scripted client to start listening, otherwise it may miss the first prompt

    echo "Run the test script as the test user"
    tests.session -u test exec sh -x "${TEST_DIR}/${VARIANT}.sh" "$TEST_DIR"
