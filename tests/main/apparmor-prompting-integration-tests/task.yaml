summary: Check that AppArmor Prompting works end-to-end

details: |
    Test that the AppArmor Prompting subsystems work by simulating common usage
    scenarios. Manually carry out operations which generate prompts and, using
    the prompting-client snap in scripted mode, check that those prompts match
    what is expected, and that the client carries out the operations as intended.

    Details about the operation of the prompting client in scripted mode:
    https://github.com/canonical/prompting-client/blob/main/docs/running-the-scripted-client.md


systems:
  - ubuntu-2*

environment:
    VARIANT/read_single_allow: read_single_allow
    VARIANT/read_single_deny: read_single_deny
    VARIANT/write_single_allow: write_single_allow
    VARIANT/write_single_deny: write_single_deny
    VARIANT/create_multiple_allow: create_multiple_allow
    VARIANT/create_multiple_deny: create_multiple_deny
    VARIANT/download_file_defaults: download_file_defaults
    VARIANT/download_file_safer: download_file_safer
    VARIANT/download_file_conflict: download_file_conflict
    VARIANT/timespan_allow: timespan_allow
    VARIANT/timespan_deny: timespan_deny
    VARIANT/create_multiple_actioned_by_other_pid_always_allow: create_multiple_actioned_by_other_pid_always_allow
    VARIANT/create_multiple_actioned_by_other_pid_always_deny: create_multiple_actioned_by_other_pid_always_deny
    VARIANT/create_multiple_not_actioned_by_other_pid_single_allow: create_multiple_not_actioned_by_other_pid_single_allow
    VARIANT/create_multiple_not_actioned_by_other_pid_single_deny: create_multiple_not_actioned_by_other_pid_single_deny
    VARIANT/write_read_multiple_actioned_by_other_pid_allow_deny: write_read_multiple_actioned_by_other_pid_allow_deny
    VARIANT/write_read_multiple_actioned_by_other_pid_deny_allow: write_read_multiple_actioned_by_other_pid_deny_allow

    TIMEOUT: "30" # Define common timeout which can be modified as needed

    # we unfortunately (frequently) run out of memory while setting up prompting-client
    SNAPD_NO_MEMORY_LIMIT: 1

prepare: |
    if os.query is-ubuntu 20.04; then
        tests.exec skip-test "Ubuntu 20.04 kernels doesn't support prompting" && exit 0
    fi
    if not tests.info is-reexec-in-use && os.query is-ubuntu 22.04; then
        tests.exec skip-test "Ubuntu 22.04 AppArmor parser doesn't support prompting" && exit 0
    fi

    tests.session prepare -u test
    tests.session -u test exec sh -c 'mkdir -p "/home/test/integration-tests"'
    snap install prompting-client

restore: |
    tests.exec is-skipped && exit 0

    snap set system experimental.apparmor-prompting=false
    tests.session -u test exec sh -c 'rm -rf "/home/test/integration-tests"'
    tests.session restore -u test

debug: |
    tests.exec is-skipped && exit 0

    TEST_UID="$(id -u test)"
    echo "outstanding prompts:"
    snap debug api "/v2/interfaces/requests/prompts?user-id=$TEST_UID" || true
    echo "rules:"
    snap debug api "/v2/interfaces/requests/rules?user-id=$TEST_UID" || true

execute: |
    # Just to make sure the previous check didn't exit
    tests.exec is-skipped && exit 0

    echo "Precondition check that snapd is active"
    systemctl is-active snapd.service snapd.socket

    SNAPD_PID="$(systemctl show --property MainPID snapd.service | cut -f2 -d=)"

    echo "Enable AppArmor prompting experimental feature"
    snap set system experimental.apparmor-prompting=true

    echo "Wait for snapd to begin restart"
    #shellcheck disable=SC2016
    retry --wait 1 -n 300 sh -c 'test '"$SNAPD_PID"' != $(systemctl show --property MainPID snapd.service | cut -f2 -d=)'

    echo "Wait until snapd is active"
    retry --wait 1 -n 300 systemctl is-active snapd

    echo "Check that shell script and scripted replies exist for $VARIANT"
    test -f "$VARIANT.sh"
    test -f "$VARIANT.json"

    # Create unique tmpdir and copy the script to it.
    TEST_DIR="$(tests.session -u test exec sh -c 'mktemp --directory --tmpdir="/home/test/integration-tests"')"
    cp "${VARIANT}.sh" "${TEST_DIR}/${VARIANT}.sh"
    chown test "${TEST_DIR}/${VARIANT}.sh"
    cp "${VARIANT}.json" "${TEST_DIR}/script.json"
    chown test "${TEST_DIR}/script.json"

    echo "Run the prompting client in scripted mode in the background as the test user"
    # Grace period does not need to be as long as the timeout, and longer grace
    # periods slow down every variant of every test run
    tests.session -u test exec prompting-client.scripted \
        --script="${TEST_DIR}/script.json" \
        --grace-period=5 \
        --var="BASE_PATH:${TEST_DIR}" | tee "${TEST_DIR}/result" &

    # Test scripts can rely on the scripted client writing their result to
    # "${TEST_DIR}/result". Those results will be "success" if the scripted
    # client exits without error, or an error message if it encounters an
    # unexpected prompt or an error from snapd.

    echo "Wait for the scripted client to start"
    if ! retry --wait 1 -n "$TIMEOUT" pgrep -af "^/snap/.*/prompting-client-scripted.*${TEST_DIR}" ; then
        pgrep -af 'prompting-client' || true
        pkill -f 'prompting-client' || true
        exit 1
    fi
    SCRIPTED_PID="$(pgrep -f "^/snap/.*/prompting-client-scripted.*${TEST_DIR}")"
    echo "Wait for the scripted client to open a unix socket for streaming"
    if ! retry --wait 1 -n "$TIMEOUT" lsof -a -U -p "$SCRIPTED_PID" ; then
        pkill -f "prompting-client-scripted.*${TEST_DIR}" || true
        exit 1
    fi

    echo "Run the test script as the test user"
    if ! tests.session -u test exec sh -x "${TEST_DIR}/${VARIANT}.sh" "$TEST_DIR" "$TIMEOUT"; then
        # Test script exited early with error, so the prompting client may still
        # be running, waiting for further requests, so it should be killed.
        pkill -f "prompting-client-scripted.*${TEST_DIR}"
        exit 1
    fi
