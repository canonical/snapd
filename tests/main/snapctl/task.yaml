summary: Check that `snapctl` can be run from within hooks

systems: [-ubuntu-core-16-64]

prepare: |
    snapbuild $TESTSLIB/snaps/snapctl-hooks .
    snap install --dangerous snapctl-hooks_1.0_all.snap

restore: |
    rm snapctl-hooks_1.0_all.snap

    # Unmount the modified core snap, and put the old one back in place
    systemctl stop snapd.service
    core="$(realpath /snap/ubuntu-core/current)"
    snap="$(mount | grep "$core" | awk '{print $1}')"
    umount "$core"
    mv "${snap}.orig" "$snap"
    mount "$snap" "$core"
    systemctl start snapd.service

execute: |
    echo "Run the hook that calls snapctl"

    # This context is enough to hit the API, but the hook will fail since this
    # context is obviously invalid. That failure still means we're correctly
    # hitting the API, though, which is all we care about here.
    export SNAP_CONTEXT="foo"
    if output="$(snap run --hook=apply-config snapctl-hooks 2>&1 >/dev/null)"; then
        echo "Expected the hook to fail"
        exit 1
    fi

    if [[ ! "$output" =~ .*"no context for ID: \"foo\"".* ]]; then
        echo "Expected failure to be due to missing context, but it was \"$output\""
        exit 1
    fi

    echo "Verify that the snapd API is only available via the snapd socket"

    if ! curl -s --unix-socket /run/snapd.socket http:/v2/snaps | grep status-code\":\s*200; then
        echo "Expected snapd API to be available on the snapd socket"
        exit 1
    fi

    if ! curl -s --unix-socket /run/snapd-snap.socket http:/v2/snaps | grep status-code\":\s*401; then
        echo "Expected snapd API to be unauthorized on the snap socket"
        exit 1
    fi
