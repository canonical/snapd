summary: Check that `snapctl` can be run from within hooks

prepare: |
    snap pack "$TESTSLIB"/snaps/snapctl-hooks
    snap install --dangerous snapctl-hooks_1.0_all.snap
    # ensure curl is available (needed for e.g. core18)
    if ! command -v curl; then
        snap install --devmode --edge test-snapd-curl
        snap alias test-snapd-curl.curl curl
    fi

restore: |
    if snap list test-snapd-curl; then
        snap remove --purge test-snapd-curl
    fi

execute: |
    echo "Verify that snapctl -h runs without a context"
    if ! snapctl -h; then
        echo "Expected snapctl -h to be successful"
        exit 1
    fi

    echo "Verify that snapctl -h and --help run for regular users"
    for arg in "-h" "--help"; do
        if ! su -c "snapctl $arg" test ; then
            echo "Expected snapctl -h to be successful for regular user"
            exit 1
        fi
    done
    echo "Verify that snapctl set -h run for regular user"
    if ! su -c "snapctl get -h" test ; then
            echo "Expected snapctl get -h to be successful for test user"
            exit 1
    fi

    echo "Verify that snapctl set is forbidden for regular user"
    su -c "snapctl set snapctl-hooks foo=bar" test 2>&1 | MATCH "cannot use \"set\" with uid .*, try with sudo"

    echo "Verify that snapctl fails with correct error message using flag if regular user"
    su -c "snapctl start --enable" test 2>&1 | MATCH "cannot use \"start\" with uid [0-9]+, try with sudo"
 
    echo "Verify that the snapd API is only available via the snapd socket"
    if ! printf 'GET /v2/snaps HTTP/1.0\r\n\r\n' | nc -U -w 1 /run/snapd.socket | grep '200 OK'; then
        echo "Expected snapd API to be available on the snapd socket"
        echo "Got: $(curl -s --unix-socket /run/snapd.socket http:/v2/snaps)"
        exit 1
    fi

    if ! printf 'GET /v2/snaps HTTP/1.0\r\n\r\n' | nc -U -w 1 /run/snapd-snap.socket | grep '403 Forbidden'; then
        echo "Expected snapd API to be forbidden on the snap socket"
        exit 1
    fi
