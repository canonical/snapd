summary: Check that prepare-image --classic works.

backends: [-autopkgtest]

# building images is only supported on classic ubuntu, but ubuntu 14.04 does not have systemd-run to perform the test
systems: [ubuntu-16*, ubuntu-18*, ubuntu-2*]

kill-timeout: 5m

environment:
    ROOT: /tmp/root
    STORE_DIR: $(pwd)/fake-store-blobdir
    STORE_ADDR: localhost:11028
    SEED_DIR: /var/lib/snapd/seed

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    setup_fake_store "$STORE_DIR"

    snap pack "$TESTSLIB/snaps/basic"
    snap pack "$TESTSLIB/snaps/classic-gadget"

    echo Expose the needed assertions through the fakestore
    cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
    cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
    # have snap use the fakestore for assertions (but nothing else)
    export SNAPPY_FORCE_SAS_URL=http://$STORE_ADDR

    echo Running prepare-image
    #shellcheck disable=SC2086
    ARCH="$(dpkg-architecture -qDEB_HOST_ARCH)"
    snap prepare-image --classic --arch "$ARCH" --channel "$CORE_CHANNEL" --snap basic_*.snap  --snap classic-gadget_*.snap "$TESTSLIB"/assertions/developer1-my-classic-w-gadget.model "$ROOT"

    "$TESTSLIB/reset.sh" --keep-stopped
    cp -ar "$ROOT/$SEED_DIR" "$SEED_DIR"

    # start fake device svc
    #shellcheck disable=SC2148
    systemd-run --unit fakedevicesvc fakedevicesvc localhost:11029

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    systemctl stop snapd.service snapd.socket fakedevicesvc

    rm -rf "$SEED_DIR"

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    teardown_fake_store "$STORE_DIR"
    rm -rf "$ROOT"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh

    # kick seeding
    systemctl start snapd.service snapd.socket

    echo "Wait for seeding to be done"
    snap wait system seed.loaded

    echo "We have a model assertion"
    snap model --verbose|MATCH "model:\s* my-classic-w-gadget"

    echo "Wait for device initialisation to be done"
    wait_for_device_initialized_change

    echo "Check we have a serial"
    snap model --serial --assertion|MATCH "authority-id: developer1"
    snap model --serial --assertion|MATCH "brand-id: developer1"
    snap model --serial --assertion|MATCH "model: my-classic-w-gadget"
    snap model --serial --assertion|MATCH "serial: 7777"

    snap list | MATCH "^basic"
    test -f "$SEED_DIR/snaps/basic_"*.snap
    snap list | MATCH "^classic-gadget"
    test -f "$SEED_DIR/snaps/classic-gadget_"*.snap

    # test regression
    if "$TESTSTOOLS"/journal-state get-log -u snapd | MATCH "missing file /snap/classic-gadget/unset/meta/snap.yaml"; then
         echo "snapd is still reading the gadget too early"
         exit 1
    fi
