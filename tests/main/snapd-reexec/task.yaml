summary: Test that snapd reexecs itself into core

systems: [-ubuntu-core-16-64, -ubuntu-core-16-arm-64, -ubuntu-core-16-arm-32]

restore: |
    # extra cleanup in case something in this test went wrong
    rm -f /etc/systemd/system/snapd.service.d/no-reexec.conf
    systemctl stop snapd.service snapd.socket
    if mount|grep "/snap/core/.*/usr/lib/snapd/info"; then
        umount /snap/core/current/usr/lib/snapd/info
    fi
    if mount|grep "/snap/core/.*/usr/lib/snapd/snapd"; then
        umount /snap/core/current/usr/lib/snapd/snapd
    fi
    rm -f /tmp/old-info

debug: |
    ls /etc/systemd/system/snapd.service.d
    cat /etc/systemd/system/snapd.service.d/*

execute: |
    if [ "${SNAP_REEXEC:-}" = "0" ]; then
        echo "skipping test when SNAP_REEXEC is disabled"
        exit 0
    fi

    echo "Ensure we re-exec by default"
    snap list
    journalctl | MATCH "DEBUG: restarting into"

    echo "Ensure that we do not re-exec into older versions"
    systemctl stop snapd.service snapd.socket
    echo "mount something older than our freshly build snapd"
    echo "VERSION=1.0">/tmp/old-info
    mount --bind /tmp/old-info /snap/core/current/usr/lib/snapd/info
    systemctl start snapd.service snapd.socket
    snap list
    journalctl | MATCH "not restarting into.*older than"

    echo "Revert back to normal"
    systemctl stop snapd.service snapd.socket
    umount /snap/core/current/usr/lib/snapd/info

    echo "Ensure SNAP_REEXEC=0 is honored for snapd"
    cat > /etc/systemd/system/snapd.service.d/reexec.conf <<EOF
    [Service]
    Environment=SNAP_REEXEC=0
    EOF
    echo "Breaking snapd, copy to tmp to ensure mtime is newer"
    cat > /tmp/broken-snapd <<EOF
    #!/bin/sh
    echo "from the core snap"
    exit 1
    EOF
    chmod +x /tmp/broken-snapd
    mount --bind /tmp/broken-snapd /snap/core/current/usr/lib/snapd/snapd
    systemctl daemon-reload
    systemctl start snapd.service snapd.socket
    echo "Ensure that snap list works normally"
    echo "(i.e. the snapd from the core image is not run)"
    snap list | MATCH core

    echo "Revert back to normal"
    systemctl stop snapd.service snapd.socket
    umount /snap/core/current/usr/lib/snapd/snapd
    rm -f /etc/systemd/system/snapd.service.d/reexec.conf
    systemctl daemon-reload
    systemctl start snapd.service snapd.socket

    echo "Ensure SNAP_REEXEC=0 is honored for snap"
    mount --bind /tmp/broken-snapd /snap/core/current/usr/bin/snap
    snap list|MATCH "from the core snap"
    SNAP_REEXEC=0 snap list|MATCH "core"
    umount /snap/core/current/usr/bin/snap

    echo "Ensure a core refresh restart snapd"
    . $TESTSLIB/names.sh
    prev_core=$(snap list | awk "/^${core_name} / {print(\$3)}")
    snap install --dangerous /var/lib/snapd/snaps/${core_name}_${prev_core}.snap
    journalctl | MATCH "Requested daemon restart"

    echo "Ensure the right snapd (from the new core) is running"
    now_core=$(snap list | awk "/^${core_name} / {print(\$3)}")
    if [ "$now_core" = "$prev_core" ]; then
        echo "Test broken $now_core and $prev_Core are the same"
        exit 1
    fi
    SNAPD_PATH=$(readlink -f /proc/$(pidof snapd)/exe)
    if [ "$SNAPD_PATH" != "/snap/${core_name}/${now_core}/usr/lib/snapd/snapd" ]; then
        echo "unexpected $SNAPD_PATH for $now_core snap (previous $prev_core)"
        exit 1
    fi
