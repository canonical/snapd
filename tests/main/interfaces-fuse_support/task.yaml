summary: Ensure that the fuse-support interface works.

# no support for fuse on 14.04
systems:
    # no support for fuse on 14.04
    - -ubuntu-14.04-64
    - -ubuntu-14.04-32

details: |
    The fuse-support interface allows a snap to manage FUSE file systems.

    A snap which defines the fuse-support plug must be shown in the interfaces list.
    The plug must be autoconnected on install and, as usual, must be able to be
    reconnected.

    A snap declaring a plug on this interface must be able to create a fuse filesystem
    in a writable zone. The fuse-consumer test snap creates a readable file with a known
    name and content in the mount point given to the command.

environment:
    MOUNT_POINT: /var/snap/test-snapd-fuse-consumer/current/mount_point

prepare: |
    echo "Given a snap declaring a fuse plug is installed"
    snap install test-snapd-fuse-consumer

    echo "And a user writable mount point is created"
    mkdir -p $MOUNT_POINT

restore: |
    # remove the mount point
    mounts=$(nsenter --mount=/run/snapd/ns/test-snapd-fuse-consumer.mnt cat /proc/mounts | \
             grep "$(basename $MOUNT_POINT) fuse" | cut -f2 -d' ')
    for m in $mounts; do
        nsenter --mount=/run/snapd/ns/test-snapd-fuse-consumer.mnt umount "$m"
    done
    rm -rf $MOUNT_POINT fuse.error

execute: |
    echo "The interface is disconnected by default"
    snap interfaces | MATCH "\- +test-snapd-fuse-consumer:fuse-support"

    if [ "$(snap debug confinement)" = strict ] ; then
        echo "Then the snap is not able to create a fuse file system"
        if test-snapd-fuse-consumer.create -f $MOUNT_POINT 2>${PWD}/fuse.error; then
            echo "Expected permission error creating fuse filesystem with disconnected plug"
            exit 1
        fi
        MATCH "Permission denied" < fuse.error
    fi

    echo "When the plug is connected"
    snap connect test-snapd-fuse-consumer:fuse-support

    echo "Then the snap is able to create a fuse filesystem"
    # start fuse consumer in foreground and make it a background job
    test-snapd-fuse-consumer.create -f $MOUNT_POINT &
    createpid=$!
    # cleanup the background job on exit
    trap 'kill $createpid; wait $createpid' EXIT

    # it may take a while for hello file to appear
    for i in $(seq 100); do
        if test -r /proc/${createpid}/root/${MOUNT_POINT}/hello; then
            break
        fi
        sleep .1
    done
    test -r /proc/${createpid}/root/${MOUNT_POINT}/hello
    # prefer cat ... | MATCH so that we can see which PID is used
    cat /proc/${createpid}/root/${MOUNT_POINT}/hello | MATCH "Hello World!"

    # SIGTERM triggers a clean exit
    kill $createpid
    trap - EXIT

    # the create app will try to unmount the fuse filesystem while exiting,
    # it will fail, as seccomp rules are blocking umount2
    echo "The snap exited with an error"
    # SIGSYS - 31 on x86, wait exit status if killed by signal = 128 + <signal-number>
    wait $createpid || test "$?" = "159"

    # verify that the mount_point was not removed from mount namespace of the snap
    mountpath=$(nsenter --mount=/run/snapd/ns/test-snapd-fuse-consumer.mnt cat /proc/mounts | \
                grep "$(basename $MOUNT_POINT) fuse" | cut -f2 -d' ')
    test -n "$mountpath"

