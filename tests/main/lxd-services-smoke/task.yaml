summary: Ensure refreshing lxd snap after service commands works.

details: |
  Execute a set of operations on lxd snap that were known to render it unusable
  due to a combination of three problems: remove hook of lxd snap didn't clean
  its mountpoints properly in namespace of the host, causing error when removing
  snap data; snapd wouldn't ignore errors on snap data removal, triggering undo
  on remove; remove would fail completely on undo, leaving lxd snap in an
  undefined state. With fixed lxd remove hook and snapd fixes related to
  https://bugs.launchpad.net/snapd/+bug/1899614, this test should never fail on
  any of the above.

# ubuntu-18.04-32: i386 is not supported by lxd
systems: [ubuntu-18.04-64, ubuntu-20.04*]

environment:
  # apparmor_parser triggers OOM
  SNAPD_NO_MEMORY_LIMIT: 1

restore: |
  # Remove manually the snap.lxd.workaround.service systemd unit. This unit is needed to
  # avoid systemd wiping lxd cgroups when snapd disables all lxd units during refresh
  # TODO: remove this when lxd removes automatically the service
  if systemctl is-active snap.lxd.workaround.service; then
      systemctl stop snap.lxd.workaround.service
  fi

execute: |
  echo "Installing lxd snap"
  snap install lxd
  snap stop lxd
  snap start lxd

  # This may fail if revision is same as stable
  snap refresh --edge lxd || true

  # Critical operation: depends on correct lxd remove hook that
  # unmounts its mountpoints properly in the namespace of the host.
  # If the hook is not doing the right thing, then remove should still
  # succeed but we will fail with leftovers in /var/snap/lxd/common.
  snap remove lxd --purge

  # We would fail on restore of test suite anyway, but make it more explicit. 
  if test -d /var/snap/lxd/common; then
    echo "lxd snap wasn't fully removed"
    exit 1
  fi
