summary: Check that snap download works

restore: |
    rm -f ~test/*.snap
    rm -f ~test/*.assert

execute: |
    verify_asserts() {
        fn="$1"
        MATCH "type: account-key" < "$fn"
        MATCH "type: snap-declaration" < "$fn"
        MATCH "type: snap-revision" < "$fn"
    }
    echo "Snap download can download snaps"
    snap download test-snapd-control-consumer
    ls test-snapd-control-consumer_*.snap
    verify_asserts test-snapd-control-consumer_*.assert

    echo "Snap will use existing files"
    SNAPD_DEBUG=1 snap download test-snapd-control-consumer 2>&1 | MATCH "not downloading, using existing file"

    echo "Snap download understand --edge"
    snap download --edge test-snapd-tools
    ls test-snapd-tools_*.snap
    verify_asserts test-snapd-tools_*.assert
    rm -v test-snapd-tools*

    echo "Snap download downloads devmode snaps"
    snap download --beta classic
    ls classic_*.snap
    verify_asserts classic_*.assert

    echo "Snap download can download snaps as user"
    su -l -c "SNAPPY_USE_STAGING_STORE=$SNAPPY_USE_STAGING_STORE HTTPS_PROXY=$HTTPS_PROXY snap download test-snapd-tools" test
    ls /home/test/test-snapd-tools_*.snap
    verify_asserts /home/test/test-snapd-tools_*.assert

    echo "Snap download can download snaps from a cohort"
    # this is a valid cohort key created by hand via the store API
    snap download --cohort="MSBlRmU4QlRSNUw1VjlGN3lIZU1BUHhrRXIyTmRVWE10dyAxNTU1NTE0MzA5IDg3ZmUwMjhkZDFjMTQ1MDY5N2QyZjdiMGZkMzgzODk0NjMzMmFhOTZmZmFjZmFlNmU2MGQyOTNjYzE1OTE3NWY=" test-snapd-tools
    ls test-snapd-tools_*.snap
    verify_asserts test-snapd-tools_*.assert
    rm -v test-snapd-tools*

    echo "Can't ask for invalid cohort"
    # this is not a valid cohort key
    not snap download --cohort="what" test-snapd-tools 2>out
    MATCH 'cannot download snap.*: Invalid cohort key' < out

    echo "Snap download can specify basename and target directory"
    snap download --target-directory=foo --basename=bar test-snapd-tools
    ls -l foo/bar.snap
    verify_asserts foo/bar.assert
