summary: Check that snap download works

details: |
    `snap download` is a command to download snaps from the store.
    This test verifies that snaps are downloaded along with correct
    assertions. It verifies some command line options such as
    `--edge`, `--beta`, `--target-directory`, `--basename` and
    `--cohort`.  It makes sure that normal users (non-root) can also
    download snaps.

restore: |
    rm -f ~test/*.snap
    rm -f ~test/*.assert

execute: |
    verify_asserts() {
        fn="$1"
        MATCH "type: account-key" < "$fn"
        MATCH "type: snap-declaration" < "$fn"
        MATCH "type: snap-revision" < "$fn"
    }

    verify_component_asserts() {
        fn="${1}"
        shift
        component_count="$#"

        MATCH "type: account-key" < "$fn"
        MATCH "type: snap-declaration" < "$fn"

        # if we don't download the component, then we will not have a
        # snap-revision assertion, since it isn't a prereq of either assertions
        # that the component needs

        # should be one of these for each component
        grep -c "type: snap-resource-pair" < "${fn}" | MATCH "${component_count}"
        grep -c "type: snap-resource-revision" < "${fn}" | MATCH "${component_count}"

        for component in "$@"; do
            MATCH "resource-name: ${component}" < "${fn}"
        done
    }

    echo "Snap download can download snaps"
    snap download test-snapd-control-consumer
    ls test-snapd-control-consumer_*.snap
    verify_asserts test-snapd-control-consumer_*.assert

    echo "Snap will use existing files"
    SNAPD_DEBUG=1 snap download test-snapd-control-consumer 2>&1 | MATCH "not downloading, using existing file"

    echo "Snap download understand --edge"
    snap download --edge test-snapd-tools
    ls test-snapd-tools_*.snap
    verify_asserts test-snapd-tools_*.assert
    rm -v test-snapd-tools*

    echo "Snap download downloads devmode snaps"
    snap download --beta classic
    ls classic_*.snap
    verify_asserts classic_*.assert

    echo "Snap download can download snaps as user"
    su -l -c "SNAPPY_USE_STAGING_STORE=$SNAPPY_USE_STAGING_STORE HTTPS_PROXY=$HTTPS_PROXY snap download test-snapd-tools" test
    ls /home/test/test-snapd-tools_*.snap
    verify_asserts /home/test/test-snapd-tools_*.assert

    echo "Snap download can download snaps from a cohort"
    # this is a valid cohort key created by hand via the store API
    snap download --cohort="MSBlRmU4QlRSNUw1VjlGN3lIZU1BUHhrRXIyTmRVWE10dyAxNTU1NTE0MzA5IDg3ZmUwMjhkZDFjMTQ1MDY5N2QyZjdiMGZkMzgzODk0NjMzMmFhOTZmZmFjZmFlNmU2MGQyOTNjYzE1OTE3NWY=" test-snapd-tools
    ls test-snapd-tools_*.snap
    verify_asserts test-snapd-tools_*.assert
    rm -v test-snapd-tools*

    echo "Can't ask for invalid cohort"
    # this is not a valid cohort key
    not snap download --cohort="what" test-snapd-tools 2>out
    MATCH 'cannot download snap.*: Invalid cohort key' < out

    echo "Snap download can specify basename and target directory"
    snap download --target-directory=foo --basename=bar test-snapd-tools
    ls -l foo/bar.snap
    verify_asserts foo/bar.assert

    echo "Snap download can download snaps and components"
    snap download test-snap-with-components+one+two
    ls test-snap-with-components_*.snap test-snap-with-components+one_*.comp test-snap-with-components+two_*.comp
    verify_asserts test-snap-with-components_*.assert
    verify_component_asserts test-snap-with-components_*.assert one two
    rm -v test-snap-with-components*

    echo "Snap download can download snaps and components with a specified basename"
    snap download --basename=base test-snap-with-components+one+two
    ls base.snap base+one.comp base+two.comp
    verify_asserts base.assert
    verify_component_asserts base.assert one two
    rm -v base*

    echo "Snap download can download only components"
    snap download --only-components test-snap-with-components+one+two
    ls test-snap-with-components+one_*.comp test-snap-with-components+two_*.comp
    not ls test-snap-with-components_*.snap
    verify_component_asserts test-snap-with-components_*.assert one two
    rm -v test-snap-with-components*

    echo "Snap download can download only components with a specified basename"
    snap download --only-components --basename=base test-snap-with-components+one+two
    ls base+one.comp base+two.comp
    not ls base.snap
    verify_component_asserts base.assert one two
    rm -v base*

    echo "Snap download can download only components with a specific revision of a snap"
    snap download --revision=7 --only-components test-snap-with-components+one+two
    ls test-snap-with-components+one_4.comp  test-snap-with-components+two_4.comp
    verify_component_asserts test-snap-with-components_7.assert one two
    rm -v test-snap-with-components*
