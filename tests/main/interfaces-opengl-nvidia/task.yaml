summary: Ensure that basic opengl works with faked nvidia

systems: [ubuntu-16.04-*, ubuntu-18.04-*, ubuntu-20.04-*]

environment:
    NV_VERSION/stable: "123.456"
    NV_VERSION/experimental: "123.456.02" # because reality

prepare: |
    # mock nvidia driver
    mount -t tmpfs tmp /sys/module
    mkdir -p /sys/module/nvidia
    echo "$NV_VERSION" > /sys/module/nvidia/version

    # mock nvidia icd file
    test ! -d /usr/share/vulkan
    echo "Test vulkan files access"
    mkdir -p /usr/share/vulkan/icd.d
    echo "canary-vulkan" > /usr/share/vulkan/icd.d/nvidia_icd.json

    if ! os.query is-xenial; then
        # mock GLVND EGL vendor file
        echo "Test GLVND EGL vendor files access"
        mkdir -p /usr/share/glvnd/egl_vendor.d
        echo "canary-egl" > /usr/share/glvnd/egl_vendor.d/10_nvidia.json
    fi

    # mock nvidia libraries
    if ! os.query is-xenial; then
        mkdir -p /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/tls
        mkdir -p /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/vdpau
        echo "canary-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libGLX.so.0.0.1
        echo "canary-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libGLX_nvidia.so.0.0.1
        echo "canary-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libnvidia-glcore.so."$NV_VERSION"
        echo "canary-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/tls/libnvidia-tls.so."$NV_VERSION"
        echo "canary-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libnvidia-tls.so."$NV_VERSION"
        echo "canary-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/vdpau/libvdpau_nvidia.so."$NV_VERSION"
        if os.query is-pc-amd64; then
            mkdir -p /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/tls
            mkdir -p /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/vdpau
            echo "canary-32-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libGLX.so.0.0.1
            echo "canary-32-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libGLX_nvidia.so.0.0.1
            echo "canary-32-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libnvidia-glcore.so."$NV_VERSION"
            echo "canary-32-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/tls/libnvidia-tls.so."$NV_VERSION"
            echo "canary-32-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libnvidia-tls.so."$NV_VERSION"
            echo "canary-32-triplet" >> /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/vdpau/libvdpau_nvidia.so."$NV_VERSION"
        fi
    fi
    mkdir -p /usr/lib/nvidia-123/tls
    mkdir -p /usr/lib/nvidia-123/vdpau
    echo "canary-legacy" >> /usr/lib/nvidia-123/libGLX.so.0.0.1
    echo "canary-legacy" >> /usr/lib/nvidia-123/libGLX_nvidia.so.0.0.1
    echo "canary-legacy" >> /usr/lib/nvidia-123/libnvidia-glcore.so."$NV_VERSION"
    echo "canary-legacy" >> /usr/lib/nvidia-123/tls/libnvidia-tls.so."$NV_VERSION"
    echo "canary-legacy" >> /usr/lib/nvidia-123/libnvidia-tls.so."$NV_VERSION"
    echo "canary-legacy" >> /usr/lib/nvidia-123/vdpau/libvdpau_nvidia.so."$NV_VERSION"
    if os.query is-pc-amd64; then
        mkdir -p /usr/lib32/nvidia-123/tls
        mkdir -p /usr/lib32/nvidia-123/vdpau
        echo "canary-32-legacy" >> /usr/lib32/nvidia-123/libGLX.so.0.0.1
        echo "canary-32-legacy" >> /usr/lib32/nvidia-123/libGLX_nvidia.so.0.0.1
        echo "canary-32-legacy" >> /usr/lib32/nvidia-123/libnvidia-glcore.so."$NV_VERSION"
        echo "canary-32-legacy" >> /usr/lib32/nvidia-123/tls/libnvidia-tls.so."$NV_VERSION"
        echo "canary-32-legacy" >> /usr/lib32/nvidia-123/libnvidia-tls.so."$NV_VERSION"
        echo "canary-32-legacy" >> /usr/lib32/nvidia-123/vdpau/libvdpau_nvidia.so."$NV_VERSION"
    fi

restore: |
    umount -t tmpfs /sys/module
    rm -rf /usr/share/vulkan

    if ! os.query is-xenial; then
        rm -rf /usr/share/glvnd/egl_vendor.d/10_nvidia.json
        rm -rf /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/tls
        rm -rf /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/vdpau
        rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libGLX.so.0.0.1
        rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libGLX_nvidia.so.0.0.1
        rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libnvidia-glcore.so."$NV_VERSION"
        rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH)"/libnvidia-tls.so."$NV_VERSION"
        if os.query is-pc-amd64; then
            rm -rf /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/tls
            rm -rf /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/vdpau
            rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libGLX.so.0.0.1
            rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libGLX_nvidia.so.0.0.1
            rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libnvidia-glcore.so."$NV_VERSION"
            rm -f /usr/lib/"$(dpkg-architecture -qDEB_HOST_MULTIARCH -ai386)"/libnvidia-tls.so."$NV_VERSION"
        fi
    fi
    rm -rf /usr/lib/nvidia-123
    rm -rf /usr/lib32/nvidia-123

execute: |
    "$TESTSTOOLS"/snaps-state install-local gl-core16

    echo "When the interface is connected"
    snap connect gl-core16:opengl core:opengl

    echo "App can access nvidia library files"
    expected="canary-triplet"
    if os.query is-xenial; then
        expected="canary-legacy"
    fi
    files="libGLX.so.0.0.1 libGLX_nvidia.so.0.0.1 libnvidia-glcore.so.$NV_VERSION tls/libnvidia-tls.so.$NV_VERSION libnvidia-tls.so.$NV_VERSION vdpau/libvdpau_nvidia.so.$NV_VERSION"
    for f in $files; do
       gl-core16 cat "/var/lib/snapd/lib/gl/$f" | MATCH "$expected"
    done

    if os.query is-pc-amd64; then
        expected32="canary-32-triplet"
        if os.query is-xenial; then
            expected32="canary-32-legacy"
        fi
        for f in $files; do
            gl-core16 cat "/var/lib/snapd/lib/gl32/$f" | MATCH "$expected32"
        done
    fi

    echo "And vulkan ICD file"
    gl-core16 cat /var/lib/snapd/lib/vulkan/icd.d/nvidia_icd.json | MATCH canary-vulkan

    if ! os.query is-xenial; then
        echo "And GLVND EGL vendor file"
        gl-core16 cat /var/lib/snapd/lib/glvnd/egl_vendor.d/10_nvidia.json | MATCH canary-egl
    fi

    # There is no core20 snap on i386, so the following tests will not
    # function there.
    if os.query is-pc-i386; then
        exit 0
    fi

    echo "For host systems using glvnd, the glvnd libraries are not exposed to snaps using newer bases"
    "$TESTSTOOLS"/snaps-state install-local gl-core20
    snap connect gl-core20:opengl core:opengl

    echo "While glvnd frontend libraries are not available, the backend nvidia drivers are"
    if ! os.query is-xenial; then
        not gl-core20 test -f /var/lib/snapd/lib/gl/libGLX.so.0.0.1
        gl-core20 cat /var/lib/snapd/lib/gl/libGLX_nvidia.so.0.0.1 | MATCH canary-triplet
        if os.query is-pc-amd64; then
            not gl-core20 cat /var/lib/snapd/lib/gl32/libGLX.so.0.0.1
            gl-core20 cat /var/lib/snapd/lib/gl32/libGLX_nvidia.so.0.0.1 | MATCH canary-32-triplet
        fi
    fi
