summary: Check that a remove operation is working even if the mount point is busy.

# ubuntu-14.04: systemd-run not supported
systems: [-ubuntu-14.04*]

restore: |
    kill %1 || true
    # sleep was started from a snap by the unmount-blocker unit, normally
    # it should be enough to kill the whole unit, however since that process
    # was started from a snap, it got moved to a separate snap-specific transient
    # scope, thus it is no longer part of the unit's cgroup
    pkill -f "sleep 9999" || true

execute: |
    wait_for_remove_state(){
        local state=$1
        local expected="(?s)$state.*?Remove \"test-snapd-tools\" snap"
        while ! snap changes | grep -Pq "$expected"; do sleep 1; done
    }

    echo "Given a snap is installed"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-tools

    echo "And its mount point is kept busy"
    # we need a marker file, because just using systemd to figure out
    # if the service has started is racy, start just means started,
    # not that the dir is actually blocked yet
    MARKER=/var/snap/test-snapd-tools/current/block-running
    rm -f $MARKER

    systemd-run --unit unmount-blocker test-snapd-tools.block

    tests.systemd wait-for-service -n 30 --state active unmount-blocker
    retry -n 20 --wait 1 sh -c "test -f $MARKER"

    echo "When we try to remove the snap"
    snap remove --purge test-snapd-tools &

    echo "Then the remove retry succeeds"
    wait_for_remove_state Done

    echo "And the snap is removed"
    retry -n 30 --wait 1 sh -c 'snap list | NOMATCH test-snapd-tools'

    # cleanup umount blocker
    systemctl stop unmount-blocker
