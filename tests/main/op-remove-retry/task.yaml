summary: Check that a remove operation is working even if the mount point is busy.

restore: |
    kill %1 || true

execute: |
    wait_for_service(){
        local service_name=$1
        local state=$2
        while ! systemctl show -p ActiveState $service_name | grep -q "ActiveState=$state"; do systemctl status $service_name || true; sleep 1; done
    }
    wait_for_remove_state(){
        local state=$1
        local expected="(?s)$state.*?Remove \"test-snapd-tools\" snap"
        while ! snap changes | grep -Pq "$expected"; do sleep 1; done
    }

    . $TESTSLIB/systemd.sh

    echo "Given a snap is installed"
    . $TESTSLIB/snaps.sh
    install_local test-snapd-tools

    echo "And its mount point is kept busy"
    # we need a marker file, because just using systemd to figure out
    # if the service has started is racy, start just means started,
    # not that the dir is actually blocked yet
    MARKER=/var/snap/test-snapd-tools/current/block-running
    rm -f $MARKER

    systemd_create_and_start_unit unmount-blocker "$(which test-snapd-tools.block)"

    wait_for_service unmount-blocker active
    while [ ! -f $MARKER ]; do sleep 1; done

    echo "When we try to remove the snap"
    snap remove test-snapd-tools &

    echo "Then the remove retry succeeds"
    wait_for_remove_state Done

    echo "And the snap is removed"
    while snap list | grep -q test-snapd-tools; do sleep 1; done

    # cleanup umount blocker
    systemd_stop_and_destroy_unit unmount-blocker

