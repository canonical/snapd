summary: Check that a remove operation is working even if the mount point is busy.

# ubuntu-14.04: systemd-run not supported
systems: [-ubuntu-14.04*]

restore: |
    kill %1 || true

execute: |
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh

    echo "Given a snap is installed"
    snap install test-snapd-tools

    echo "And its mount point is kept busy"
    # we need a marker file, because just using systemd to figure out
    # if the service has started is racy, start just means started,
    # not that the dir is actually blocked yet
    MARKER=/var/snap/test-snapd-tools/current/block-running
    rm -f $MARKER

    systemd-run --unit unmount-blocker test-snapd-tools.block

    wait_for_service unmount-blocker active
    retry -n 20 --wait 1 sh -c "test -f $MARKER"

    echo "When we try to remove the snap"
    snap remove --purge test-snapd-tools &

    echo "Then the remove retry succeeds"
    retry -n 60 --wait 1 sh -c "snap changes | grep -Pq 'Done.*Remove \"test-snapd-tools\" snap'"

    echo "And the snap is removed"
    retry -n 30 --wait 1 sh -c 'snap list | NOMATCH test-snapd-tools'

    # cleanup umount blocker
    systemctl stop unmount-blocker

    # TODO: remove this line once snaps are able to remove the user-session services
    # clean the scope units created
    for scope in $(systemctl list-units --state=running --type=scope --user snap.* | grep "\.scope" | awk '{ print $1}'); do
        systemctl stop --user "$scope"
    done
