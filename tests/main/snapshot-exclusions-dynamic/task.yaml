summary: Check the basic dynamic snapshot data exclusion functionality

systems: [-ubuntu-14.04-*]

environment:
    # tar invoked when creating snapshots triggers OOM
    SNAPD_NO_MEMORY_LIMIT: 1
    USER_DATA_DIR: /root/snap/test-snap
    SYSTEM_DATA_DIR: /var/snap/test-snap

prepare: | 
    "$TESTSTOOLS"/snaps-state install-local test-snap
    snap install --devmode --edge test-snapd-curl
    snap install jq

debug: |
    snap saved || true

execute: |
    # Use the snap, so that the data dirs will be created
    test-snap.sh -c 'true'

    # Drop in canary files that should never be excluded
    echo "system versioned" > "$SYSTEM_DATA_DIR/current/canary.txt"
    echo "system common" > "$SYSTEM_DATA_DIR/common/canary.txt"
    echo "user versioned"  > "$USER_DATA_DIR/current/canary.txt"
    echo "user common" > "$USER_DATA_DIR/common/canary.txt"
    
    # Create files to be statically and dynamically excluded on all four data-locations
    for DIR in "$USER_DATA_DIR"/{current,common} "$SYSTEM_DATA_DIR"/{current,common}
    do
        touch "$DIR/static-exclude.txt"
        touch "$DIR/dynamic-exclude.txt"
    done

    # Create snapshot that will apply static exclusions, and grab the set ID
    SET_ID=$( snap save test-snap | tail -n1 | cut -d\  -f1 )
    echo "$SET_ID" | MATCH "^[0-9]+$"
    
    # Confirm the snapshot for the set ID includes the test-snap
    snap saved --id="$SET_ID" | MATCH "test-snap"
    # and is valid
    snap check-snapshot "$SET_ID"
    # and the snapshot metadata does not include an options entry
    test-snapd-curl.curl -s --unix-socket /run/snapd.socket --max-time 5 http://localhost/v2/snapshots?set="$SET_ID" | NOMATCH '"options":'

    # Create snapshot that will apply dynamic exclusions, and grab the set ID
    #shellcheck disable=SC2016
    RESPONSE=$( test-snapd-curl.curl -s --unix-socket /run/snapd.socket --max-time 5 http://localhost/v2/snaps -X POST -H 'Content-Type: application/json' -d '{"action": "snapshot", "snaps": ["test-snap"], "snapshot-options": {"test-snap":{"exclude":["$SNAP_DATA/dynamic-exclude.txt", "$SNAP_COMMON/dynamic-exclude.txt", "$SNAP_USER_COMMON/dynamic-exclude.txt", "$SNAP_USER_DATA/dynamic-exclude.txt"]}}}' )
    SET_ID=$( echo "$RESPONSE" | jq '.result."set-id"' )
    echo "$SET_ID" | MATCH "^[0-9]+$"
    CHANGE=$( echo "$RESPONSE" | jq ".change" | grep -o "[0-9]*" )

    # Wait for completion of async change
    retry -n 20 sh -c "snap change \"$CHANGE\" | tail -n2 | MATCH \"Done\".*"

    # Confirm the snapshot for the set ID includes the test-snap
    snap saved --id="$SET_ID" | MATCH "test-snap"
    # and is valid
    snap check-snapshot "$SET_ID"
    # and the snapshot metadata includes options
    test-snapd-curl.curl -s --unix-socket /run/snapd.socket --max-time 5 http://localhost/v2/snapshots?set="$SET_ID" | MATCH '"options":'

    # Check that shapshot is exportable
    snap export-snapshot "$SET_ID" "${SET_ID}_export.snapshot"
    test -e "${SET_ID}_export.snapshot"
    # and importable
    snap import-snapshot "${SET_ID}_export.snapshot"
    # and the snapshot metadata includes the expected options entry (dynamic exclusions only)
    cat <<EOF > expected_options_entry
    "\$SNAP_DATA/dynamic-exclude.txt"
    "\$SNAP_COMMON/dynamic-exclude.txt"
    "\$SNAP_USER_COMMON/dynamic-exclude.txt"
    "\$SNAP_USER_DATA/dynamic-exclude.txt"
    EOF
    test-snapd-curl.curl -s --unix-socket /run/snapd.socket --max-time 5 http://localhost/v2/snapshots?set="$SET_ID" | jq .result[0].snapshots[0].options.exclude[] > actual_options_entry
    diff -u expected_options_entry actual_options_entry

    # Remove the canaries to test restore
    for DIR in "$USER_DATA_DIR" "$SYSTEM_DATA_DIR"
    do
        rm "$DIR/"{current,common}/canary.txt
    done
    
    # Check restore
    snap restore "$SET_ID" test-snap
    MATCH "system versioned" < "$SYSTEM_DATA_DIR/current/canary.txt"
    MATCH "system common" < "$SYSTEM_DATA_DIR/common/canary.txt"
    MATCH "user versioned" < "$USER_DATA_DIR/current/canary.txt"
    MATCH "user common" < "$USER_DATA_DIR/common/canary.txt"
    cat <<EOF > expected_restored_files
    $USER_DATA_DIR
    $USER_DATA_DIR/common
    $USER_DATA_DIR/common/canary.txt
    $USER_DATA_DIR/current
    $USER_DATA_DIR/x1
    $USER_DATA_DIR/x1/canary.txt
    $SYSTEM_DATA_DIR
    $SYSTEM_DATA_DIR/common
    $SYSTEM_DATA_DIR/common/canary.txt
    $SYSTEM_DATA_DIR/current
    $SYSTEM_DATA_DIR/x1
    $SYSTEM_DATA_DIR/x1/canary.txt
    EOF
    find "$USER_DATA_DIR" "$SYSTEM_DATA_DIR" | sort | grep -v '\.~\w*~' > actual_restored_files
    diff -u expected_restored_files actual_restored_files
