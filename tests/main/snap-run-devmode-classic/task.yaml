summary: Ensure snap run inside a devmode snap works (for now)

details: |
    This test ensures inside a devmode snap the "snap run" command
    works.

    Because of historic mistakes we allowed this and until we properly
    deprecated it we need to ensure it works. We really do not want to
    support running other snaps from devmode snaps as the use-case for
    devmode is to get help on the way to confined snaps. But snaps can
    not run other snaps so this does not make sense.

systems:
    # run the classic test on xenial so that we can build the snapd snap
    # destructively without needing the lxd snap and thus execute much quicker
    # NOTE: if this test is moved to classic impish or later before the snapd
    # snap moves off of building based on xenial, then building with LXD will
    # not work because xenial containers do not boot/get networking properly
    # when the host has cgroupsv2 in it
    - ubuntu-16.04-*

environment:
    # to build natively on the machine rather than with multipass or lxd
    SNAPCRAFT_BUILD_ENVIRONMENT: host

    # ensure that re-exec is on by default like it should be
    SNAP_REEXEC: "1"

    SNAP_TO_USE_FIRST/snapd_first: snapd
    SNAP_TO_USE_FIRST/core_first: core

    # TODO: we should probably have a smaller / simpler test-snapd-* snap for
    # testing devmode confinement with base: core
    BASE_CORE_DEVMODE_SNAP: godd
    BASE_NON_CORE_DEVMODE_SNAP: test-snapd-tools-core18

    BASE_CORE_STRICT_SNAP: test-snapd-sh
    BASE_NON_CORE_STRICT_SNAP: test-snapd-sh-core18

prepare: |
    # much of what follows is copied from tests/main/snapd-snap

    # install snapcraft snap

    snap install snapcraft --channel=4.x/candidate --classic
    tests.cleanup defer snap remove --purge snapcraft

    # shellcheck disable=SC2164
    pushd "$PROJECT_PATH"
    echo "Build the snap"
    snap run snapcraft snap --output snapd-from-branch.snap
    popd

    mv "$PROJECT_PATH/snapd-from-branch.snap" "$PWD/snapd-from-branch.snap"

    # meh it doesn't work well to use quotas and "&&" in the arguments to sh -c
    # with defer, so just put what we want to run in a script and execute that
    cat >> snapcraft-cleanup.sh <<EOF
    #!/bin/sh
    cd $PROJECT_PATH
    # we may have uninstalled snapcraft in the snapd_first variant, so we need
    # to re-install it in order to clean up
    if ! command -v snapcraft; then 
        snap install snapcraft --channel=4.x/candidate --classic
    fi
    snap run snapcraft clean
    EOF
    chmod +x snapcraft-cleanup.sh
    tests.cleanup defer sh -c "$PWD/snapcraft-cleanup.sh"

    unsquashfs -d snapd-from-branch snapd-from-branch.snap
    snapddir=snapd-from-branch

    # now repack the core snap with this snapd snap
    snap download core --edge --basename=core-from-edge
    unsquashfs -d edge-core-snap core-from-edge.snap
    coredir=edge-core-snap

    # backup the meta dir
    mv "$coredir/meta" "$coredir/meta-backup" 
    # copy everything from the snapd snap into the core snap
    cp -ar "$snapddir"/* "$coredir"

    # restore the meta dir
    rm -r "$coredir/meta"
    mv "$coredir/meta-backup" "$coredir/meta" 

    # set the version for the core snap to be the version from the snapd snap
    SNAPD_SNAP_VERSION=$(grep -Po "version: \K.*" "$snapddir/meta/snap.yaml")
    CORE_SNAP_VERSION=$(grep -Po "version: \K.*" "$coredir/meta/snap.yaml")
    sed -i -e "s/$CORE_SNAP_VERSION/$SNAPD_SNAP_VERSION/" "$coredir/meta/snap.yaml"

    # pack the core snap
    snap pack --filename=core-from-branch.snap "$coredir"

    rm -r "$coredir"
    rm -r "$snapddir"

execute: |
    if [ "$SNAP_TO_USE_FIRST" = "core" ]; then
        # first install our core snap because we don't have the snapd snap on 
        # the system yet, so we don't need to do any shenanigans
        snap install --dangerous core-from-branch.snap

        snap install --devmode --beta "$BASE_CORE_DEVMODE_SNAP"
        snap install "$BASE_CORE_STRICT_SNAP"

        # umask is the command we execute to avoid yet another layer of quoting
        OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | snap run --shell "${BASE_CORE_DEVMODE_SNAP}")
        if [ "$OUTPUT" != "0022" ]; then
            echo "test failed"
            exit 1
        fi

        snap install --dangerous snapd-from-branch.snap

        # trigger profile re-generation because the same build-id for snapd is
        # in the core and snapd snaps we are using, so profiles won't be 
        # regenerated when we install the snapd snap above
        systemctl stop snapd.socket snapd.service
        rm /var/lib/snapd/system-key
        systemctl start snapd.socket snapd.service

        # also install the non-core base snap, note that we can install and use it
        # even without the snapd snap, but we cannot execute other snaps from this 
        # devmode snap without also installing the snapd snap, as inside non-core
        # base snaps, there is a symlink 
        # /usr/bin/snap -> /snap/snapd/current/usr/bin/snap
        # which effectively requires the snapd snap to be installed to execute other
        # snaps from inside the devmode non-core based snap
        snap install --devmode "$BASE_NON_CORE_DEVMODE_SNAP"

        # umask is the command we execute to avoid yet another layer of quoting
        OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | snap run --shell "${BASE_CORE_DEVMODE_SNAP}")
        if [ "$OUTPUT" != "0022" ]; then
            echo "test failed"
            exit 1
        fi

        OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | snap run --shell "${BASE_NON_CORE_DEVMODE_SNAP}.sh")
        if [ "$OUTPUT" != "0022" ]; then
            echo "test failed"
            exit 1
        fi

    elif [ "$SNAP_TO_USE_FIRST" = "snapd" ]; then
        # we already had the core snap installed, so we need to purge things
        # and then install only the snapd snap to test this scenario

        snap remove go snapcraft
        snap remove core18
        apt remove --purge -y snapd
        apt install snapd -y

        snap install --dangerous snapd-from-branch.snap

        # snaps that don't depend on the core snap
        snap install --devmode "$BASE_NON_CORE_DEVMODE_SNAP"
        snap install "$BASE_NON_CORE_STRICT_SNAP"

        # umask is the command we execute to avoid yet another layer of quoting
        OUTPUT=$(echo "snap run ${BASE_NON_CORE_STRICT_SNAP}.sh -c umask" | snap run --shell "${BASE_NON_CORE_DEVMODE_SNAP}.sh" )
        if [ "$OUTPUT" != "0022" ]; then
            echo "test failed"
            exit 1
        fi

        # now install the core snap and run those tests
        echo "install the core snap"
        snap install --dangerous core-from-branch.snap

        # trigger profile re-generation because the same build-id for snapd is
        # in the core and snapd snaps we are using, so profiles won't be 
        # regenerated when we install the snapd snap above
        systemctl stop snapd.socket snapd.service
        rm /var/lib/snapd/system-key
        systemctl start snapd.socket snapd.service

        snap install --devmode --beta "$BASE_CORE_DEVMODE_SNAP"
        snap install "$BASE_CORE_STRICT_SNAP"

        OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | snap run --shell "${BASE_CORE_DEVMODE_SNAP}")
        if [ "$OUTPUT" != "0022" ]; then
            echo "test failed"
            exit 1
        fi

        OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | snap run --shell "${BASE_NON_CORE_DEVMODE_SNAP}.sh")
        if [ "$OUTPUT" != "0022" ]; then
            echo "test failed"
            exit 1
        fi

        # undo the purging
        apt install -y "$PROJECT_PATH/../"snapd_1337.*_amd64.deb
    else
        echo "unknown variant $SNAP_TO_USE_FIRST"
        exit 1
    fi
