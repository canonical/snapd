summary: Functional test for thread/task quota-related snap commands.

details: |
  Functional test for snap thread/task quota group commands ensuring that they are 
  effective in practice.

# these systems do not support quota groups due to their old systemd versions,
# we do have a check to do for these systems, but that is just to ensure that
# we don't allow using quota groups, and that check is done in the snap-quota
# spread instead
systems:
  - -ubuntu-14.04-*
  - -amazon-linux-2-*
  - -ubuntu-16.04-*
  - -ubuntu-core-16-*

prepare: |
  snap install test-snapd-stressd --edge --devmode
  snap install test-snapd-curl --edge --devmode

restore: |
  echo "Stop the service"
  snap stop test-snapd-stressd.spawner

execute: |
  # Spawner spawns 32 workers per default in the snap, but the total
  # count of threads expected is 33 including the main thread.
  SPAWNER_MAX_THREADS=33

  function wait_for_thread_usage() {
    local threadCount=0
    local runs=$1
    local expected=$2

    for _ in $(seq "${runs}"); do
        threadCount="$(snap quota group-one | awk '/current:/,/threads:/{if ($1 ~ "threads:") { print $2 }}')"
        if [ "$threadCount" -eq "$expected" ]; then
            break
        fi
        sleep 1
    done
    echo "$threadCount"
  }

  echo "Create a group with the spawner snap in it"
  snap set-quota group-one --threads=16 test-snapd-stressd

  echo "Starting service"
  # the reason we start the service afterwards is because the task limit
  # wont kill any tasks that exceeds the limit, so we test instead that we
  # can increment the limit. 
  snap start test-snapd-stressd.spawner
  sleep 1

  echo "The systemd slice should be active now"
  sliceName="snap.$(systemd-escape --path group-one).slice"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=active"

  echo "The service should be active"
  snap services test-snapd-stressd.spawner | MATCH "test-snapd-stressd.spawner\s+disabled\s+active"

  # systemd/kernel have three different locations for the cgroup pids depending
  # on version
  echo "The systemd slice should have one process in it now"
  cgroupsV1OldSystemdProcsFile="/sys/fs/cgroup/pids/$sliceName/snap.test-snapd-stressd.spawner.service/cgroup.procs"
  cgroupsV1ProcsFile="/sys/fs/cgroup/pids/$sliceName/cgroup.procs"
  cgroupsV2ProcsFile="/sys/fs/cgroup/$sliceName/snap.test-snapd-stressd.spawner.service/cgroup.procs"
  if [ -e "$cgroupsV2ProcsFile" ]; then
      cgroupProcsFile="$cgroupsV2ProcsFile"
  elif [ -e "$cgroupsV1OldSystemdProcsFile" ]; then
      cgroupProcsFile="$cgroupsV1OldSystemdProcsFile"
  elif [ -e "$cgroupsV1ProcsFile" ]; then
      cgroupProcsFile="$cgroupsV1ProcsFile"
  else
      echo "cannot detect cgroup procs file"
      exit 1
  fi

  #shellcheck disable=SC2016
  retry --wait 1 -n 100 --env cgroupProcsFile="$cgroupProcsFile" sh -x -c 'test "$(wc -l < $cgroupProcsFile)" = 1'
  SERVER_PID=$(cat "$cgroupProcsFile")

  echo "And that process is the main PID for spawner"
  systemctl show --property=MainPID snap.test-snapd-stressd.spawner.service | MATCH "MainPID=$SERVER_PID"

  echo "And the service is in the Control Group for the slice"
  # using a regexp for the ControlGroup match here as on older systemd (16.04)
  # the group is double escaped
  systemctl show --property=ControlGroup snap.test-snapd-stressd.spawner.service | MATCH 'ControlGroup=/snap.group(.*)one.slice/snap.test-snapd-stressd.spawner.service'

  # verify that 'snap quota' is reporting the correct new usage
  echo "Verify the number of threads is correct (=16)"
  threadUsage=$(wait_for_thread_usage 10 16)
  if ! [ "$threadUsage" -eq 16 ]; then
    echo "thread usage reported does not equal the expected quota usage $threadUsage != 16"
    exit 1
  fi

  echo "Increase the thread quota to 24 and restart the service"
  snap set-quota group-one --threads=24

  # sometimes the cgroup change takes a while to kick in, avoid 
  # waiting for the cgroup change to kick in and allow spawn
  # to spawn additional threads
  snap restart test-snapd-stressd.spawner

  # verify that 'snap quota' is reporting the correct new usage
  echo "Verify the number of threads is correct (=24)"
  threadUsage=$(wait_for_thread_usage 10 24)
  if ! [ "$threadUsage" -eq 24 ]; then
    echo "thread usage reported does not equal the expected quota usage $threadUsage != 24"
    exit 1
  fi

  echo "Removing the quota will stop the slice and the service will be restarted"
  snap remove-quota group-one
  systemctl show --property=MainPID snap.test-snapd-stressd.spawner.service | NOMATCH "MainPID=$SERVER_PID"
  snap services test-snapd-stressd.spawner | MATCH "test-snapd-stressd.spawner\s+disabled\s+active"

  echo "And the service is not in a slice anymore"
  systemctl show --property=ControlGroup snap.test-snapd-stressd.spawner.service | NOMATCH "/$sliceName/snap.test-snapd-stressd.spawner.service"

  echo "And the slice is not active anymore"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=inactive"

  echo "Verify the service is now running at full capacity"
  SPAWNER_PID=$(systemctl show snap.test-snapd-stressd.spawner.service --property=ExecMainPID | cut -d = -f 2)
  threadCount=$(ps huH p "$SPAWNER_PID" | wc -l)
  if ! [ "$threadCount" -eq "$SPAWNER_MAX_THREADS" ]; then
    echo "Expected $SPAWNER_MAX_THREADS threads, got $threadCount"
    exit 1
  fi
