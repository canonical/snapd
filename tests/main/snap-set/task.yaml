summary: Check that `snap set` runs configure hook.

prepare: |
    echo "Build basic test package (without hooks)"
    "$TESTSTOOLS"/snaps-state install-local basic

    echo "Build failing hooks package"
    snap pack failing-config-hooks

    echo "Build package with hook to run snapctl set"
    "$TESTSTOOLS"/snaps-state install-local snapctl-hooks

execute: |
    echo "Test that snap set fails without configure hook"
    if snap set basic foo=bar; then
        echo "Expected snap set to fail without a configure hook"
        exit 1
    fi

    echo "Test that snap set fails when configure hook fails"
    if snap set snapctl-hooks command=test-exit-one; then
        echo "Expected snap set to fail when configure hook fails"
        exit 1
    fi

    echo "Test that the set value can be retrieved by the hook"
    if ! snap set snapctl-hooks command=test-snapctl-get-foo foo=bar; then
        echo "Expected hook to be able to retrieve set value"
        exit 1
    fi

    echo "Sanity check before we unset the value with null"
    if ! obtained=$(snap get snapctl-hooks foo); then
        echo "Expected snap get to be able to retrieve set value"
        exit 1
    fi
    [[ "$obtained" == "bar" ]]

    echo "Test that the set value can be null and it removes the option"
    if ! snap set snapctl-hooks command=test-snapctl-foo-null foo=null; then
        echo "Expected hook to be able to retrieve set value"
        exit 1
    fi
    snap get snapctl-hooks foo 2>&1 | MATCH 'snap "snapctl-hooks" has no "foo" configuration option'

    echo "Set foo back"
    snap set snapctl-hooks command=test-snapctl-get-foo foo=bar
    if ! obtained=$(snap get snapctl-hooks foo); then
        echo "Expected snap get to be able to retrieve set value"
        exit 1
    fi
    test "$obtained" = "bar"

    echo "Test that the foo value can be unset"
    snap set snapctl-hooks command=test-snapctl-foo-null foo!
    snap get snapctl-hooks foo 2>&1 | MATCH 'snap "snapctl-hooks" has no "foo" configuration option'

    echo "Test that an invalid key results in an error"
    if obtained=$(snap set snapctl-hooks invalid_key=value 2>&1); then
        echo "Expected usage of an invalid key to result in an error"
        exit 1
    fi
    [[ "$obtained" == *"invalid option name"* ]]

    echo "Install should fail altogether as it has a broken hook"
    if obtained=$(snap install --dangerous failing-config-hooks_1.0_all.snap 2>&1); then
        echo "Expected install of snap with broken configure hook to fail"
        exit 1
    fi
    [[ "$obtained" == *"error from within configure hook"* ]]

    echo "Test that the 'snap set' order is deterministic"
    for _ in $(seq 50); do
        snap set snapctl-hooks command=noop one!
        snap set snapctl-hooks one.two=2 one='{"three":3}'
        snap get snapctl-hooks -l one.two | MATCH "one.two[ ]*2"
        snap get snapctl-hooks -l one.three | MATCH "one.three[ ]*3"
    done
