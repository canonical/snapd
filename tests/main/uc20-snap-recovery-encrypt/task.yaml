summary: Integration tests for the snap-bootstrap binary

# testing on 19.10/20.04 is enough, its a very specialized test
# TODO:UC20: remove 19.10-64 system once ubuntu-20.04-64 becomes available
#            inside spread
systems: [ubuntu-19.10-64, ubuntu-20.04-64]

debug: |
    cat /proc/partitions

restore: |
    if [[ -d ./mnt ]]; then
        umount ./mnt || true
    fi
    umount /dev/mapper/ubuntu-data || true
    umount /dev/mapper/test-udata || true

    cryptsetup close /dev/mapper/ubuntu-data || true
    cryptsetup close /dev/mapper/test-udata || true

    if [ -f loop.txt ]; then
        losetup -d "$(cat loop.txt)"
    fi
    apt remove -y cryptsetup

prepare: |
    echo "Create a fake block device image that looks like an image from u-i"
    truncate --size=10GB fake.img

    apt install -y cryptsetup

    echo "Setup the image as a block device"
    losetup -fP fake.img
    losetup -a |grep fake.img|cut -f1 -d: > loop.txt
    LOOP="$(cat loop.txt)"

    echo "Create a partition that looks like a uc20 image"
    cat <<EOF | sfdisk "$LOOP"
    label: gpt

    start=2048, size=2048, type=21686148-6449-6E6F-744E-656564454649, name="BIOS Boot"
    start=4096, size=2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, name="ubuntu-seed"
    EOF
    udevadm trigger --settle "${LOOP}p2"
    mkfs.vfat "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    echo "Double check that we got the expected partitions"
    sfdisk -l "$LOOP" | MATCH 'BIOS boot'
    sfdisk -l "$LOOP" | MATCH 'EFI System'

    echo "Get the UC20 gadget"
    snap download --channel=20/edge pc
    unsquashfs -d gadget-dir pc_*.snap

execute: |
    LOOP="$(cat loop.txt)"
    echo "Run the snap-bootstrap tool"
    /usr/lib/snapd/snap-bootstrap create-partitions --encrypt  --mount --key-file keyfile ./gadget-dir "$LOOP"

    echo "Check that the key file was created"
    test "$(stat --printf="%s" ./keyfile)" = 32

    echo "Check that the partitions are created"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p1 .*size=\s*2048, type=21686148-6449-6E6F-744E-656564454649,.*BIOS Boot"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p2 .*size=\s*2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B,.*ubuntu-seed"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p3 .*size=\s*1536000, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-boot"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p4 .*size=\s*6291456, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-data"

    not cryptsetup isLuks "${LOOP}p1"
    not cryptsetup isLuks "${LOOP}p2"
    not cryptsetup isLuks "${LOOP}p3"
    cryptsetup isLuks "${LOOP}p4"

    cryptsetup luksDump "${LOOP}p4" | MATCH 'Label:\s*ubuntu-data-enc'

    # we used "lsblk --fs" here but it was unreliable
    df -T "${LOOP}p3" | MATCH ext4
    file -s "${LOOP}p3" | MATCH 'volume name "ubuntu-boot"'

    df -T /dev/mapper/ubuntu-data | MATCH ext4
    POSIXLY_CORRECT=1 file -s /dev/mapper/ubuntu-data | MATCH 'volume name "ubuntu-data"'

    echo "Check that the filesystem content was deployed"
    ls /run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
    ls /run/mnt/ubuntu-boot/EFI/boot/bootx64.efi
    ls /run/mnt/ubuntu-boot/EFI/ubuntu/grub.cfg

    umount /run/mnt/ubuntu-boot
    umount /run/mnt/ubuntu-data
    cryptsetup close /dev/mapper/ubuntu-data

    echo "ensure that we can open the encrypted device using the key"
    mkdir -p ./mnt
    cryptsetup open --key-file keyfile "${LOOP}p4" test-udata
    mount /dev/mapper/test-udata ./mnt
    umount ./mnt
    cryptsetup close /dev/mapper/test-udata
