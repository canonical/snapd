summary: Ensure network interface works.

details: |
    The network interface allows a snap to access the network as a client.

    A snap which defines the network plug must be shown in the interfaces list.
    The plug must be autoconnected on install and, as usual, must be able to be
    reconnected.

    A snap declaring a plug on this interface must be able to access network services.

# amazon: uses nmap-netcat
systems: [-fedora-*, -opensuse-*, -amazon-*, -centos-*]

environment:
    SNAP_NAME: network-consumer
    PORT: 8081
    SERVICE_FILE: "./service.sh"
    SERVICE_NAME: "test-service"

prepare: |
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB/snaps.sh"
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    echo "Given a snap declaring the network plug is installed"
    install_local "$SNAP_NAME"

    echo "And a service is listening"
    # shellcheck source=tests/lib/network.sh
    . "$TESTSLIB"/network.sh
    make_network_service "$SERVICE_NAME" "$SERVICE_FILE" "$PORT"

restore: |
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    #shellcheck disable=SC2153
    systemd_stop_and_destroy_unit "$SERVICE_NAME"
    rm -f "$SERVICE_FILE"

execute: |
    echo "The interface is connected by default"
    snap interfaces -i network | MATCH ":network .*$SNAP_NAME"

    echo "When the plug is disconnected"
    snap disconnect "$SNAP_NAME:network"

    echo "Then the plug can be connected again"
    snap connect "$SNAP_NAME:network"

    echo "Then the snap is able to access a network service"
    network-consumer http://127.0.0.1:"$PORT" | grep -Pqz 'ok\n'

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect "$SNAP_NAME:network"

    echo "Then snap can't access a network service"
    if network-consumer "http://127.0.0.1:$PORT"; then
        echo "Network shouldn't be accessible"
        exit 1
    fi
