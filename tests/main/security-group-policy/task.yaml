summary: Verify local group policy

details: |
    Verify that snap-confine honors local group policies for executing snaps

systems:
    # not relevant for UC
    - -ubuntu-core-*
    # disable systems where there is an outdated native package and the
    # non-reexec variant is broken as the native snap is unable to correctly
    # invoke internal tools
    - -ubuntu-18.04-*
    - -ubuntu-16.04-*
    - -debian-12-*

environment:
    SNAP_REEXEC/no_reexec: 0
    SNAP_REEXEC/with_reexec: 1

prepare: |
    LIBEXEC_DIR="$(os.paths libexec-dir)"
    vers="$("$LIBEXEC_DIR"/snapd/snap-confine --version | cut -f2 -d' ' | sed -e 's/\+.*//')"

    if os.query is-ubuntu && [ "$SPREAD_VARIANT" = "no_reexec" ]; then
        # Ubuntu is the only distribution where snapd comes preinstalled, so
        # unless we are doing SRU validation or installing from a private PPA
        # (as part of the release process) the no-reexec variant would actually
        # try to exercise this feature using the native package, which may be
        # too old to have it in the first place
        if [ "$SRU_VALIDATION" != "1" ] && [ -z "$PPA_SOURCE_LINE" ] && [ -z "$PPA_VALIDATION_NAME" ]; then
            tests.exec skip-test "This test needs a test build of snapd, got native version $vers instead"
        fi
    fi
    tests.exec is-skipped && exit 0

    case "$SPREAD_SYSTEM" in
        fedora-*|arch-*|centos-*)
            # although classic snaps do not work out of the box on fedora,
            # Arch linux and Centos, we still want to verify if the basics
            # do work if the user symlinks /snap to $SNAP_MOUNT_DIR themselves
            SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
            ln -sf "$SNAP_MOUNT_DIR" /snap
            tests.cleanup defer rm -f /snap
            ;;
    esac

    NOMATCH snap-runners /etc/group
    groupadd snap-runners
    tests.cleanup defer groupdel snap-runners

    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh-core24

    find "$LIBEXEC_DIR"/snapd/snap-confine -ls | MATCH 'root +root'
    cp -a "$LIBEXEC_DIR"/snapd/snap-confine{,.backup}
    tests.cleanup defer mv "$LIBEXEC_DIR"/snapd/snap-confine{.backup,}

    chown :snap-runners "$LIBEXEC_DIR"/snapd/snap-confine
    # restore caps, depending on whether the host binary had them
    # note, getcap output varies across versions, but the capabilities are always listed last
    caps="$(getcap "$LIBEXEC_DIR"/snapd/snap-confine.backup | awk '{ print $NF }')"
    echo "caps: $caps"
    if [ -n "$caps" ]; then
        echo "$caps" | setcap - "$LIBEXEC_DIR"/snapd/snap-confine
    fi

    grep snap-runners /etc/group | NOMATCH test
    tests.session -u test prepare

restore: |
    tests.exec is-skipped && exit 0
    tests.session -u test restore

debug: |
    LIBEXEC_DIR="$(os.paths libexec-dir)"
    getcap "$LIBEXEC_DIR"/snapd/snap-confine.backup || true
    getcap "$LIBEXEC_DIR"/snapd/snap-confine || true

execute: |
    tests.exec is-skipped && exit 0
    tests.session -u test exec sh -c "test-snapd-sh-core24.sh -c 'true' 2>&1" | \
        MATCH 'user is not a member of group'

    usermod -a -G snap-runners test
    # restart the user's session
    tests.session -u test restore
    tests.session -u test prepare

    tests.session -u test exec sh -c "test-snapd-sh-core24.sh -c 'true'"
