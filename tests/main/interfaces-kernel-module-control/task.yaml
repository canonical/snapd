summary: Ensure that the kernel-module-control interface works.

details: |
    The kernel-module-control interface allows insertion, removal and querying
    of modules.

    A snap which defines a kernel-module-control plug must be shown in the
    interfaces list. The plug must not be autoconnected on install and, as
    usual, must be able to be reconnected.

    A snap declaring a plug on this interface must be able to list the modules
    loaded, insert and remove a module. For the test we use the binfmt_misc module.

prepare: |
    echo "Given a snap declaring a plug on the kernel-module-control interface is installed"
    snap install --edge test-snapd-kernel-module-control-consumer

restore: |
    rm -f list.error remove.error
    if lsmod | MATCH binfmt_misc; then
        rmmod binfmt_misc
    fi

execute: |
    CONNECTED_PATTERN=":kernel-module-control +test-snapd-kernel-module-control-consumer"
    DISCONNECTED_PATTERN="\- +test-snapd-kernel-module-control-consumer:kernel-module-control"

    echo "The plug is disconnected by default"
    snap interfaces | MATCH "$DISCONNECTED_PATTERN"

    echo "==================================="

    echo "When the plug is connected"
    snap connect test-snapd-kernel-module-control-consumer:kernel-module-control
    snap interfaces | MATCH "$CONNECTED_PATTERN"

    echo "Then the snap is able to list the existing modules"
    [ $(su -l -c "test-snapd-kernel-module-control-consumer.lsmod" test | wc -l) -gt 2 ]

    echo "And the snap is able to insert a module"
    lsmod | MATCH -v binfmt_misc
    test-snapd-kernel-module-control-consumer.insmod /lib/modules/$(uname -r)/kernel/fs/binfmt_misc.ko
    lsmod | MATCH binfmt_misc

    echo "And the snap is able to remove a module"
    test-snapd-kernel-module-control-consumer.rmmod binfmt_misc
    lsmod | MATCH -v binfmt_misc

    echo "==================================="

    echo "When the plug is disconnected"
    snap disconnect test-snapd-kernel-module-control-consumer:kernel-module-control
    snap interfaces | MATCH "$DISCONNECTED_PATTERN"

    echo "Then the snap is not able to list modules"
    if su -l -c "test-snapd-kernel-module-control-consumer.lsmod 2>${PWD}/list.error" test; then
        echo "Expected permission error listing modules with disconnected plug"
        exit 1
    fi
    cat list.error | MATCH "Permission denied"

    echo "And the snap is not able to insert a module"
    if test-snapd-kernel-module-control-consumer.insmod /lib/modules/$(uname -r)/kernel/fs/binfmt_misc.ko; then
        echo "Expected permission error inserting module with disconnected plug"
        exit 1
    fi

    echo "And the snap is not able to remove a module"
    # first we need to insert the module
    lsmod | MATCH -v binfmt_misc
    insmod /lib/modules/$(uname -r)/kernel/fs/binfmt_misc.ko
    lsmod | MATCH binfmt_misc
    if test-snapd-kernel-module-control-consumer.rmmod binfmt_misc 2>${PWD}/remove.error; then
        echo "Expected permission error removing module with disconnected plug"
        exit 1
    fi
    cat remove.error | MATCH "Permission denied"
