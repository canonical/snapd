summary: Ensure that netplan apply works with network-setup-control

details: |
    Netplan apply is used to apply network configuration to the system

environment:
    NETPLAN: io.netplan.Netplan

# don't run on non-ubuntu systems where we won't have netplan
# and also don't run on ubuntu-core where we can't create the fake netplan D-Bus
# service
systems:
    - -debian-*
    - -fedora-*
    - -ubuntu-14*
    - -ubuntu-core-*
    - -opensuse-*
    - -arch-*
    - -amazon-*
    - -centos-*
    # TODO: re-enable this when network-setup-control is updated to allow
    # running netplan directly from the base snap and we can update this test to
    # just using a simple shell script snap instead of building netplan from
    # source, as currently that is broken on xenial with
    # test-snapd-netplan-apply for some reason, see https://github.com/anonymouse64/test-snapd-netplan-apply/issues/1
    - -ubuntu-16*

prepare: |
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    snap install test-snapd-netplan-apply --edge

    # backup the dbus service file and policy config if they exist before 
    # executing
    for f in system-services/$NETPLAN.service system.d/$NETPLAN.conf; do
        if [ -f /usr/share/dbus-1/$f ]; then
            mv /usr/share/dbus-1/$f /usr/share/dbus-1/$f.backup
        fi      
    done

    # install the dbus policy config file and service unit for our fake netplan
    # system dbus service
    echo "Install the netplan D-Bus activatable system service"
    mkdir -p /usr/share/dbus-1/system.d 
    mkdir -p /usr/share/dbus-1/system-services
    cp $NETPLAN.conf /usr/share/dbus-1/system.d/$NETPLAN.conf
    # generate the service file here so that we can referece the python file and
    # the log file in this directory
    cat << EOF > /usr/share/dbus-1/system-services/$NETPLAN.service
    [D-BUS Service]
    Name=$NETPLAN
    Exec=$(pwd)/fake-netplan-service.py $(pwd)/dbus-netplan-apply.log
    User=root
    AssumedAppArmorLabel=unconfined
    EOF

    touch dbus-netplan-apply.log

restore: |
    # kill the dbus service if it is running 
    set +e
    if [ -n "$(pgrep --full fake-netplan-service.py)" ]; then
        for pid in $(pgrep --full fake-netplan-service.py); do
            kill -9 "$pid"
        done
    fi
    set -e

    # restore the dbus service file and policy config file if the backup exists
    for f in system-services/$NETPLAN.service system.d/$NETPLAN.conf; do
        if [ -f /usr/share/dbus-1/$f.backup ]; then
            mv /usr/share/dbus-1/$f.backup /usr/share/dbus-1/$f
        fi      
    done

execute: |
    echo "The network-setup-control interface is disconnected by default"
    snap connections test-snapd-netplan-apply | MATCH 'network-setup-control +test-snapd-netplan-apply:network-setup-control +- +-'

    echo "Running netplan apply without network-setup-control fails"
    if test-snapd-netplan-apply.netplan apply; then
        echo "Expected access denied error for netplan apply"
        exit 1
    fi

    echo "The D-Bus service was not activated"
    not MATCH "Apply called" < dbus-netplan-apply.log

    echo "When the interface is connected"
    snap connect test-snapd-netplan-apply:network-setup-control

    echo "Running netplan apply now works"
    if ! test-snapd-netplan-apply.netplan apply; then
        echo "Unexpected error running netplan apply"
        exit 1
    fi

    echo "And the D-Bus service was activated"
    MATCH "Apply called" < dbus-netplan-apply.log

    echo "clearing the log for the network-setup-observe info test"
    rm dbus-netplan-apply.log
    touch dbus-netplan-apply.log

    echo "Disconnecting network-setup-control to test network-setup-observe"
    snap disconnect test-snapd-netplan-apply:network-setup-control

    echo "The network-setup-observe interface is disconnected by default"
    snap connections test-snapd-netplan-apply | MATCH 'network-setup-observe +test-snapd-netplan-apply:network-setup-observe +- +-'

    echo "Running netplan info via D-Bus without network-setup-observe fails"
    if test-snapd-netplan-apply.info; then
        echo "Expected access denied error for netplan info via D-Bus"
        exit 1
    fi

    echo "The D-Bus service was not activated"
    not MATCH "Info called" < dbus-netplan-apply.log

    echo "When the interface is connected"
    snap connect test-snapd-netplan-apply:network-setup-observe

    echo "Running netplan info via D-Bus now works"
    if ! test-snapd-netplan-apply.info; then
        echo "Unexpected error running netplan info via D-Bus"
        exit 1
    fi

    echo "And the D-Bus service was activated"
    MATCH "Info called" < dbus-netplan-apply.log

    echo "clearing the log for the network-setup-control info test"
    rm dbus-netplan-apply.log
    touch dbus-netplan-apply.log

    echo "Disconnecting network-setup-observe to test network-setup-control"
    snap disconnect test-snapd-netplan-apply:network-setup-observe

    echo "Running netplan info via D-Bus without network-setup-control fails"
    if test-snapd-netplan-apply.info; then
        echo "Expected access denied error for netplan info via D-Bus"
        exit 1
    fi

    echo "The D-Bus service was not activated"
    not MATCH "Info called" < dbus-netplan-apply.log

    echo "When the interface is connected"
    snap connect test-snapd-netplan-apply:network-setup-control

    echo "Running netplan info via D-Bus now works"
    if ! test-snapd-netplan-apply.info; then
        echo "Unexpected error running netplan info via D-Bus"
        exit 1
    fi
