summary: Ensure that netplan apply works with network-setup-control

details: |
    Netplan apply is used to apply network configuration to the system

# Only run on ubuntu lts's which match ubuntu core series
# We don't run this test on core since there we can't setup the fake dbus
# service there, but we have a core specific spread test in tests/core/netplan
# which uses the real netplan. That test also tests the full support matrix of
# all versions of the client netplan library from all base snaps against all
# "boot base snap" (or host) versions of netplan that run outside confinement on
# a real Ubuntu Core system. As such, this test only concerns itself with
# testing a particular netplan client library version via the specific base snap
# matching the classic system, against the fake service we setup (which will be
# the same for all spread systems).
systems:
    - ubuntu-16.04*
    - ubuntu-18.04*
    - ubuntu-20.04*

environment:
    NETPLAN: io.netplan.Netplan

prepare: |
    # build the netplan snap for this system
    if os.query is-xenial; then
        # use no base setting to use effectively "base: core"
        sed "$TESTSLIB/snaps/netplan-snap/meta/snap.yaml.in" -e "s/base: BASESNAP/# no base snap for core base/" > "$TESTSLIB/snaps/netplan-snap/meta/snap.yaml"
        snap pack "$TESTSLIB/snaps/netplan-snap" --filename=netplan-snap-16.snap
        snap install --dangerous netplan-snap-16.snap
    elif os.query is-bionic; then
        # use base: core18
        sed "$TESTSLIB/snaps/netplan-snap/meta/snap.yaml.in" -e "s/base: BASESNAP/base: core18/" > "$TESTSLIB/snaps/netplan-snap/meta/snap.yaml"
        snap pack "$TESTSLIB/snaps/netplan-snap" --filename=netplan-snap-18.snap
        snap install --dangerous netplan-snap-18.snap
    elif os.query is-focal; then
        # use base: core20
        sed "$TESTSLIB/snaps/netplan-snap/meta/snap.yaml.in" -e "s/base: BASESNAP/base: core20/" > "$TESTSLIB/snaps/netplan-snap/meta/snap.yaml"
        snap pack "$TESTSLIB/snaps/netplan-snap" --filename=netplan-snap-20.snap
        snap install --dangerous netplan-snap-20.snap
    else
        echo "new core release, please update test for new ubuntu core version"
        exit 1
    fi

    echo "Backup the dbus service file and policy config if they exist before executing"
    for f in system-services/$NETPLAN.service system.d/$NETPLAN.conf; do
        if [ -f /usr/share/dbus-1/$f ]; then
            mv /usr/share/dbus-1/$f /usr/share/dbus-1/$f.backup
        fi      
    done

    echo "Install the dbus policy config file and service unit for our fake netplan system dbus service"
    echo "Install the netplan D-Bus activatable system service"
    mkdir -p /usr/share/dbus-1/system.d 
    mkdir -p /usr/share/dbus-1/system-services
    cp $NETPLAN.conf /usr/share/dbus-1/system.d/$NETPLAN.conf

    echo "Generate the service file here so that we can referece the python file and the log file in this directory"
    cat << EOF > /usr/share/dbus-1/system-services/$NETPLAN.service
    [D-BUS Service]
    Name=$NETPLAN
    Exec=$(pwd)/fake-netplan-service.py $(pwd)/dbus-netplan-apply.log
    User=root
    AssumedAppArmorLabel=unconfined
    EOF

    touch dbus-netplan-apply.log

restore: |
    echo "Kill the dbus service if it is running"
    set +e
    if [ -n "$(pgrep --full fake-netplan-service.py)" ]; then
        for pid in $(pgrep --full fake-netplan-service.py); do
            kill -9 "$pid"
        done
    fi
    set -e

    echo "Restore the dbus service file and policy config file if the backup exists"
    for f in system-services/$NETPLAN.service system.d/$NETPLAN.conf; do
        if [ -f /usr/share/dbus-1/$f.backup ]; then
            mv /usr/share/dbus-1/$f.backup /usr/share/dbus-1/$f
        fi      
    done

execute: |
    echo "The network-setup-control interface is disconnected by default"
    snap connections netplan-snap | MATCH 'network-setup-control +netplan-snap:network-setup-control +- +-'

    echo "Running netplan apply without network-setup-control fails"
    if netplan-snap.netplan apply; then
        echo "Expected access denied error for netplan apply"
        exit 1
    fi

    echo "The D-Bus service was not activated"
    NOMATCH "Apply called" < dbus-netplan-apply.log

    echo "When the interface is connected"
    snap connect netplan-snap:network-setup-control

    echo "Running netplan apply now works"
    if ! netplan-snap.netplan apply; then
        echo "Unexpected error running netplan apply"
        exit 1
    fi

    echo "And the D-Bus service was activated"
    MATCH "Apply called" < dbus-netplan-apply.log

    echo "clearing the log for the network-setup-observe info test"
    rm dbus-netplan-apply.log
    touch dbus-netplan-apply.log

    echo "Disconnecting network-setup-control to test network-setup-observe"
    snap disconnect netplan-snap:network-setup-control

    echo "The network-setup-observe interface is disconnected by default"
    snap connections netplan-snap | MATCH 'network-setup-observe +netplan-snap:network-setup-observe +- +-'

    echo "Running netplan info via D-Bus without network-setup-observe fails"
    if netplan-snap.netplan-info; then
        echo "Expected access denied error for netplan info via D-Bus"
        exit 1
    fi

    echo "The D-Bus service was not activated"
    NOMATCH "Info called" < dbus-netplan-apply.log

    echo "When the interface is connected"
    snap connect netplan-snap:network-setup-observe

    echo "Running netplan info via D-Bus now works"
    if ! netplan-snap.netplan-info; then
        echo "Unexpected error running netplan info via D-Bus"
        exit 1
    fi

    echo "And the D-Bus service was activated"
    MATCH "Info called" < dbus-netplan-apply.log

    echo "clearing the log for the network-setup-control info test"
    rm dbus-netplan-apply.log
    touch dbus-netplan-apply.log

    echo "Disconnecting network-setup-observe to test network-setup-control"
    snap disconnect netplan-snap:network-setup-observe

    echo "Running netplan info via D-Bus without network-setup-control fails"
    if netplan-snap.netplan-info; then
        echo "Expected access denied error for netplan info via D-Bus"
        exit 1
    fi

    echo "The D-Bus service was not activated"
    NOMATCH "Info called" < dbus-netplan-apply.log

    echo "When the interface is connected"
    snap connect netplan-snap:network-setup-control

    echo "Running netplan info via D-Bus now works"
    if ! netplan-snap.netplan-info; then
        echo "Unexpected error running netplan info via D-Bus"
        exit 1
    fi
