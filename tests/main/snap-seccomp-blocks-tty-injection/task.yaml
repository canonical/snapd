summary: Ensure that the snap-seccomp blocks tty command injection

details: |
    Check it is not allowed to make tty command injection. Verify snap-seccomp
    generated a profile which results in  "Operation not permitted" message when 
    attempt to inject a tty command is denied.

# ubuntu-core: excluded because there is no gcc there
systems: [-ubuntu-core-*]

prepare: |
    echo "Install a helper snap (for seccomp confinement testing)"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh

    echo "Compile and prepare the test programs"
    # Because we use the snap data directory we don't need to clean it up
    # manually as all snaps and their data are reset after each test.
    # Build the test binary statically, as it will be running inside a base with
    # potentially older glibc.
    gcc -Wall -Wextra -Werror ./test-tioclinux.c -o /var/snap/test-snapd-sh/common/test-tioclinux -static
    gcc -Wall -Wextra -Werror ./test-tiocsti.c   -o /var/snap/test-snapd-sh/common/test-tiocsti -static

execute: |
    # use /dev/tty1 as input so that we use a real virtual console which
    # supports TIOCSTI / TIOCLINUX - but first make sure the snap can access it
    # through AppArmor
    if [ "$(snap debug confinement)" = strict ]; then
        sed -i 's|^}$|  /dev/tty1  rw,\n}|' /var/lib/snapd/apparmor/profiles/snap.test-snapd-sh.sh
        apparmor_parser -r /var/lib/snapd/apparmor/profiles/snap.test-snapd-sh.sh
    fi

    # For 64bit systems TIOC{STI,LINUX} gets a EPERM because of the
    # "snap-seccomp-blacklist" that is *only* build for 64bit arches
    # (because denying also needs to work when the higher bits are set
    #  which the normal filter will not check, see also commit b923d58)
    #
    # On 32bit systems TIOC{STI,LINUX} is blocked by the default seccomp
    # template.go which will default to EACCESS for explicit denied syscalls.
    snap run test-snapd-sh.sh -c "\$SNAP_COMMON/test-tiocsti"   < /dev/tty1 2>&1 | MATCH 'normal TIOCSTI: -1 \((Operation not permitted|Permission denied)\)'
    snap run test-snapd-sh.sh -c "\$SNAP_COMMON/test-tiocsti"   < /dev/tty1 2>&1 | MATCH 'high-bit-set TIOCSTI: -1 \((Operation not permitted|Permission denied)\)'
    # TODO: this will not work because TIOCLINUX only works on "real" virtual
    #       linux terminal which cannot be simulated via spread unless we
    #       do something with nested qemu and simulated with maybe
    #       "-chardev tty"
    #snap run test-snapd-sh.sh -c "\$SNAP_COMMON/test-tioclinux" < /dev/tty1 2>&1 | MATCH 'ioctl\(0, TIOCLINUX, ...\) failed: Permission denied'
