summary: Test that snap-confine errors in the right way

details: |
    This test verifies different miscellaneous behaviors of
    snap-confine. When a base snap is not available for a snap to run,
    then the correct error message should be reported. It also
    verifies the presence of some work-around when running on 16.04
    with nvidia proprietary drivers. It finally verifies that apparmor
    profiles generated by snapd for snap-confine can be parsed and
    loaded.

# the error message can only happen on classic systems
# our debian image does not have fully working apprmor
systems: [-ubuntu-core-*, -debian-*]

prepare: |
    echo "Install test snap"
    snap install test-snapd-sh

restore: |
    echo "Restore current symlink"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    mv "$SNAP_MOUNT_DIR/core/current.renamed" "$SNAP_MOUNT_DIR/core/current" ||  true

execute: |
    echo "Simulating broken current symlink for core"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    mv "$SNAP_MOUNT_DIR/core/current" "$SNAP_MOUNT_DIR/core/current.renamed"
    if test-snapd-sh.sh -c 'echo hello' 2>snap-confine.stderr; then
        echo "test-snapd-sh.sh should fail to run, test broken"
    fi
    MATCH 'cannot locate base snap core: No such file or directory' < snap-confine.stderr
    mv "$SNAP_MOUNT_DIR/core/current.renamed" "$SNAP_MOUNT_DIR/core/current"

    echo "Test nvidia device fix"
    # For https://github.com/snapcore/snapd/pull/4042
    echo "Simulate nvidia device tags"
    mkdir -p /run/udev/tags/snap_test-snapd-sh_sh
    for f in c226:0 +module:nvidia +module:nvidia_modeset; do
        touch /run/udev/tags/snap_test-snapd-sh_sh/$f
    done
    test-snapd-sh.sh -c 'echo hello' | MATCH hello
    echo "Non nvidia files are still there"
    test -f /run/udev/tags/snap_test-snapd-sh_sh/c226:0
    echo "But nvidia files are gone"
    not test -f /run/udev/tags/snap_test-snapd-sh_sh/+module:nvidia
    not test -f /run/udev/tags/snap_test-snapd-sh_sh/+module:nvidia_modeset

    echo "Ensure apparmor profile for snap-confine is parsable"
    while IFS= read -r -d '' file; do
        if command -v apparmor_parser 2>/dev/null; then
            apparmor_parser -QTK "$file"
        fi
        if command -v aa-enforce 2>/dev/null; then
            aa-enforce "$file"
        fi
    done <   <(find /etc/apparmor.d -maxdepth 1 -name 'usr.lib.snapd.snap-confine*')
