summary: Ensure that the network-manager interface works

description: |
    The network-manager interface gives privileged access to configure and
    observe networking.
    The test uses a snap which plugs the network manager interface. Then it is
    validated that the snap autoconects and can create a new connection.
    Connection against network devices cannot be validated on a virtual machine
    due to network-manager being configured not to managed them.

# run only against the amd64 VM, we cannot run this on arm/arm64
# boards because the (wifi) network is already managed by netplan
# there and when n-m gets installed/removed it will hang when
# trying to deconfigure the wifi network which is already owned.
systems: [ubuntu-core-16-64, ubuntu-core-16-32]

prepare: |
    echo "Give a network-manager snap is installed"
    snap install network-manager

execute: |
    # using wait_for_service is not enough, systemd considers the service
    # active even when it is not (yet) listening to dbus
    for i in $(seq 300); do
        if network-manager.nmcli general; then
            break
        fi
        sleep 1
    done

    echo "The interface is connected by default"
    snap interfaces | MATCH "network-manager:service .*network-manager:nmcli"

    echo "And allows to add a new connection"
    conn_name=nmtest
    network-manager.nmcli con add type ethernet con-name $conn_name ifname eth0 | MATCH "successfully added"
    network-manager.nmcli c | MATCH "^$conn_name .+ethernet +"

    echo "And allows to remove a connection"
    network-manager.nmcli connection delete id $conn_name | MATCH "successfully deleted"

    echo "And allows to show devices information"
    network-manager.nmcli d show

    echo "When the plug is disconnected"
    snap disconnect network-manager:nmcli

    echo "Then the consumer is not able to access the provided methods"
    if network-manager.nmcli general 2>${PWD}/call.error; then
        echo "Expected permission error calling nmcli method with disconnected plug"
        exit 1
    fi
    MATCH "Permission denied" < call.error
