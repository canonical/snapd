summary: Check that the refresh command works.
details: |
    These tests exercise the refresh command using different store backends.
    The concrete store to be used is controlled with the STORE_TYPE variant,
    the defined values are fake, for a local store, or remote, for the currently
    configured remote store.
    When executing against the remote stores the tests rely in the existence of
    a given snap with an updatable version (version string like 2.0+fake1) in the
    edge channel.

environment:
    SNAP_NAME/strict_fake,strict_remote: test-snapd-tools
    SNAP_NAME/classic_fake,classic_remote: test-snapd-classic-confinement
    SNAP_VERSION_PATTERN: \d+\.\d+\+fake1
    BLOB_DIR: $(pwd)/fake-store-blobdir
    STORE_TYPE/strict_fake,classic_fake: fake
    STORE_TYPE/strict_remote,classic_remote: ${REMOTE_STORE}

prepare: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    if [ "$STORE_TYPE" = "fake" ]; then
        if is_core_system; then
            exit
        fi
        if [ "$TRUST_TEST_KEYS" = "false" ]; then
            echo "This test needs test keys to be trusted"
            exit
        fi
    fi

    flags=
    if [[ "$SNAP_NAME" =~ classic ]]; then
        case "$SPREAD_SYSTEM" in
            ubuntu-core-*|fedora-*|arch-*)
                exit
                ;;
        esac
        flags=--classic
    fi

    echo "Given a snap is installed"
    snap install "$flags" "$SNAP_NAME"

    if [ "$STORE_TYPE" = "fake" ]; then
        #shellcheck source=tests/lib/store.sh
        . "$TESTSLIB"/store.sh
        setup_fake_store "$BLOB_DIR"

        echo "And a new version of that snap put in the controlled store"
        #shellcheck source=tests/lib/store.sh
        . "$TESTSLIB"/store.sh
        init_fake_refreshes "$BLOB_DIR" "$SNAP_NAME"
    fi

restore: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    rm -f stderr.out
    if [ "$STORE_TYPE" = "fake" ]; then
        if is_core_system; then
            exit
        fi
        if [ "$TRUST_TEST_KEYS" = "false" ]; then
            echo "This test needs test keys to be trusted"
            exit
        fi
        #shellcheck source=tests/lib/store.sh
        . "$TESTSLIB"/store.sh
        teardown_fake_store "$BLOB_DIR"
    fi

execute: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    if [ "$STORE_TYPE" = "fake" ]; then
        if is_core_system; then
            exit
        fi
        if [ "$TRUST_TEST_KEYS" = "false" ]; then
            echo "This test needs test keys to be trusted"
            exit
        fi
    fi

    if [[ "$SNAP_NAME" =~ classic ]]; then
        case "$SPREAD_SYSTEM" in
            ubuntu-core-*|fedora-*|arch-*)
                exit
                ;;
        esac
    fi

    # FIXME: currently the --list from channel doesn't work
    # echo "Then the new version is available for the snap to be refreshed"
    # expected="$SNAP_NAME +$SNAP_VERSION_PATTERN"
    # snap refresh --list | grep -Pzq "$expected"
    #
    # echo "================================="

    echo "When the snap is refreshed"
    snap refresh --channel=edge "$SNAP_NAME"

    echo "Then the new version is listed"
    expected="$SNAP_NAME +$SNAP_VERSION_PATTERN"
    snap list | grep -Pzq "$expected"

    echo "When a snap is refreshed and has no update it exit 0"
    snap refresh "$SNAP_NAME" 2>stderr.out
    MATCH "snap \"$SNAP_NAME\" has no updates available" < stderr.out

    echo "classic snaps "

    echo "When multiple snaps have no update we have a good message"
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    install_local basic
    snap refresh "$SNAP_NAME" basic 2>&1 | MATCH "All snaps up to date."

    echo "When moving to stable"
    snap refresh --stable "$SNAP_NAME"
    snap info "$SNAP_NAME" | MATCH "tracking: +stable"

    snap refresh --candidate "$SNAP_NAME" 2>&1 | MATCH "$SNAP_NAME \\(candidate\\).*"
    snap info "$SNAP_NAME" | MATCH "tracking: +candidate"

    echo "When multiple snaps are refreshed we error if we have unknown names"
    if snap refresh core invÃ¤lid-snap-name 2> out.err; then
        echo "snap refresh invalid-snap-name should fail but it did not?"
        exit 1
    fi
    tr '\n' ' ' < out.err | tr -s ' ' | MATCH 'cannot refresh .* is not installed'
