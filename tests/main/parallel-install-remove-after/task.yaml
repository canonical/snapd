summary: Checks for parallel installation interfering with non-parallel snaps

description: |
  Make sure parallel instances do not interfere with other snaps. In particular,
  parallel instances create a recursive bind mount of $SNAP_MOUNT_DIR. This
  should not prevent snaps from being unmounted when removed.

prepare: |
    #shellcheck source=tests/lib/dirs.sh
    . "$TESTSLIB"/dirs.sh

    case "$SPREAD_SYSTEM" in
        fedora-*|arch-*|centos-*)
            # although classic snaps do not work out of the box on fedora,
            # we still want to verify if the basics do work if the user
            # symlinks /snap to $SNAP_MOUNT_DIR themselves
            ln -sf "$SNAP_MOUNT_DIR" /snap
            ;;
    esac

restore: |
    snap unset system experimental.parallel-instances

    case "$SPREAD_SYSTEM" in
        fedora-*|arch-*|centos-*)
            rm -f /snap
            ;;
    esac

execute: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    # install confined and classic snaps
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh
    if is_classic_system ; then
        "$TESTSTOOLS"/snaps-state install-local test-snapd-classic-confinement --classic
    fi

    snap set system experimental.parallel-instances=true

    # regular instances work
    # shellcheck disable=SC2016
    test-snapd-sh.sh -c 'echo confined $SNAP_INSTANCE_NAME works'
    if is_classic_system ; then
        # shellcheck disable=SC2016
        test-snapd-classic-confinement.sh -c 'echo classic $SNAP_INSTANCE_NAME works'
    fi

    # new instances of same snaps
    "$TESTSTOOLS"/snaps-state install-local-as test-snapd-sh test-snapd-sh_foo
    if is_classic_system ; then
        "$TESTSTOOLS"/snaps-state install-local-as test-snapd-classic-confinement test-snapd-classic-confinement_foo --classic
    fi

    # parallel instances works
    # shellcheck disable=SC2016
    test-snapd-sh_foo.sh -c 'echo confined $SNAP_INSTANCE_NAME works'
    if is_classic_system ; then
        # shellcheck disable=SC2016
        test-snapd-classic-confinement_foo.sh -c 'echo classic $SNAP_INSTANCE_NAME works'
    fi

    # removal of snaps should not fail
    snap remove --purge test-snapd-sh
    if is_classic_system ; then
        snap remove --purge test-snapd-classic-confinement
    fi

    # neither should the removal of instances
    snap remove --purge test-snapd-sh_foo
    if is_classic_system ; then
        snap remove --purge test-snapd-classic-confinement_foo
    fi
