summary: Check the expected behavior of a mixed service snap refresh

details: |
    Given a snap that has a mix of system-services and user-services,
    we can disable and stop those (for all users), and then a refresh
    correctly preserves this state. 

# Only run on systems with polkit rules are supported, otherwise
# are not able to test 'snap xxx --user' functionality as it needs
# sudo access, and if its run with sudo then the user will be root
# and not the user we are testing with
systems: [ ubuntu-20.04-64, ubuntu-22.04-64, ubuntu-24.04-64 ]

kill-timeout: 10m

prepare: |
    # Ensure that snapd.session-agent.socket is enabled.  This may not
    # be the case on distributions where presets have been used to
    # disable it.
    if [ ! -L /usr/lib/systemd/user/sockets.target.wants/snapd.session-agent.socket ] &&
            ! systemctl --user --global is-enabled snapd.session-agent.socket; then
        systemctl --user --global enable snapd.session-agent.socket
        touch agent-was-enabled
    fi
    snap set system experimental.user-daemons=true
    tests.session kill-leaked
    tests.session -u test prepare

    # add a second user to test with
    if ! useradd -m -d /home/test2 test2; then
        # Ubuntu Core requires using extrausers db
        useradd --extrausers -m -d /home/test2 test2
    fi
    tests.session -u test2 prepare

    # rules are only supported from 23.10+
    if [ -d /etc/polkit-1/localauthority/50-local.d ]; then
        cat <<\EOF >/etc/polkit-1/localauthority/50-local.d/spread.pkla
    [Normal Staff Permissions]
    Identity=unix-user:test
    Action=io.snapcraft.snapd.manage
    ResultAny=yes
    ResultInactive=no
    ResultActive=yes
    EOF
    else
        cat <<\EOF >/etc/polkit-1/rules.d/io.snapcraft.snapd.rules
    polkit.addRule(function(action, subject) {
        if (action.id == "io.snapcraft.snapd.manage" && subject.user == "test") {
            return polkit.Result.YES;
        }
    });
    EOF
    fi

restore: |
    tests.session -u test2 restore
    if ! userdel -rf test2; then
        userdel --extrausers -rf test2
    fi
    tests.session -u test restore
    snap unset system experimental.user-daemons
    if [ -f agent-was-enabled ]; then
        systemctl --user --global disable snapd.session-agent.socket
        rm agent-was-enabled
    fi
    rm -f /etc/polkit-1/localauthority/50-local.d/spread.pkla || true
    rm -f /etc/polkit-1/rules.d/io.snapcraft.snapd.rules || true

execute: |
    function systemctl_as_test() {
      tests.session -u test exec systemctl --user "$@"
    }
    function systemctl_as_test2() {
      tests.session -u test2 exec systemctl --user "$@"
    }

    echo "Install the a snap with user services while a user session is active"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-mixed-service

    echo "Verify status of running services after install"
    systemctl is-active snap.test-snapd-mixed-service.sys-service | MATCH "active"
    systemctl is-enabled snap.test-snapd-mixed-service.sys-service | MATCH "enabled"

    systemctl_as_test is-active snap.test-snapd-mixed-service.user-service | MATCH "active"
    systemctl_as_test is-enabled snap.test-snapd-mixed-service.user-service | MATCH "enabled"

    systemctl_as_test2 is-active snap.test-snapd-mixed-service.user-service | MATCH "active"
    systemctl_as_test2 is-enabled snap.test-snapd-mixed-service.user-service | MATCH "enabled"

    # stop and disable both services, scope of user one for all
    snap stop --disable --system --users=all test-snapd-mixed-service

    # verify this worked
    systemctl is-active snap.test-snapd-mixed-service.sys-service | MATCH "inactive"
    systemctl is-enabled snap.test-snapd-mixed-service.sys-service | MATCH "disabled"

    systemctl_as_test is-active snap.test-snapd-mixed-service.user-service | MATCH "inactive"
    systemctl_as_test is-enabled snap.test-snapd-mixed-service.user-service | MATCH "disabled"

    systemctl_as_test2 is-active snap.test-snapd-mixed-service.user-service | MATCH "inactive"
    systemctl_as_test2 is-enabled snap.test-snapd-mixed-service.user-service | MATCH "disabled"

    # now refresh snap to a new version
    "$TESTSTOOLS"/snaps-state install-local test-snapd-mixed-service-v2
    
    # verify nothing changed
    systemctl is-active snap.test-snapd-mixed-service.sys-service | MATCH "inactive"
    systemctl is-enabled snap.test-snapd-mixed-service.sys-service | MATCH "disabled"

    systemctl_as_test is-active snap.test-snapd-mixed-service.user-service | MATCH "inactive"
    systemctl_as_test is-enabled snap.test-snapd-mixed-service.user-service | MATCH "disabled"

    systemctl_as_test2 is-active snap.test-snapd-mixed-service.user-service | MATCH "inactive"
    systemctl_as_test2 is-enabled snap.test-snapd-mixed-service.user-service | MATCH "disabled"
