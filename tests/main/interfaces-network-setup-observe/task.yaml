summary: Ensure that the desktop interface works.

details: |
    The network setup control interface allows to access the different netplan
    configuration files.

    The test uses the test-snapd-check-fs-access snap to checks files and dirs
    are accessible through the interface.

prepare: |
    echo "Given the test-snapd-check-fs-access snap is installed"
    cp -rf $TESTSLIB/snaps/test-snapd-check-fs-access /tmp/test-snapd-check-fs-access
    sed 's/\[\]/\[network-setup-control\]/g' -i /tmp/test-snapd-check-fs-access/meta/snap.yaml
    snap try /tmp/test-snapd-check-fs-access

restore: |
    rm -rf /tmp/test-snapd-check-fs-access

execute: |
    CONNECTED_PATTERN=":network-setup-observe +test-snapd-check-fs-access"
    DISCONNECTED_PATTERN="\- +test-snapd-check-fs-access:network-setup-observe"

    dirs="/etc/netplan /etc/network"

    echo "The plug is not connected by default"
    snap interfaces | MATCH "$DISCONNECTED_PATTERN"

    echo "When the interface is connected"
    snap connect test-snapd-check-fs-access:network-setup-observe
    snap interfaces | MATCH "$CONNECTED_PATTERN"

    echo "Then the snap is able to write in the network and netplan directories"
    for dir in $dirs; do
        if [ -d $dir ]; then
            test-snapd-check-fs-access.read-dir $dir
        fi
    done

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect test-snapd-check-fs-access:network-setup-observe

    echo "Then the snap is not able to access the networking configuration dirs"
    for dir in $dirs; do
        if [ -d $dir ]; then
            if test-snapd-check-fs-access.read-dir $dir 2>${PWD}/call.error; then
                echo "Expected permission error calling desktop with disconnected plug"
                exit 1
            fi
            MATCH "Permission denied" < call.error
        fi
    done

    echo "Then the interface can be connected again"
    snap connect test-snapd-check-fs-access:network-setup-observe
