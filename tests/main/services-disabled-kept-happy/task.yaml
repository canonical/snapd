summary: Check that disabled snap services stay disabled across happy refreshes,
  reverts, and disable/enable cycles (there is a separate tests for unhappy
  undos, etc.)

# This test is for the "happy" paths for disabled services, where nothing goes
# wrong and is undone, but there are still a lot of cases here for that. This
# test covers the following cases:

# 1. install snap
#    => state.json doesn't have last-active-disabled-services

# 2. install snap, disable services, refresh snap
#    => state.json doesn't have last-active-disabled-services
#    => the services are disabled

# 3. install snap, disable services, disable snap
#    => state.json has last-active-disabled-services
#    => after enabling the snap, state.json doesn't have last-active-disabled-services
#    => after enabling the snap, the services are disabled

# 4. install snap, disable services, refresh snap, revert snap
#    => state.json doesn't have last-active-disabled-services
#    => the services are disabled

# 5. install snap, disable services, refresh with service renamed
#    => state.json has old disabled services saved in last-active-disabled-services
#    => new service is not disabled

# 6. install snap, disable services, refresh snap with service renamed, disable services, revert snap
#    => state.json has the new disabled services saved in last-active-disabled-services
#    => the old disabled services are now disabled again

# 7. install snap, disable services, refresh with service renamed, revert snap, re-revert snap
#    => new service is not disabled
#    => state.json has old disabled services saved in last-active-disabled-services

# 8. install snap, disable services, refresh snap with service renamed, disable services, revert snap, re-revert snap
#    => state.json has the old disabled service saved in last-active-disabled-services
#    => new service is disabled

# 9. install snap, disable services, refresh snap with service changed to an app
#    => state.json has the old disable service saved in last-active-disabled-services

# 10. install snap, disable services, refresh snap with service changed to an app, revert snap
#     => state.json doesn't have the old disabled service saved in last-active-disabled-services
#     => the service is disabled

# 11. install snap, disable services, refresh snap with service renamed, disable services, refresh snap with service renamed again
#     => state.json has both services saved in last-active-disabled-services

# 12. install snap, disable services, refresh snap with service renamed, disable services, revert snap, re-revert snap
#     => state.json has old disabled service saved in last-active-disabled-services
#     => the new service is disabled

prepare: |
  snap install --edge jq
  # keep more revisions to simplify switching around between revisions in the 
  # test
  snap set system refresh.retain=5
  rm -rf disabled-svcs-kept*

  echo "Build the snaps"
  cp -r "$TESTSLIB/snaps/disabled-svcs-kept/" ./disabled-svcs-kept1/
  sed \
    -e s@THEVERSION@1.0@ \
    -e s@THESVCNAME@svc@ \
    -e "s@THEDAEMON@daemon: simple@" \
    disabled-svcs-kept1/meta/snap.yaml.in > disabled-svcs-kept1/meta/snap.yaml
  snap pack ./disabled-svcs-kept1

  cp -r "$TESTSLIB/snaps/disabled-svcs-kept/" ./disabled-svcs-kept2/
  sed \
    -e s@THEVERSION@2.0@ \
    -e s@THESVCNAME@svc2@ \
    -e "s@THEDAEMON@daemon: simple@" \
    disabled-svcs-kept2/meta/snap.yaml.in > disabled-svcs-kept2/meta/snap.yaml 
  snap pack ./disabled-svcs-kept2


  cp -r "$TESTSLIB/snaps/disabled-svcs-kept/" ./disabled-svcs-kept3/
  sed \
    -e s@THEVERSION@3.0@ \
    -e s@THESVCNAME@svc2@ \
    -e "s@THEDAEMON@@" \
    disabled-svcs-kept3/meta/snap.yaml.in > disabled-svcs-kept3/meta/snap.yaml
  snap pack ./disabled-svcs-kept3

execute: |
  # shellcheck source=tests/lib/disabled-svcs.sh
  . "$TESTSLIB/disabled-svcs.sh"

  ########################################
  ############### CASE 1 #################
  ########################################

  echo "CASE 1"

  echo "Install the snap"
  # this is x1
  snap install --dangerous disabled-svcs-kept_1.0*.snap

  echo "Check that state.json doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  ########################################
  ############### CASE 2 #################
  ########################################

  echo "CASE 2"

  echo "Disable a service in the snap"
  snap stop --disable disabled-svcs-kept.svc

  echo "Check that it was actually disabled"
  retry -n 10 --wait 1 sh -c 'snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"'

  echo "Check that state.json still doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  echo "Disable the whole snap"
  snap disable disabled-svcs-kept

  echo "Check that state.json DOES contain last-active-disabled-services"
  check_state_json_yes_disabled_svcs

  echo "Enable the whole snap"
  snap enable disabled-svcs-kept

  echo "Check that the service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json still doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  ########################################
  ############### CASE 3 #################
  ########################################

  echo "CASE 3"

  echo "Refresh the snap"
  # this is x2
  snap install --dangerous disabled-svcs-kept_1.0*.snap

  echo "Check that the service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json still doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  ########################################
  ############### CASE 4 #################
  ########################################

  echo "CASE 4"

  echo "Revert the snap"
  snap revert disabled-svcs-kept --revision=x1

  echo "Check that the service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json still doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  echo "Refresh back to the new revision to unmark it as blacklisted"
  snap refresh disabled-svcs-kept --revision=x2

  ########################################
  ############### CASE 5 #################
  ########################################

  echo "CASE 5"

  echo "Refresh to a new revision with a snap service renamed"
  # this is x3
  snap install --dangerous disabled-svcs-kept_2.0*.snap

  echo "Check that state.json has the old service saved"
  check_state_json_specific_disabled_svc svc

  ########################################
  ############### CASE 6 #################
  ########################################

  echo "CASE 6"

  echo "Revert the snap to the old revision with a service disabled"
  snap revert disabled-svcs-kept --revision=x2

  echo "Check that the service is disabled again"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json no longer contains last-active-disabled-services"
  check_state_json_no_disabled_svcs

  ########################################
  ############### CASE 7 #################
  ########################################

  echo "CASE 7"

  echo "Re-refresh forward to new revision with renamed service not disabled"
  snap refresh disabled-svcs-kept --revision=x3

  echo "Check that the new service was not disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+enabled\\s+active"

  echo "Check that state.json now contains the old service in last-active-disabled-services"
  check_state_json_specific_disabled_svc svc

  echo "Disable the new service"
  snap stop --disable disabled-svcs-kept.svc2

  echo "Check that the new service IS NOW disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  ########################################
  ############### CASE 8 #################
  ########################################

  echo "CASE 8"

  echo "Revert the snap to the old revision with a service disabled"
  snap revert disabled-svcs-kept --revision=x2

  echo "Check that the old service is disabled again"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json now contains the new service in last-active-disabled-services"
  check_state_json_specific_disabled_svc svc2

  echo "Re-refresh forward to new revision with renamed service disabled"
  snap refresh disabled-svcs-kept --revision=x3

  echo "Check that the new service IS NOW disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  echo "Check that state.json now contains the old service in last-active-disabled-services"
  check_state_json_specific_disabled_svc svc

  ########################################
  ############### CASE 9 #################
  ########################################

  echo "CASE 9"

  echo "Re-refresh to old revision to enable the old service to clear saved state"
  snap refresh disabled-svcs-kept --revision=x2
  snap start --enable disabled-svcs-kept.svc

  echo "Check that the old service is now enabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+enabled\\s+active"

  echo "Re-refresh to new revision"
  snap refresh disabled-svcs-kept --revision=x3

  echo "Check that state.json no longer contains last-active-disabled-services"
  check_state_json_no_disabled_svcs

  echo "Refresh to new revision with svc retyped as app"
  snap install --dangerous disabled-svcs-kept_3.0*.snap

  echo "Check that state.json now contains last-active-disabled-services"
  check_state_json_specific_disabled_svc svc2

  echo "Check that the current snap has no services"
  if snap services disabled-svcs-kept; then
    echo "snap has services when it should only have an app"
    exit 1
  fi

  ########################################
  ############### CASE 10 ################
  ########################################

  echo "CASE 10"

  echo "Revert back to the new revision with the new service"
  snap revert disabled-svcs-kept --revision=x3

  echo "Check that the new service is now disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  echo "Check that state.json no longer contains last-active-disabled-services"
  check_state_json_no_disabled_svcs

  echo "Refresh back to the reverted revision to unmark it as blacklisted"
  snap refresh disabled-svcs-kept --revision=x4

  echo "Refresh back to the new revision with the new service"
  snap refresh disabled-svcs-kept --revision=x3

  ########################################
  ############### CASE 11 ################
  ########################################

  echo "CASE 11"

  echo "Enable the new service to clear the saved state"
  snap start --enable disabled-svcs-kept.svc2

  echo "Check that the new service is now enabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+enabled\\s+active"

  echo "Refresh back to old revision with old service to re-disable"
  snap refresh disabled-svcs-kept --revision=x2

  echo "Check that the old service was not disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+enabled\\s+active"

  echo "Disable the old service"
  snap stop --disable disabled-svcs-kept.svc

  echo "Check that the old service IS NOW disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Re-refresh forward to new revision with new service to re-disable"
  snap refresh disabled-svcs-kept --revision=x3

  echo "Check that the new service was not disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+enabled\\s+active"

  echo "Check that state.json now contains the old service in last-active-disabled-services"
  check_state_json_specific_disabled_svc svc

  echo "Disable the new service"
  snap stop --disable disabled-svcs-kept.svc2

  echo "Check that the new service IS NOW disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  echo "Re-refresh to the new revision without any services"
  snap refresh disabled-svcs-kept --revision=x4

  echo "Check that state.json now contains the old service and the new service in last-active-disabled-services"
  "$TESTSTOOLS"/snapd-state check-state \
    '.data.snaps."disabled-svcs-kept" | ."last-active-disabled-services"? | tostring' \
    "=" '["svc","svc2"]' \
    "$SVC_MISSING_ERR_MSG"

  ########################################
  ############### CASE 12 ################
  ########################################

  echo "CASE 12"

  echo "Refresh back to old revision with old service to check it is disabled"
  snap refresh disabled-svcs-kept --revision=x2

  echo "Check that the old service is disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json now contains last-active-disabled-services for the new service"
  check_state_json_specific_disabled_svc svc2

  echo "Re-refresh forward to new revision with new service to check it is disabled"
  snap refresh disabled-svcs-kept --revision=x3

  echo "Check that the old service is disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  echo "Check that state.json now contains last-active-disabled-services for the old service"
  check_state_json_specific_disabled_svc svc
