summary: Check that `snap get` works as expected

prepare: |
    snap install --devmode jq

    echo "Build basic test package (without hooks)"
    snap pack "$TESTSLIB"/snaps/basic
    snap install --dangerous basic_1.0_all.snap

    echo "Build package with hook to run snapctl set"
    snap pack "$TESTSLIB"/snaps/snapctl-hooks
    snap install --dangerous snapctl-hooks_1.0_all.snap

execute: |
    echo "Test that snap get fails on a snap without any hooks"
    if output=$(snap get basic foo); then
        echo "snap get unexpectedly worked with output '$output'"
        exit 1
    fi

    echo "Test that getting root document without any configuration produces an error with list format"
    if output=$(snap get snapctl-hooks 2>&1); then
        echo "snap get didn't fail as expected"
        exit 1
    fi
    expected="error: snap \"snapctl-hooks\" has no configuration"
    if [ "$output" != "$expected" ]; then
        echo "Expected '$expected' error, but it was '$output'"
        exit 1
    fi

    echo "Test that getting root document without any configuration works for json output"
    snap get snapctl-hooks -d | MATCH "^{}$"

    echo "Test that values set via snapctl can be obtained via snap get"
    if ! snap set snapctl-hooks command=test-snapctl-set-foo; then
        echo "snap set unexpectedly failed"
        exit 1
    fi
    if ! output=$(snap get snapctl-hooks command); then
        echo "snap get unexpectedly failed"
        exit 1
    fi
    expected="test-snapctl-set-foo"
    if [ "$output" != "$expected" ]; then
        echo "Expected 'command' to be '$expected', but it was '$output'"
        exit 1
    fi
    if ! output=$(snap get snapctl-hooks foo); then
        echo "snap get unexpectedly failed"
        exit 1
    fi
    expected="bar"
    if [ "$output" != "$expected" ]; then
        echo "Expected 'foo' to be '$expected', but it was '$output'"
        exit 1
    fi

    echo "Test that keys of json documents can be obtained via snap get"
    if ! snap set snapctl-hooks command=test-snapctl-set-bar-doc; then
        echo "snap set unexpectedly failed"
        exit 1
    fi
    snap get snapctl-hooks bar 2>&1 | MATCH -z "WARNING"
    snap get snapctl-hooks -l bar 2>&1 | MATCH -z '^Key.*Value.*bar.a.*{\.\.\.}.*bar.b.*3'
    snap get snapctl-hooks -d bar | MATCH -z "^{.*\"bar\": {.*\"a\": {.*\"aa\": 1,.*\"ab\": 2.*},.*\"b\": 3.*}.*}"

    snap get snapctl-hooks bar.a.aa | MATCH "^1$"
    snap get snapctl-hooks bar.a.ab | MATCH "^2$"

    echo "Test that root document can be obtained via snap get"
    snap get snapctl-hooks -l 2>&1 | MATCH -z '^Key.*Value.*bar.*{\.\.\.}.*command.*test-snapctl-set-bar-doc.*foo.*bar'
    snap get snapctl-hooks -d | MATCH -z "^{.*\"bar\": {.*\"a\": {.*\"aa\": 1,.*\"ab\": 2.*},.*\"b\": 3.*}.*,.*\"command\": \"test-snapctl-set-bar-doc\",.*\"foo\": \"bar\".*}"

    echo "Test number formats"
    if ! snap set snapctl-hooks command=test-get-int intnumber=1234567890 intnumber2="{\"a\":9876543210}"; then
        echo "snap set unexpectedly failed"
        exit 1
    fi
    if ! output=$(snap get snapctl-hooks intnumber); then
        echo "snap get unexpectedly failed"
    fi
    expected="1234567890"
    if [ "$output" != "$expected" ]; then
        echo "Expected 'intnumber' to be '$expected', but it was '$output'"
        exit 1
    fi

    echo "Test nested values"
    snap set snapctl-hooks command=test-get-nested root.key1="a" root.key2="b"
    snap set snapctl-hooks command=test-get-nested root.key1="a"

    if ! output=$(snap get snapctl-hooks intnumber2); then
        echo "snap get unexpectedly failed"
    fi
    echo "$output" | MATCH ".*\"a\": 9876543210.*"

    echo "Ensure config value has correct format"
    jq ".data[\"config\"][\"snapctl-hooks\"].intnumber" /var/lib/snapd/state.json | MATCH "1234567890"

    echo "Test unsetting of root.key2 with exclamation mark via snapctl"
    # sanity check
    snap get snapctl-hooks root.key2 | MATCH "b"
    # note, unsetting happens in the configure hook in response to "test-unset" value
    snap set snapctl-hooks command=test-unset root.key1="c"
    if ! output=$(snap get snapctl-hooks root.key1); then
        echo "snap get unexpectedly failed"
    fi
    snap get snapctl-hooks root.key2 2>&1 | MATCH 'snap "snapctl-hooks" has no "root.key2" configuration option'

    echo "Test unsetting of root.key2 with via snapctl unset"
    # init and sanity check
    snap set snapctl-hooks command=noop root.key2="b"
    snap get snapctl-hooks root.key2 | MATCH "b"
    # note, unsetting happens in the configure hook in response to "test-unset-with-unset" value
    snap set snapctl-hooks command=test-unset-with-unset
    snap get snapctl-hooks root.key2 2>&1 | MATCH 'snap "snapctl-hooks" has no "root.key2" configuration option'

    echo "Test that config values are not available once snap is removed"
    snap remove --purge snapctl-hooks
    if output=$(snap get snapctl-hooks foo); then
        echo "Expected snap get to fail, but got '$output'"
        exit 1
    fi
