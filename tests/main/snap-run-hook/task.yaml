summary: Check that `snap run` can actually run hooks

details: |
    Verifies the `snap run` can run snap hooks. Also check 
    `snap run` cannot call invalid hooks.

environment:
    # Ensure that running purely from the deb (without re-exec) works
    # correctly
    SNAP_REEXEC/reexec0: 0
    SNAP_REEXEC/reexec1: 1
    ENVDUMP: /var/snap/basic-hooks/current/hooks-env

prepare: |
    "$TESTSTOOLS"/snaps-state install-local basic-hooks
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    if [ "$SNAP_REEXEC" = "1" ] && [ "$SNAP_MOUNT_DIR" != "/snap" ] && [ ! -L /snap ]; then
        # reexec expects to find the snapd snap under /snap, enable it to do so
        # on distros using /var/lib/snapd/snap
        ln -sf "$SNAP_MOUNT_DIR" /snap
        tests.cleanup defer rm -f /snap
    fi

execute: |
    # Note that `snap run` doesn't exit non-zero if the hook is missing, so we
    # check the output instead.

    echo "Test that snap run can call valid hooks"

    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    if [ "$SNAP_REEXEC" = "1" ] && [ "$SNAP_MOUNT_DIR" != "/snap" ]; then
        # with snap mount dir different than /snap, internal s-c checks will fail
        if snap run --hook=configure basic-hooks > err.out 2>&1 ; then
            echo "unexpected success"
            cat err.out || true
            exit 1
        fi

        # with no AA support, we fail on a simple check for s-c being executed
        # from /snap/snapd/<rev>/, with AA we fail on an earlier check for AA
        # confinement
        MATCH "(running from unexpected location:|snap-confine has elevated permissions)" < err.out
        exit 0
    fi

    if ! output="$(snap run --hook=configure basic-hooks)"; then
        echo "Failed to run configure hook"
        exit 1
    fi

    expected_output="configure hook"
    if [ "$output" != "$expected_output" ]; then
        echo "Expected configure output to be '$expected_output', but it was '$output'"
        exit 1
    fi

    echo "Test that snap run cannot call invalid hooks"

    if output="$(snap run --hook=invalid-hook basic-hooks)"; then
        echo "Expected snap run to fail upon missing hook, but it was '$output'"
        exit 1
    fi

    expected_output=""
    if [ "$output" != "$expected_output" ]; then
        echo "Expected invalid-hook output to be '$expected_output', but it was '$output'"
        exit 1
    fi

    snap set basic-hooks command=dump-env
    echo "Test that environment variables were interpolated"
    MATCH "^TEST_COMMON=/var/snap/basic-hooks/common$" < "$ENVDUMP"
    MATCH "^TEST_DATA=/var/snap/basic-hooks/.*$" < "$ENVDUMP"
    MATCH "^TEST_SNAP=/snap/basic-hooks/.*$" < "$ENVDUMP"
    MATCH "^TEST_EXTRA=extra-stuff$" < "$ENVDUMP"
