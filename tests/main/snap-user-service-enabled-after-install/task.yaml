summary: Check that enabling of user services is working correctly across user sessions

details: |
    Given a snap that has user services with install-mode: disabled, but
    enables one of these services as a part of a hook for all users, 
    that we can verify this behavior for a user session that only 
    exists after the snap install.

# Only run on systems with polkit rules are supported, otherwise
# are not able to test 'snap xxx --user' functionality as it needs
# sudo access, and if its run with sudo then the user will be root
# and not the user we are testing with
systems: [ ubuntu-20.04-64, ubuntu-22.04-64, ubuntu-24.04-64 ]

kill-timeout: 10m

prepare: |
    # Ensure that snapd.session-agent.socket is enabled.  This may not
    # be the case on distributions where presets have been used to
    # disable it.
    if [ ! -L /usr/lib/systemd/user/sockets.target.wants/snapd.session-agent.socket ] &&
            ! systemctl --user --global is-enabled snapd.session-agent.socket; then
        systemctl --user --global enable snapd.session-agent.socket
        touch agent-was-enabled
    fi
    snap set system experimental.user-daemons=true
    tests.session kill-leaked
    tests.session -u test prepare

    if ! useradd -m -d /home/test2 test2; then
        # Ubuntu Core requires using extrausers db
        useradd --extrausers -m -d /home/test2 test2
    fi

    # rules are only supported from 23.10+
    if [ -d /etc/polkit-1/localauthority/50-local.d ]; then
        cat <<\EOF >/etc/polkit-1/localauthority/50-local.d/spread.pkla
    [Normal Staff Permissions]
    Identity=unix-user:test
    Action=io.snapcraft.snapd.manage
    ResultAny=yes
    ResultInactive=no
    ResultActive=yes
    EOF
    else
        cat <<\EOF >/etc/polkit-1/rules.d/io.snapcraft.snapd.rules
    polkit.addRule(function(action, subject) {
        if (action.id == "io.snapcraft.snapd.manage" && subject.user == "test") {
            return polkit.Result.YES;
        }
    });
    EOF
    fi

restore: |
    tests.session -u test2 restore || true
    if ! userdel -rf test2; then
        userdel --extrausers -rf test2 || true
    fi
    tests.session -u test restore
    snap unset system experimental.user-daemons
    if [ -f agent-was-enabled ]; then
        systemctl --user --global disable snapd.session-agent.socket
        rm agent-was-enabled
    fi
    rm -f /etc/polkit-1/localauthority/50-local.d/spread.pkla || true
    rm -f /etc/polkit-1/rules.d/io.snapcraft.snapd.rules || true

debug: |
    tests.session dump
    tests.session -u test exec systemctl --user status snapd.session-agent.service || true
    tests.session -u test exec journalctl --user || true

execute: |
    function systemctl_as_test() {
      tests.session -u test exec systemctl --user "$@"
    }
    function snap_as_test() {
      tests.session -u test exec snap "$@"
    }

    echo "Install the a snap with user services while a user session is active"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-user-service-disabled

    # expect that two runs and is enabled for all users
    # expect that three runs and is enabled for current user

    echo "Verify status of running services after install"
    systemctl_as_test is-active snap.test-snapd-user-service-disabled.user-service | MATCH "inactive"
    systemctl_as_test is-enabled snap.test-snapd-user-service-disabled.user-service | MATCH "disabled"

    systemctl_as_test is-active snap.test-snapd-user-service-disabled.user-service-two | MATCH "active"
    systemctl_as_test is-enabled snap.test-snapd-user-service-disabled.user-service-two | MATCH "enabled"

    echo "Enable the first user service for just us"
    snap_as_test start --user --enable test-snapd-user-service-disabled.user-service

    systemctl_as_test is-active snap.test-snapd-user-service-disabled.user-service | MATCH "active"
    systemctl_as_test is-enabled snap.test-snapd-user-service-disabled.user-service | MATCH "enabled"

    function systemctl_as_test2() {
      tests.session -u test2 exec systemctl --user "$@"
    }

    echo "Setup new user session and expect correct initial state"
    # make a new user session and verify that -two is enabled and running
    # but the first one is not
    tests.session -u test2 prepare

    # the first user-service that we started and enabled for just user
    # 'test' should not be running 
    systemctl_as_test2 is-active snap.test-snapd-user-service-disabled.user-service | MATCH "inactive"
    systemctl_as_test2 is-enabled snap.test-snapd-user-service-disabled.user-service | MATCH "disabled"

    # the second one which was enabled globally by the install hook should
    # be running
    systemctl_as_test2 is-active snap.test-snapd-user-service-disabled.user-service-two | MATCH "active"
    systemctl_as_test2 is-enabled snap.test-snapd-user-service-disabled.user-service-two | MATCH "enabled"
