summary: Check that LXD snap works on a system using SELinux in enforcing mode

details: |
    Make sure that LXD snap can be installed and used on a SELinux enable
    system, with enforcing mode on.

# Systems with SELinux enabled out of the box.
systems: [fedora-*, centos-*]

prepare: |
    getenforce > enforcing.mode
    # Enable enforcing mode, our policy is already marked as permissive, so we
    # will get audit entries but the program will not be stopped by SELinux
    setenforce 1
    ausearch --checkpoint stamp -m AVC || true

restore: |
    # Restore nsdelegate mount option clobbered by LXD.
    if mountinfo.query /sys/fs/cgroup/unified; then
        mount -o remount,nsdelegate /sys/fs/cgroup/unified
    fi

    setenforce "$(cat enforcing.mode)"

    if mountinfo.query /proc/sys/fs/binfmt_misc .fs_type=binfmt_misc; then
        umount /proc/sys/fs/binfmt_misc
    fi

    "$TESTSTOOLS"/lxd-state undo-mount-changes

debug: |
    echo "AVC log from the test"
    cat avc-after || true

execute: |
    "$TESTSTOOLS"/lxd-state prepare-snap
    ausearch -i --checkpoint stamp --start checkpoint -m AVC 2>&1 | MATCH 'no matches'

    lxd.lxc launch --quiet "ubuntu:18.04" my-ubuntu
    if os.query is-pc-amd64 && lxd.lxc info my-ubuntu | grep "Architecture: i686"; then
        echo "LXD spawned 32bit userspace container on a 64bit host, WAT?"
        snap info lxd
        exit 1
    fi

    echo "Ensure we can run things inside"
    lxd.lxc exec my-ubuntu echo hello | MATCH hello

    echo "Stop and remove the container"
    lxd.lxc stop --force my-ubuntu
    lxd.lxc delete --force my-ubuntu

    snap remove lxd

    # there is a known problem with the reference policy that disallows systemd
    # from creating a BPF map for unconfined_service_t, see:
    # https://bugzilla.redhat.com/show_bug.cgi?id=1694115
    # also network manager dispatcher service is raising a denial
    #
    # ausearch exits with 1 when there are no denials, which we expect on
    # centos-9
    ausearch --checkpoint stamp --start checkpoint -m AVC > avc-after 2>&1 || true
    grep -v -E 'avc:  denied  { map_create } for  pid=[0-9]+ comm="systemd"' < avc-after | \
    grep -v -E 'avc:  denied  { getattr } for  pid=[0-9]+ comm="which" path="/usr/bin/hostname" .*NetworkManager_dispatcher_dhclient_t' | \
        NOMATCH 'type=AVC'
