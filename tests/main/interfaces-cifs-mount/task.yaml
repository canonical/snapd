summary: Ensure that the cifs-mount interface works.

details: |
    The cifs-mount interface allows mounting and unmounting CIFS filesystems.

prepare: |
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    install_local test-snapd-sh

    # Create linux and samba users 
    useradd -s /bin/true test-cifs
    echo "test-cifs:test123#" | chpasswd
    mkdir /home/test-cifs

    echo -e "test\ntest" > test-pass
    smbpasswd -a test-cifs -s < test-pass

    # Create mount point
    mkdir -p local_share1 local_share2
    test-snapd-sh.with-cifs-mount -c "mkdir \$SNAP_DATA/local_mount"
    chmod 755 local_share1
    chmod 755 local_share2
    touch local_share1/test

    # Configure samba
    cp /etc/samba/smb.conf /etc/samba/smb.conf.back
    echo -e "[data1]\npath=$(pwd)/local_share1\nwritable=yes\nbrowsable=yes\n\n" >> /etc/samba/smb.conf
    echo -e "[data2]\npath=$(pwd)/local_share2\nwritable=yes\nbrowsable=yes\n" >> /etc/samba/smb.conf

    systemctl restart smbd.service

restore: |
    rm -f call.error test-pass
    rm -rf local_share1 local_share2 /var/snap/test-snapd-sh/current/local_mount

    # Restore samba configuration
    smbpasswd -x test-cifs || true
    userdel test-cifs
    cp /etc/samba/smb.conf.back /etc/samba/smb.conf || true
    systemctl restart smbd.service

execute: |
    echo "The interface is not connected by default"
    snap interfaces -i cifs-mount | MATCH -- '^- +test-snapd-sh:cifs-mount'

    echo "When the interface is connected"
    snap connect test-snapd-sh:cifs-mount
    snap connect test-snapd-sh:network-control

    echo "Then the snap is able to mount and umount a cifs fs"
    test-snapd-sh.with-cifs-mount -c "mount -t cifs //127.0.0.1/data1 \$SNAP_DATA/local_mount -o username=test-cifs,passowrd=test"
    test-snapd-sh.with-cifs-mount -c "test -f \$SNAP_DATA/local_mount/test"

    test-snapd-sh.with-cifs-mount -c "umount \$SNAP_DATA/local_mount"
    test-snapd-sh.with-cifs-mount -c "! test -f \$SNAP_DATA/local_mount/test"

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect test-snapd-sh:cifs-mount

    echo "Then the snap is not able to mount a cifs filesystem"
    if test-snapd-sh.with-cifs-mount -c "mount -t cifs //127.0.0.1/data2 \$SNAP_DATA/local_mount -o username=test-cifs,passowrd=test" 2>call.error; then
        echo "Expected permission error mounting cifs"
        exit 1
    fi
    MATCH "Permission denied" < call.error
