summary: Upgrade the core snap and revert a few times

systems:
    - ubuntu-core-16-64-fixme
    - ubuntu-core-16-arm-64
    - ubuntu-core-16-arm-32

debug: |
    snap list
    . $TESTSLIB/boot.sh
    bootenv
    cat /proc/cmdline

restore: |
    rm -f prevBoot nextBoot

prepare: |
    . $TESTSLIB/names.sh
    snap list | awk "/^${core_name} / {print(\$3)}" > nextBoot

execute: |
    . $TESTSLIB/names.sh
    . $TESTSLIB/boot.sh

    # FIXME Why it starting with snap_mode=try the first time?
    # Perhaps because core is installed after seeding? Do we
    # want that on pristine images?
    if [ $SPREAD_REBOOT != 0 ]; then
        echo "Waiting for snapd to clean snap_mode"
        while [ "$(bootenv snap_mode)" != "" ]; do
            sleep 1
        done

        echo "Ensure the bootloader is correct after reboot"
        test "$(bootenv snap_core)" = "${core_name}_$(cat nextBoot).snap"
        test "$(bootenv snap_try_core)" = ""
        test "$(bootenv snap_mode)" = ""
    fi

    snap list | awk "/^${core_name} / {print(\$3)}" > prevBoot

    case $SPREAD_REBOOT in

    0) snap install --dangerous /var/lib/snapd/snaps/${core_name}_$(cat prevBoot).snap ;;
    1) snap revert ${core_name} ;;
    2) snap install --dangerous /var/lib/snapd/snaps/${core_name}_$(cat prevBoot).snap ;;
    3) snap revert ${core_name} ;;
    4) exit 0 ;;

    esac

    echo "Ensure the bootloader is correct before reboot"
    snap list | awk "/^${core_name} / {print(\$3)}" > nextBoot
    test "$(cat prevBoot)" != "$(cat nextBoot)"
    test "$(bootenv snap_try_core)" = "${core_name}_$(cat nextBoot).snap"
    test "$(bootenv snap_mode)" = "try"

    echo "Ensure the device is scheduled for auto-reboot"
    output=$(dbus-send --print-reply \
        --type=method_call \
        --system \
        --dest=org.freedesktop.login1 \
        /org/freedesktop/login1 \
        org.freedesktop.DBus.Properties.Get \
        string:org.freedesktop.login1.Manager string:ScheduledShutdown)
    if ! echo $output | grep 'string "reboot"'; then
        echo "Failed to detect scheduled reboot in logind output:"
        echo "$output"
        exit 1
    fi

    REBOOT
