summary: Ensure that lxd works

# Only run this on ubuntu 16+, lxd will not work on !ubuntu systems
# currently nor on ubuntu 14.04
# TODO:UC20: enable for UC20
systems: [ubuntu-16*, ubuntu-18.04*, ubuntu-2*, ubuntu-core-1*]

# autopkgtest run only a subset of tests that deals with the integration
# with the distro
backends: [-autopkgtest]

# lxd downloads can be quite slow
kill-timeout: 25m

# Start before anything else as it can take a really long time.
priority: 1000

prepare: |
    # using apt here is ok because this test only runs on ubuntu
    echo "Remove any installed debs (some images carry them) to ensure we test the snap"
    # apt -v to test if apt is usable (its not on ubuntu-core)
    if command -v apt && apt -v; then
        apt autoremove -y lxd
    fi

restore: |
    if  [[ "$(find "$GOHOME" -name 'snapd_*.deb' | wc -l || echo 0)" -eq 0 ]]; then
        exit
    fi

    for cont_name in my-nesting-ubuntu my-ubuntu; do
        lxd.lxc stop $cont_name --force
        lxd.lxc delete $cont_name
    done

    lxd-tool undo-lxd-mount-changes

debug: |
    # shellcheck source=tests/lib/journalctl.sh
    . "$TESTSLIB/journalctl.sh"

    # debug output from lxd
    get_journalctl_log -u snap.lxd.daemon.service

execute: |
    if  [[ "$(find "$GOHOME" -name 'snapd_*.deb' | wc -l || echo 0)" -eq 0 ]]; then
        echo "No run lxd test when there are not .deb files built"
        exit
    fi

    echo "Install lxd"
    snap install --candidate lxd

    echo "Create a trivial container using the lxd snap"
    snap set lxd waitready.timeout=240
    lxd waitready
    lxd init --auto

    echo "Setting up proxy for lxc"
    if [ -n "${http_proxy:-}" ]; then
        lxd.lxc config set core.proxy_http "$http_proxy"
    fi
    if [ -n "${https_proxy:-}" ]; then
        lxd.lxc config set core.proxy_https "$http_proxy"
    fi

    # The snapd package we build as part of the tests will only run on the
    # distro we build on. So we need to launch the right ubuntu version.
    # prep two containers, the my-ubuntu normal container and the 
    # my-nesting-ubuntu nesting container

    (
        . /etc/os-release
        # TODO:2004: remove version check once the image for ubuntu 20.04 is published
        if [ "$VERSION_ID" == 20.04 ]; then
            # shellcheck disable=SC2031
            VERSION_ID=19.10
        fi
        lxd.lxc launch --quiet "ubuntu:${VERSION_ID:-}" my-ubuntu
        lxd.lxc launch --quiet "ubuntu:${VERSION_ID:-}" my-nesting-ubuntu -c security.nesting=true
    )
    if [ "$(uname -m)" = x86_64 ] && lxd.lxc info my-ubuntu | grep "Architecture: i686"; then
        echo "LXD spawned 32bit userspace container on a 64bit host, WAT?"
        snap info lxd
        exit 1
    fi
    if [ "$(uname -m)" = x86_64 ] && lxd.lxc info my-nesting-ubuntu | grep "Architecture: i686"; then
        echo "LXD spawned 32bit userspace container on a 64bit host, WAT?"
        snap info lxd
        exit 1
    fi

    for cont_name in my-ubuntu my-nesting-ubuntu; do
        echo "Ensure we can run things inside"
        lxd.lxc exec $cont_name echo hello | MATCH hello

        echo "Cleanup container"
        lxd.lxc exec $cont_name -- apt autoremove --purge -y snapd ubuntu-core-launcher

        echo "Ensure apt is up-to-date"
        lxd.lxc exec $cont_name -- apt update

        echo "Install snapd"
        lxd.lxc exec $cont_name -- mkdir -p "$GOHOME"
        lxd.lxc file push --quiet "$GOHOME"/snapd_*.deb "$cont_name/$GOHOME/"
        lxd.lxc exec $cont_name -- apt install -y "$GOHOME"/snapd_*.deb

        echo "Setting up proxy *inside* the container"
        if [ -n "${http_proxy:-}" ]; then
            lxd.lxc exec $cont_name -- sh -c "echo http_proxy=$http_proxy >> /etc/environment"
        fi
        if [ -n "${https_proxy:-}" ]; then
            lxd.lxc exec $cont_name -- sh -c "echo https_proxy=$https_proxy >> /etc/environment"
        fi
        lxd.lxc exec $cont_name -- systemctl daemon-reload
        lxd.lxc exec $cont_name -- systemctl restart snapd.service
        lxd.lxc exec $cont_name -- snap wait system seed.loaded
        lxd.lxc exec $cont_name -- cat /etc/environment
    done

    # FIXME: ensure that the kernel running is recent enough, this
    #        will only work with an up-to-date xenial kernel (4.4.0-78+)

    echo "Ensure we can use snapd inside lxd"
    lxd.lxc exec my-ubuntu snap install test-snapd-sh
    echo "And we can run snaps as regular users"
    lxd.lxc exec my-ubuntu -- su -c "/snap/bin/test-snapd-sh.sh -c 'echo from-the-inside'" ubuntu | MATCH from-the-inside
    echo "And as root"
    lxd.lxc exec my-ubuntu -- test-snapd-sh.sh -c 'echo from-the-inside' | MATCH from-the-inside
    echo "We can also remove snaps successfully"
    lxd.lxc exec my-ubuntu -- snap remove --purge test-snapd-sh

    # Ensure that we can run snapd as a snap inside a nested container

    echo "Ensure we can use lxd as a snap inside lxd"
    lxd.lxc exec my-nesting-ubuntu -- apt autoremove -y lxd
    lxd.lxc exec my-nesting-ubuntu -- snap install lxd
    echo "And we can run lxd containers inside the lxd container"
    lxd.lxc exec my-nesting-ubuntu -- snap set lxd waitready.timeout=240
    lxd.lxc exec my-nesting-ubuntu -- lxd waitready
    lxd.lxc exec my-nesting-ubuntu -- lxd init --auto

    (
        . /etc/os-release
        # TODO:2004: remove version check once the image for ubuntu 20.04 is published
        if [ "$VERSION_ID" == 20.04 ]; then
            # shellcheck disable=SC2031
            VERSION_ID=19.10
        fi
        lxd.lxc exec my-nesting-ubuntu -- lxd.lxc launch "ubuntu:${VERSION_ID:-}" my-inner-ubuntu
    )
    lxd.lxc exec my-nesting-ubuntu -- lxd.lxc exec my-inner-ubuntu -- echo "from-the-INSIDE-inside" | MATCH from-the-INSIDE-inside

    echo "Install lxd-demo server to exercise the lxd interface"
    snap install lxd-demo-server
    snap connect lxd-demo-server:lxd lxd:lxd

    echo "Check that we error in 'unconfined' lxd containers"
    lxd.lxc config show my-ubuntu > conf.yaml
    cat <<EOF >> conf.yaml
    config:
      raw.lxc: |
        lxc.apparmor.profile=unconfined
    EOF
    lxd.lxc stop --force my-ubuntu
    lxd.lxc config edit my-ubuntu < conf.yaml
    lxd.lxc start my-ubuntu
    # shellcheck disable=SC2016
    lxd.lxc exec my-ubuntu -- sh -c 'set -x;for i in $(seq 120); do if journalctl -u snapd.service | grep -E "apparmor detected but insufficient permissions to use it"; then break; fi; sleep 1; done'
    lxd.lxc exec my-ubuntu -- journalctl -u snapd | MATCH "apparmor detected but insufficient permissions to use it"
