summary: Ensure that lxd works

# autopkgtest run only a subset of tests that deals with the integration
# with the distro
backends: [-autopkgtest]

# Only run this on ubuntu 16+, lxd will not work on !ubuntu systems
# currently nor on ubuntu 14.04
# ubuntu-18.04-32: i386 is not supported by lxd
# ubuntu-21.10-*: failing currently with
# "Setup snap "core" (11993) security profiles (cannot run udev triggers: exit status 1"
systems: [ubuntu-16*, ubuntu-18.04-64, ubuntu-20*, ubuntu-21.04-*, ubuntu-core-*]

# Start before anything else as it can take a really long time.
priority: 1000

# lxd downloads can be quite slow
kill-timeout: 25m

environment:
    REFRESH_APP_AWARENESS_OUTER/snapd_cgroup_just_inside: false
    REFRESH_APP_AWARENESS_INNER/snapd_cgroup_just_inside: true
    REFRESH_APP_AWARENESS_OUTER/snapd_cgroup_just_outside: true
    REFRESH_APP_AWARENESS_INNER/snapd_cgroup_just_outside: false
    REFRESH_APP_AWARENESS_OUTER/snapd_cgroup_both: true
    REFRESH_APP_AWARENESS_INNER/snapd_cgroup_both: true
    REFRESH_APP_AWARENESS_OUTER/snapd_cgroup_neither: false
    REFRESH_APP_AWARENESS_INNER/snapd_cgroup_neither: false

prepare: |
    # using apt here is ok because this test only runs on ubuntu
    echo "Remove any installed debs (some images carry them) to ensure we test the snap"
    # apt -v to test if apt is usable (its not on ubuntu-core)
    if command -v apt && apt -v; then
        apt autoremove -y lxd
    fi
    # Depending on test variant, enable refresh-app-awareness outside to test
    # the interaction between lxd and cgroup-based application tracking.
    snap set system experimental.refresh-app-awareness=$REFRESH_APP_AWARENESS_OUTER

restore: |
    if  [[ "$(find "$GOHOME" -name 'snapd_*.deb' | wc -l || echo 0)" -eq 0 ]]; then
        exit
    fi

    for cont_name in my-nesting-ubuntu my-ubuntu; do
        lxd.lxc stop $cont_name --force || true
        lxd.lxc delete $cont_name || true
    done
    snap remove --purge lxd
    snap remove --purge lxd-demo-server

    "$TESTSTOOLS"/lxd-state undo-mount-changes
    snap unset system experimental.refresh-app-awareness
    # Stop the dbus.service of the user session of the root user. This test
    # runs in several configurations, not all of which have this capability.
    # Where supported the test code below causes socket activation, through the
    # refresh-app-awareness application tracking mechanism built into snap
    # run. This session-level dbus daemon is detected as spurious by the
    # invariant checker.
    systemctl --user stop dbus.service || true

debug: |
    # debug output from lxd
    "$TESTSTOOLS"/journal-state get-log -u snap.lxd.daemon.service

execute: |
    if  [[ "$(find "$GOHOME" -name 'snapd_*.deb' | wc -l || echo 0)" -eq 0 ]]; then
        echo "No run lxd test when there are not .deb files built"
        exit
    fi

    echo "Install lxd"
    snap install lxd --channel="$LXD_SNAP_CHANNEL"

    echo "Create a trivial container using the lxd snap"
    snap set lxd waitready.timeout=240
    lxd waitready
    lxd init --auto

    echo "Setting up proxy for lxc"
    if [ -n "${http_proxy:-}" ]; then
        lxd.lxc config set core.proxy_http "$http_proxy"
    fi
    if [ -n "${https_proxy:-}" ]; then
        lxd.lxc config set core.proxy_https "$http_proxy"
    fi

    # The snapd package we build as part of the tests will only run on the
    # distro we build on. So we need to launch the right ubuntu version.
    # prep two containers, the my-ubuntu normal container and the
    # my-nesting-ubuntu nesting container

    VERSION_ID="$(. /etc/os-release && echo "$VERSION_ID" )"
    lxd.lxc launch --quiet "ubuntu:$VERSION_ID" my-ubuntu
    lxd.lxc launch --quiet "ubuntu:$VERSION_ID" my-nesting-ubuntu -c security.nesting=true
    if os.query is-pc-amd64 && lxd.lxc info my-ubuntu | grep "Architecture: i686"; then
        echo "LXD spawned 32bit userspace container on a 64bit host, WAT?"
        snap info lxd
        exit 1
    fi
    if os.query is-pc-amd64 && lxd.lxc info my-nesting-ubuntu | grep "Architecture: i686"; then
        echo "LXD spawned 32bit userspace container on a 64bit host, WAT?"
        snap info lxd
        exit 1
    fi

    for cont_name in my-ubuntu my-nesting-ubuntu; do
        echo "Ensure we can run things inside"
        lxd.lxc exec $cont_name echo hello | MATCH hello

        echo "Push snapd into container"
        lxd.lxc file push --quiet prep-snapd-in-lxd.sh "$cont_name/root/"
        lxd.lxc file push --quiet "$GOHOME"/snapd_*.deb "$cont_name/root/"

        echo "Setting up proxy *inside* the container"
        if [ -n "${http_proxy:-}" ]; then
            lxd.lxc exec $cont_name -- sh -c "echo http_proxy=$http_proxy >> /etc/environment"
        fi
        if [ -n "${https_proxy:-}" ]; then
            lxd.lxc exec $cont_name -- sh -c "echo https_proxy=$https_proxy >> /etc/environment"
        fi

        echo "Install snapd in container"
        lxd.lxc exec $cont_name -- /root/prep-snapd-in-lxd.sh
        lxd.lxc exec $cont_name -- snap set system experimental.refresh-app-awareness=$REFRESH_APP_AWARENESS_INNER
    done

    # FIXME: ensure that the kernel running is recent enough, this
    #        will only work with an up-to-date xenial kernel (4.4.0-78+)

    echo "Ensure we can use snapd inside lxd"
    lxd.lxc exec my-ubuntu snap install test-snapd-sh
    echo "And we can run snaps as regular users, assuming session bus is available"
    lxd.lxc exec my-ubuntu -- apt-get update
    lxd.lxc exec my-ubuntu -- apt-get install -y dbus-user-session
    lxd.lxc exec my-ubuntu -- su -l ubuntu -c "systemctl --user enable dbus.socket"
    lxd.lxc exec my-ubuntu -- su -l ubuntu -c "/snap/bin/test-snapd-sh.sh -c 'echo from-the-inside'" | MATCH from-the-inside
    echo "And as root"
    lxd.lxc exec my-ubuntu -- test-snapd-sh.sh -c 'echo from-the-inside' | MATCH from-the-inside
    echo "We can also remove snaps successfully"
    lxd.lxc exec my-ubuntu -- snap remove --purge test-snapd-sh

    echo "Sanity check that mount overrides were generated inside the container"
    lxd.lxc exec my-ubuntu -- find /var/run/systemd/generator/ -name container.conf | MATCH "/var/run/systemd/generator/snap-core-.*mount.d/container.conf"
    lxd.lxc exec my-ubuntu -- test -f /var/run/systemd/generator/snap.mount

    # Ensure that we can run lxd as a snap inside a container to create a nested
    # container

    if [ "$SPREAD_SYSTEM" = "ubuntu-16.04-64" ]; then
        # related bug: https://bugs.launchpad.net/snapd/+bug/1892468
        echo "Not running old xenial combination which lacks proper patches"
        exit 0
    fi

    echo "Ensure we can use lxd as a snap inside lxd"
    lxd.lxc exec my-nesting-ubuntu -- apt autoremove -y lxd
    lxd.lxc exec my-nesting-ubuntu -- snap install lxd --channel="$LXD_SNAP_CHANNEL"
    echo "And we can run lxd containers inside the lxd container"
    lxd.lxc exec my-nesting-ubuntu -- snap set lxd waitready.timeout=240
    lxd.lxc exec my-nesting-ubuntu -- lxd waitready
    lxd.lxc exec my-nesting-ubuntu -- lxd init --auto

    lxd.lxc exec my-nesting-ubuntu -- lxd.lxc launch "ubuntu:${VERSION_ID:-}" my-inner-ubuntu
    lxd.lxc exec my-nesting-ubuntu -- lxd.lxc exec my-inner-ubuntu -- echo "from-the-INSIDE-inside" | MATCH from-the-INSIDE-inside

    # finally check that we can't run snapd inside a nested lxd container as
    # current apparmor does not support this, so if this works it is probably a
    # confinement bug
    #
    # 2021-11-02: disabled because of https://github.com/lxc/lxd/issues/9447
    #
    #lxd.lxc exec my-nesting-ubuntu -- lxd.lxc file push --quiet prep-snapd-in-lxd.sh my-inner-ubuntu/root/
    #snapdDeb=$(lxd.lxc exec my-nesting-ubuntu -- sh -c 'ls snapd_*.deb')
    #lxd.lxc exec my-nesting-ubuntu -- lxd.lxc file push --quiet "$snapdDeb" my-inner-ubuntu/root/
    #echo "Setting up proxy for the *inside nested* container"
    #if [ -n "${http_proxy:-}" ]; then
    #    lxd.lxc exec my-nesting-ubuntu -- \
    #        lxd.lxc exec my-inner-ubuntu -- \
    #            sh -c "echo http_proxy=$http_proxy >> /etc/environment"
    #fi
    #if [ -n "${https_proxy:-}" ]; then
    #    lxd.lxc exec my-nesting-ubuntu -- \
    #        lxd.lxc exec my-inner-ubuntu -- \
    #            sh -c "echo https_proxy=$https_proxy >> /etc/environment"
    #fi
    #lxd.lxc exec my-nesting-ubuntu -- \
    #    lxd.lxc exec my-inner-ubuntu -- \
    #        /root/prep-snapd-in-lxd.sh

    #not lxd.lxc exec my-nesting-ubuntu -- \
    #    lxd.lxc exec my-inner-ubuntu -- \
    #        snap install test-snapd-sh 2>stderr.log
    # replace newlines with spaces to get one long line
    #tr '\n' ' ' < stderr.log | MATCH "error:\s+system\s+does\s+not\s+fully\s+support\s+snapd:\s+apparmor\s+detected\s+but\s+insufficient\s+permissions\s+to\s+use\s+it"

    echo "Install lxd-demo server to exercise the lxd interface"
    snap install lxd-demo-server
    snap connect lxd-demo-server:lxd lxd:lxd

    echo "Check that we error in 'unconfined' lxd containers"
    lxd.lxc config show my-ubuntu > conf.yaml
    cat <<EOF >> conf.yaml
    config:
      raw.lxc: |
        lxc.apparmor.profile=unconfined
    EOF
    lxd.lxc stop --force my-ubuntu
    lxd.lxc config edit my-ubuntu < conf.yaml
    lxd.lxc start my-ubuntu
    # shellcheck disable=SC2016
    lxd.lxc exec my-ubuntu -- sh -c 'set -x;for i in $(seq 120); do if journalctl -u snapd.service | grep -E "apparmor detected but insufficient permissions to use it"; then break; fi; sleep 1; done'
    lxd.lxc exec my-ubuntu -- journalctl -u snapd | MATCH "apparmor detected but insufficient permissions to use it"
