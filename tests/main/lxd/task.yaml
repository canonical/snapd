summary: Ensure that lxd works

# only run this on ubuntu 16+, lxd will not work on !ubuntu systems
# currently nor on ubuntu 14.04
systems: [ubuntu-16*, ubuntu-18*, ubuntu-2*, ubuntu-core-*]

# autopkgtest run only a subset of tests that deals with the integration
# with the distro
backends: [-autopkgtest]

# lxd downloads can be quite slow
kill-timeout: 25m

# Start before anything else as it can take a really long time.
priority: 1000

prepare: |
    # using apt here is ok because this test only runs on ubuntu
    echo "Remove any installed debs (some images carry them) to ensure we test the snap"
    if command -v apt; then
        apt autoremove -y lxd
    fi

restore: |
    if  [[ "$(find "$GOHOME" -name 'snapd_*.deb' | wc -l || echo 0)" -eq 0 ]]; then
        exit
    fi

    lxd.lxc stop my-ubuntu --force
    lxd.lxc delete my-ubuntu

debug: |
    # shellcheck source=tests/lib/journalctl.sh
    . "$TESTSLIB/journalctl.sh"

    # debug output from lxd
    get_journalctl_log -u snap.lxd.daemon.service

execute: |
    if  [[ "$(find "$GOHOME" -name 'snapd_*.deb' | wc -l || echo 0)" -eq 0 ]]; then
        echo "No run lxd test when there are not .deb files built"
        exit
    fi

    wait_for_lxd(){
        while ! printf 'GET / HTTP/1.0\n\n' | nc -U /var/snap/lxd/common/lxd/unix.socket | MATCH '200 OK'; do sleep 1; done
    }

    echo "Install lxd"
    snap install --candidate lxd

    echo "Create a trivial container using the lxd snap"
    wait_for_lxd
    lxd init --auto

    echo "Setting up proxy for lxc"
    if [ -n "${http_proxy:-}" ]; then
        lxd.lxc config set core.proxy_http "$http_proxy"
    fi
    if [ -n "${https_proxy:-}" ]; then
        lxd.lxc config set core.proxy_https "$http_proxy"
    fi

    # The snapd package we build as part of the tests will only run on the
    # distro we build on. So we need to launch the right ubuntu version.
    . /etc/os-release
    lxd.lxc launch "ubuntu:${VERSION_ID}" my-ubuntu

    echo "Ensure we can run things inside"
    lxd.lxc exec my-ubuntu echo hello | MATCH hello

    echo "Cleanup container"
    lxd.lxc exec my-ubuntu -- apt autoremove --purge -y snapd ubuntu-core-launcher

    echo "Install snapd"
    lxd.lxc exec my-ubuntu -- mkdir -p "$GOHOME"
    lxd.lxc file push "$GOHOME"/snapd_*.deb "my-ubuntu/$GOPATH/"
    lxd.lxc exec my-ubuntu -- apt install -y "$GOHOME"/snapd_*.deb

    echo "Setting up proxy *inside* the container"
    if [ -n "${http_proxy:-}" ]; then
        lxd.lxc exec my-ubuntu -- sh -c "echo http_proxy=$http_proxy >> /etc/environment"
    fi
    if [ -n "${https_proxy:-}" ]; then
        lxd.lxc exec my-ubuntu -- sh -c "echo https_proxy=$https_proxy >> /etc/environment"
    fi
    lxd.lxc exec my-ubuntu -- systemctl daemon-reload
    lxd.lxc exec my-ubuntu -- systemctl restart snapd.service
    lxd.lxc exec my-ubuntu -- cat /etc/environment

    # FIXME: ensure that the kernel running is recent enough, this
    #        will only work with an up-to-date xenial kernel (4.4.0-78+)

    echo "Ensure we can use snapd inside lxd"
    lxd.lxc exec my-ubuntu snap install test-snapd-tools
    echo "And we can run snaps as regular users"
    lxd.lxc exec my-ubuntu -- su -c "/snap/bin/test-snapd-tools.echo from-the-inside" ubuntu | MATCH from-the-inside
    echo "And as root"
    lxd.lxc exec my-ubuntu -- test-snapd-tools.echo from-the-inside | MATCH from-the-inside
    echo "We can also remove snaps successfully"
    lxd.lxc exec my-ubuntu -- snap remove test-snapd-tools

    echo "Install lxd-demo server to exercise the lxd interface"
    snap install lxd-demo-server
    snap connect lxd-demo-server:lxd lxd:lxd
