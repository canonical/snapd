summary: cases where tracking applications and hooks with cgroups does not work
details: |
    Cgroup-based application process tracking is implemented using the systemd DBus
    API org.freedesktop.systemd1.Manager.StartTransientUnit. While exactly what we
    need in spirit, in practice there are limitations that have been overcome only
    starting with systemd version 238.
systems:
    - ubuntu-14.04-*
    - ubuntu-16.04-*
    - ubuntu-18.04-*
    - ubuntu-20.04-*
    - ubuntu-core-16-*
    - ubuntu-core-18-*
    - ubuntu-core-20-*
prepare: |
    truncate --size=0 defer.sh
    chmod +x defer.sh
    # This feature depends on the release-app-awareness feature
    snap set core experimental.refresh-app-awareness=true
    echo 'snap unset core experimental.refresh-app-awareness' >> defer.sh
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    install_local test-snapd-sh
    echo 'snap remove --purge test-snapd-sh' >> defer.sh
restore: |
    tac defer.sh > refed.sh
    sh -xe refed.sh && rm -f {defer,refed}.sh
    rm -f phase.txt debug.txt cgroup.txt ps.txt run.txt
execute: |
    ## Phase 1: user is -root, dbus user session is not (manually) installed
    echo "run a snap app as a root user" >phase.txt
    find /run/user/0 >run.txt
    SNAPD_DEBUG=1 snap run test-snapd-sh.sh -c 'exec cat /proc/self/cgroup' >cgroup.txt 2>debug.txt
    case "$SPREAD_SYSTEM" in
        ubuntu-14.04-*)
            # On Ubuntu 14.04 there is no session bus, there is no systemd
            # running as pid 1.  We fall back to the system bus where we
            # activate the systemd-shim, which provides various systemd DBus
            # APIs through non-systemd implementation. The shim does not
            # implement StartTransientUnit so we give up and carry on.
            #
            # Interestingly the deputy systemd does not seem to be connected to
            # dbus at all.
            /snap/core/current/usr/bin/busctl --system | MATCH 'org.freedesktop.systemd1 +[0-9]+ systemd-shim +root +:1.[0-9]+ +- +- +-'
            ps aux | MATCH 'systemd --system'
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: using system bus now, session bus was not available' <debug.txt
            # NOTE: the dots before and after StartTransientUnit repsent single quotes, it's just easier to write this way.
            MATCH 'DEBUG: StartTransientUnit failed with "org.freedesktop.DBus.Error.UnknownMethod": \[No such method .StartTransientUnit.\]' <debug.txt
            MATCH 'DEBUG: snapd cannot track the started application' <debug.txt

            # Interestingly there are two name= control groups, one for "systemd"
            # and one for "dsystemd" (deputy) though it seems that the dsystemd
            # group is not used.
            MATCH '1:name=systemd:/user/0.user/1.session' <cgroup.txt
            MATCH '2:name=dsystemd:/' <cgroup.txt
            ;;
        ubuntu-16.04-*|ubuntu-core-16-*)
            # On Ubuntu 16.04 with systemd 229 there is no session bus so we
            # use the system bus. The request succeeds and works correctly.
            # Core 16 behaves the same way.
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: falling back to system bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/system.slice/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
        ubuntu-18.04-*)
            # On Ubuntu 18.04 with systemd 237, for root, everything works out of the box.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
        ubuntu-core-18-*)
            # On Ubuntu Core 18 we end up in system.slice instead, as there is no session bus on core.
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: falling back to system bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/system.slice/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
        ubuntu-20.04-*)
            # On Ubuntu 20.04 with systemd 245 everything is correct.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
        ubuntu-core-20-*)
            # On Ubuntu Core 20 we fall back to system bus as there is no session bus on core.
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: falling back to system bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
    esac

    # Notably we still use the freezer control group. It can be used on all
    # v1 systems to locate snaps, although it doesn't have the granularity
    # required to identify particular applications.
    MATCH '[0-9]+:freezer:/snap.test-snapd-sh' <cgroup.txt

    if [ "$(command -v busctl)" == "" ]; then
        # The remainder of the test relies on session-tool which requires
        # busctl. This effectively cuts 14.04 support.
        exit 0
    fi

    # Let's see what happens when we have the session bus available. Install
    # the package that provides the socket on versions of Ubuntu that don't
    # have it.
    if [ ! -e /usr/lib/systemd/user/dbus.socket ]; then
        if [ -d /writable ]; then
            # We'd like to install the dbus-user-session but this is core so we
            # cannot do that. The remainder of the test is skipped.
            case "$SPREAD_SYSTEM" in
                ubuntu-core-1[68]-*)
                    exit 0
                    ;;
                ubuntu-core-20-*)
                    exit 0
                    ;;
            esac
            # To catch core-22 and re-evaluate.
            false
        fi
        apt-get install -y dbus-user-session
        echo 'apt-get remove --purge -y dbus-user-session' >> defer.sh
    fi

    ## Phase 2: user is root, dbus user session is installed
    echo "run a snap app as a root user, having the session bus installed" >phase.txt
    session-tool --prepare -u root
    find /run/user/0 >run.txt
    case "$SPREAD_SYSTEM" in
        ubuntu-16.04-*)
            # This version of ubuntu does not use systemd --user so the root
            # user does not get the session bus socket. Non-root users use
            # upstart for services, including dbus, so this functionality works
            # in the case below.
            not test -S /run/user/0/bus
            ;;
        ubuntu-18.04-*)
            test -S /run/user/0/bus
            ;;
        ubuntu-20.04-*)
            test -S /run/user/0/bus
            ;;
    esac
    SNAPD_DEBUG=1 session-tool -u root snap run test-snapd-sh.sh -c 'exec cat /proc/self/cgroup' >cgroup.txt 2>debug.txt
    session-tool --restore -u root
    case "$SPREAD_SYSTEM" in
        ubuntu-16.04-*)
            # There is no session bus so we fall back to the system bus,
            # because the calling user is root, and everything works correctly.
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: using system bus now, session bus was not available' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/system.slice/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
        ubuntu-18.04-*)
            # There is a session bus and everything works correctly.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
        ubuntu-20.04-*)
            # There is a session bus and everything works correctly.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
    esac

    ## Phase 3: user is non-root, dbus user session is installed
    echo "run a snap app as a test user, having the session bus installed" >phase.txt
    session-tool --prepare -u test
    find /run/user/12345 >run.txt
    ps -u test >ps.txt
    test "$(wc -l <ps.txt)" -gt 1
    test -S /run/user/12345/bus
    SNAPD_DEBUG=1 session-tool -u test snap run test-snapd-sh.sh -c 'exec cat /proc/self/cgroup' >cgroup.txt 2>debug.txt
    session-tool --restore -u test
    case "$SPREAD_SYSTEM" in
        ubuntu-16.04-*)
            # There is a session bus, we activate systemd --user and everything
            # works.
            #
            # XXX: Why does it pass here but fails in Ubuntu 18.04? Could this
            # be related to the version of the kernel? Perhaps the security
            # check in the kernel only exists since a particular version?
            #
            # XXX: could it be also relatd to activation of systemd --user and,
            # perhaps, correct ownership of of the source and destination
            # cgroup? In 18.04 systemd --user runs automatically on session
            # startup, in 16.04 it does not.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-12345.slice/user@12345.service/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
        ubuntu-18.04-*)
            # There is a session bus, there is systemd --user but it doesn't
            # implement the workaround for kernel cgroup transition policy so
            # we don't get tracking.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH 'DEBUG: systemd could not associate process [0-9]+ with transient scope snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <debug.txt
            MATCH 'DEBUG: snapd cannot track the started application' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-12345.slice/session-c[0-9]+.scope' <cgroup.txt
            ;;
        ubuntu-20.04-*)
            # There is a session bus, there is systemd --user and it performs
            # the cgroup transition with the help of systemd --system.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: created transient scope as object: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-12345.slice/user@12345.service/snap.[0-9a-f-]+.test-snapd-sh.sh.scope' <cgroup.txt
            ;;
    esac

debug: |
    test -e phase.txt && cat phase.txt
    test -e run.txt && cat run.txt
    test -e debug.txt && head -n 10 debug.txt
    test -e cgroup.txt && cat cgroup.txt
    test -e ps.txt && cat ps.txt
