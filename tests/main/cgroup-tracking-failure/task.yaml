summary: cases where tracking applications and hooks with cgroups does not work

details: |
    Cgroup-based application process tracking is implemented using the systemd
    DBus API org.freedesktop.systemd1.Manager.StartTransientUnit. While exactly
    what we need in spirit, in practice there are limitations that have been
    overcome only starting with systemd version 238, which can forward a
    request from systemd --user to systemd pid one, to perform some cgroup
    transitions that the kernel normally does not allow.

systems:
    - ubuntu-14.04-*
    - ubuntu-16.04-*  # tracking works correctly, caveats apply
    - ubuntu-18.04-*
    - ubuntu-20.04-*  # tracking works correctly, for completeness
    - ubuntu-21*
    - ubuntu-core-16-*
    - ubuntu-core-18-*
    - ubuntu-core-20-*  # tracking works correctly, for completeness

prepare: |
    # This feature depends on the release-app-awareness feature
    snap set core experimental.refresh-app-awareness=true
    tests.cleanup defer snap unset core experimental.refresh-app-awareness
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh
    tests.cleanup defer snap remove --purge test-snapd-sh

restore: |
    systemctl --user stop dbus.service || true

debug: |
    set +e  # any of the files below may not exist and this causes the command to be indicated as failure
    test -e scenario.txt && cat scenario.txt
    test -e run.txt && cat run.txt
    test -e debug.txt && head -n 10 debug.txt
    test -e cgroup.txt && cat cgroup.txt
    test -e ps.txt && cat ps.txt
    set -e

execute: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB/systems.sh"
    ## Scenario 1: user is root.
    # Note that the images we are working with have the dbus-session-bus
    # package pre-installed. To exercise the case that is similar to real
    # systems, where snapd does not depend on this package and it is not
    # pre-installed on standard images, we mask the dbus.socket for the user
    # session. This is done for Ubuntu 16.04 and 18.04, because only 20.04
    # started shipping dbus-user-session in all the images.
    echo "run a snap app as a root user, without session bus" >scenario.txt
    find /run/user/0 >run.txt
    case "$SPREAD_SYSTEM" in
        ubuntu-1[68].04-*)
            systemctl --user stop dbus.{socket,service}
            systemctl --user mask dbus.socket
            SNAPD_DEBUG=1 snap run test-snapd-sh.sh -c 'exec cat /proc/self/cgroup' >cgroup.txt 2>debug.txt
            systemctl --user unmask dbus.socket || true
            systemctl --user start dbus.{socket,service}
            ;;
        *)
            SNAPD_DEBUG=1 snap run test-snapd-sh.sh -c 'exec cat /proc/self/cgroup' >cgroup.txt 2>debug.txt
            ;;
    esac
    case "$SPREAD_SYSTEM" in
        ubuntu-14.04-*)
            # On Ubuntu 14.04 there is no session bus, there is no systemd
            # running as pid 1. We fall back to the system bus where we
            # activate the systemd-shim, which provides various systemd DBus
            # APIs through non-systemd implementation. The shim does not
            # implement StartTransientUnit so we give up and carry on.
            #
            # Interestingly the deputy systemd does not seem to be connected to
            # dbus at all.
            /snap/core/current/usr/bin/busctl --system | MATCH 'org.freedesktop.systemd1 +[0-9]+ systemd-shim +root +:1.[0-9]+ +- +- +-'
            ps aux | MATCH 'systemd --system'
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: using system bus now, session bus was not available' <debug.txt
            # NOTE: the dots before and after StartTransientUnit represent single quotes, it's just easier to write this way.
            MATCH 'DEBUG: StartTransientUnit failed with "org.freedesktop.DBus.Error.UnknownMethod": \[No such method .StartTransientUnit.\]' <debug.txt
            MATCH 'DEBUG: snapd cannot track the started application' <debug.txt

            # Interestingly there are two name= control groups, one for "systemd"
            # and one for "dsystemd" (deputy) though it seems that the dsystemd
            # group is not used.
            MATCH '1:name=systemd:/user/0.user/1.session' <cgroup.txt
            MATCH '2:name=dsystemd:/' <cgroup.txt
            ;;
        ubuntu-16.04-*)
            # On Ubuntu 16.04 with systemd 229, without access to the session
            # bus, we fall back to the system bus.
            MATCH 'DEBUG: using system bus now, session bus was not available' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/system.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-18.04-*)
            # On Ubuntu 18.04 with systemd 237, without access to the session
            # bus, we fall back to the system bus.
            MATCH 'DEBUG: using system bus now, session bus was not available' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/system.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-20.04-*)
            # On Ubuntu 20.04 with systemd 245 everything works correctly.
            # Note that on this system we no longer test the variant without
            # session bus, as that is not considered a customization anymore.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-21.04-*)
            # Same as Ubuntu 20.04, but the cgroup path is slightly different
            # with that version of systemd
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/app.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-21.10-*)
            # Ubuntu 21.10 uses unified cgroup hierarchy, where we wait
            # for the systemd to complete the job that creates a transient scope
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH 'DEBUG: transient scope snap.test-snapd-sh.sh.[0-9a-f-]+.scope created' <debug.txt
            MATCH '0::/user.slice/user-0.slice/user@0.service/app.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-core-16-*)
            # On Ubuntu Core 16.04 with systemd 229 there is no session bus so we
            # use the system bus. The request succeeds and works correctly.
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: falling back to system bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/system.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-core-18-*)
            # On Ubuntu Core 18 behaves exactly the same as Ubuntu Core 16.
            MATCH 'DEBUG: session bus is not available: cannot find session bus' <debug.txt
            MATCH 'DEBUG: falling back to system bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/system.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-core-20-*)
            # On Ubuntu Core 20 everything is correct.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/snap.test-snapd.sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        *)
            echo "unexpected system $SPREAD_SYSTEM"
            exit 1
            ;;
    esac

    if ! is_cgroupv2; then
        # Notably we still use the freezer control group. It can be used on all
        # v1 systems to locate snaps, although it doesn't have the granularity
        # required to identify particular applications.
        MATCH '[0-9]+:freezer:/snap.test-snapd-sh' <cgroup.txt
    fi

    if [ "$(command -v busctl)" == "" ]; then
        # The remainder of the test relies on tests.session which requires
        # busctl. This effectively cuts 14.04 support.
        exit 0
    fi

    # The remaining tests require a dbus session bus. On Ubuntu Core systems
    # that is available starting with Core 20 so bail out of the remainder of
    # the test on those systems.
    if [ ! -e /usr/lib/systemd/user/dbus.socket ] &&  [ -d /writable ]; then
        case "$SPREAD_SYSTEM" in
            ubuntu-core-1[68]-*)
                exit 0
                ;;
        esac
    fi

    ## Scenario 2: user is root.
    echo "run a snap app as a root user, with session bus" >scenario.txt
    tests.session -u root prepare
    test -S /run/user/0/bus
    SNAPD_DEBUG=1 tests.session -u root exec snap run test-snapd-sh.sh -c 'exec cat /proc/self/cgroup' >cgroup.txt 2>debug.txt
    tests.session -u root restore
    MATCH 'DEBUG: using session bus' <debug.txt
    MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
    if is_cgroupv2; then
        MATCH 'DEBUG: transient scope snap.test-snapd-sh.sh.[0-9a-f-]+.scope created' <debug.txt
        MATCH '0::/user.slice/user-0.slice/user@0.service/app.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
    else
        MATCH '1:name=systemd:/user.slice/user-0.slice/user@0.service/(app.slice/)?snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
    fi

    ## Scenario 3: user is non-root, dbus user session is installed
    echo "run a snap app as a test user, having the session bus installed" >scenario.txt
    tests.session -u test prepare
    find /run/user/12345 >run.txt
    ps -u test >ps.txt
    test "$(wc -l <ps.txt)" -gt 1
    test -S /run/user/12345/bus
    SNAPD_DEBUG=1 tests.session -u test exec snap run test-snapd-sh.sh -c 'exec cat /proc/self/cgroup' >cgroup.txt 2>debug.txt
    tests.session -u test restore
    case "$SPREAD_SYSTEM" in
        ubuntu-16.04-*)
            # There is a session bus, we activate systemd --user and everything
            # works.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-12345.slice/user@12345.service/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-18.04-*)
            # There is a session bus, there is systemd --user but it doesn't
            # implement the workaround for kernel cgroup transition policy so
            # we don't get tracking.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH 'DEBUG: systemd could not associate process [0-9]+ with transient scope snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <debug.txt
            MATCH 'DEBUG: snapd cannot track the started application' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-12345.slice/session-c[0-9]+.scope' <cgroup.txt
            ;;
        ubuntu-20.04-*|ubuntu-core-20-*)
            # There is a session bus, there is systemd --user and it performs
            # the cgroup transition with the help of systemd --system.
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-12345.slice/user@12345.service/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-21.04-*)
            # Same as Ubuntu 20.04, but the cgroup path is slightly different
            # with that version of systemd
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH '1:name=systemd:/user.slice/user-12345.slice/user@12345.service/app.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        ubuntu-21.10-*)
            # Same as Ubuntu 20.04, but the system uses a unified cgroup hierarchy
            MATCH 'DEBUG: using session bus' <debug.txt
            MATCH 'DEBUG: create transient scope job: /org/freedesktop/systemd1/job/[0-9]+' <debug.txt
            MATCH 'DEBUG: transient scope snap.test-snapd-sh.sh.[0-9a-f-]+.scope created' <debug.txt
            MATCH '0::/user.slice/user-12345.slice/user@12345.service/app.slice/snap.test-snapd-sh.sh.[0-9a-f-]+.scope' <cgroup.txt
            ;;
        *)
            echo "unexpected system $SPREAD_SYSTEM"
            exit 1
            ;;
    esac
