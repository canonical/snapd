summary: Ensure that ECONNRESET is handled
restore: |
    echo "Remove the firewall rule again"
    iptables -D OUTPUT -m owner --uid-owner $(id -u test) -j REJECT  -p tcp --reject-with tcp-reset

    rm -f test-snapd-huge_*

execute: |
    echo "Downloading a large snap in the background"
    su -c "/usr/bin/env SNAPD_DEBUG=1 snap download --edge test-snapd-huge 2>snap-download.log" test &

    echo "Wait until the download started and downloaded more than 1 MB"
    for i in $(seq 20); do
        if partial=$(ls test-snapd-huge_*.snap.partial | head -1); then
            if [ $(stat -c%s "$partial") -gt $(( 1024 * 1024 )) ]; then
                break
            fi
        fi
        sleep .5
    done

    if [ ! -f "$partial" ] || [ $(stat -c%s "$partial") -eq 0 ]; then
        echo "Partial file $partial did not start downloading, test broken"
        exit 1
    fi

    echo "Block the download using iptables"
    iptables -I OUTPUT -m owner --uid-owner $(id -u test) -j REJECT -p tcp --reject-with tcp-reset

    echo "Check that we retried"
    for i in $(seq 10); do
        if [ cat snap-download.log | MATCH "Retrying.*\.snap, attempt 2" ]; then
            break
        fi
        sleep 1
    done
    cat snap-download.log | MATCH "Retrying.*\.snap, attempt 2"

    # Note that the download will not be successful because of the nature of
    # the netfilter testbed. When snap download retries the next attempt will
    # end up with a "connection refused" error, something we do not retry
