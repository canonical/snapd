summary: Ensure that ECONNRESET is handled
restore: |
    echo "Stop the snap download command"
    kill -9 "$(pgrep -f 'snap download')" || true

    echo "Remove the firewall rule again"
    iptables -D OUTPUT -m owner --uid-owner "$(id -u test)" -j REJECT -p tcp --reject-with tcp-reset || true
    echo "Remove ingress traffic policing rule"
    iptables -D INPUT -p tcp --match hashlimit --hashlimit-mode srcip,dstip,srcport,dstport --hashlimit-above 512kb/s \
             --hashlimit-name 'econnreset' -j DROP

    rm -f test-snapd-huge_*

# autopkgtest run only a subset of tests that deals with the integration
# with the distro
backends: [-autopkgtest]

# no iptables on core18 yet
systems: [-ubuntu-core-18-*]

debug: |
    echo "Partial download status"
    ls -lh test-snapd-huge_* || true
    echo "other dir content"
    ls -lh
    echo "download log:"
    cat snap-download.log
    echo "iptables rules and counters"
    iptables -L -n -v

execute: |
    echo "Downloading a large snap in the background"
    rm -f test-snapd-huge_*
    # what happens in this test is that when running in GCE backend, the
    # downloads is very fast, ~100MB/s and it may finish 'before' we insert the
    # OUTPUT chain rule that drops outgoing TCP packets and triggers retries, to
    # remedy this apply policing of ingress traffic down to 512kB/s
    iptables -I INPUT -p tcp --match hashlimit --hashlimit-mode srcip,dstip,srcport,dstport --hashlimit-above 512kb/s \
             --hashlimit-name 'econnreset' -j DROP

    su -c "/usr/bin/env SNAPD_DEBUG=1 SNAPD_DEBUG_HTTP=3 snap download --edge test-snapd-huge 2>snap-download.log" test &

    echo "Wait until the download started and downloaded more than 1 MB"
    echo "starting: $(date)"
    for _ in $(seq 120); do
        partial=$(find . -name 'test-snapd-huge_*.snap.partial' | head -1)
        if [ -n "$partial" ] && [ "$(stat -c%s "$partial")" -gt "$(( 1024 * 1024 ))" ]; then
            break
        fi
        sleep 0.5
    done

    if [ ! -f "$partial" ] || [ "$(stat -c%s "$partial")" -eq 0 ]; then
        echo "Partial file $partial did not start downloading, test broken"
        kill -9 "$(pgrep -f 'snap download')" || true
        exit 1
    fi

    if [ -n "$(find . -name 'test-snapd-huge_*.snap')" ]; then
        echo "File fully downloaded before the test could act"
        echo "Test broken"
        echo "end: $(date)"
        kill -9 "$(pgrep -f 'snap download')" || true
        exit 1
    fi

    echo "Block the download using iptables"
    iptables -I OUTPUT -m owner --uid-owner "$(id -u test)" -j REJECT -p tcp --reject-with tcp-reset

    echo "Check that we retried"
    for _ in $(seq 20); do
        if MATCH 'Retrying.*\.snap, attempt 2' < snap-download.log; then
            break
        fi
        sleep .5
    done

    if [ -n "$(find . -name 'test-snapd-huge_*.snap')" ]; then
        echo "File fully downloaded even after iptables was applied"
        echo "Test broken"
        echo "end: $(date)"
        exit 1
    fi

    MATCH 'Retrying.*\.snap, attempt 2' < snap-download.log

    # Note that the download will not be successful because of the nature of
    # the netfilter testbed. When snap download retries the next attempt will
    # end up with a "connection refused" error, something we do not retry
