summary: Ensure that the ubuntu-core -> core transition works with two cores

# we never test on core because the transition can only happen on "classic"
# we disable on ppc64el because the downloads are very slow there
systems: [-ubuntu-core-16-*, -ubuntu-*-ppc64el]

warn-timeout: 1m
kill-timeout: 5m
execute: |
    . "$TESTSLIB/apt.sh"
    echo "Ensure we have two cores"
    apt install -y jq

    echo "install a snap"
    snap install test-snapd-python-webserver
    snap interfaces |MATCH ":network.*test-snapd-python-webserver"

    . "$TESTSLIB/names.sh"
    cp /var/lib/snapd/state.json /var/lib/snapd/state.json.old
    cat /var/lib/snapd/state.json.old |jq -r '.data.snaps["core"].type="xxx"' > /var/lib/snapd/state.json

    systemctl stop snapd.service snapd.socket
    systemctl start snapd.service snapd.socket

    snap download --${CORE_CHANNEL} ubuntu-core
    snap ack ./ubuntu-core_*.assert
    snap install ./ubuntu-core_*.snap

    cp /var/lib/snapd/state.json /var/lib/snapd/state.json.old
    cat /var/lib/snapd/state.json.old |jq -r '.data.snaps["core"].type="os"' > /var/lib/snapd/state.json

    snap list | MATCH "ubuntu-core "
    snap list | MATCH "core "

    echo "Ensure transition is triggered"
    snap debug ensure-state-soon

    . $TESTSLIB/changes.sh
    while ! snap changes|grep ".*Done.*Transition ubuntu-core to core"; do
        snap changes
        snap change $(change_id "Transition ubuntu-core to core")||true
        sleep 1
    done

    if snap list|grep ubuntu-core; then
        echo "ubuntu-core still installed, transition failed"
        exit 1
    fi
    snap interfaces |MATCH ":network.*test-snapd-python-webserver"

    echo "Ensure interfaces are connected"
    snap interfaces | MATCH ":core-support.*core:core-support-plug"
