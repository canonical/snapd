summary: Run update/rollback tests
systems: [ubuntu-core-16-64, ubuntu-core-16-arm-64, ubuntu-core-16-arm-32]
restore: |
    rm -f nextBoot
debug: |
    cat /proc/cmdline
    if [ $(which grub-editenv) ]; then
        grub-editenv list
    else
        fw_printenv |grep ^snap
    fi
execute: |
    . "$TESTSLIB/names.sh"
    . "$TESTSLIB/boot.sh"

    wait_boot_ok() {
        echo "Waiting for boot-ok to finish"
        while [ $(bootenv snap_mode) != "" ]; do
            # debug output
            bootenv snap_mode
            sleep 1
        done
    }
    check_boot() {
        # debug output
        bootenv
        test "$(bootenv snap_core)" = "${core_name}_$(cat nextBoot).snap"
    }
    store_next_boot() {
        snap list|grep ${core_name}|tr -s " "|cut -f3 -d' ' > nextBoot
        # debug output
        snap list
        echo "nextBoot:"
        cat nextBoot
    }
    echo "Install/revert a couple of times and see if stuff breaks"
    if [ "$SPREAD_REBOOT" = "0" ]; then
        snap list|grep ${core_name}|tr -s " "|cut -f3 -d' ' > firstBoot
        # debug output
        snap list
        echo "firstBoot:"
        cat firstBoot
        echo "Install new ${core_name}"
        snap install --dangerous /var/lib/snapd/snaps/${core_name}_$(cat firstBoot).snap
        store_next_boot
        REBOOT
    fi
    if [ "$SPREAD_REBOOT" = "1" ]; then
        wait_boot_ok
        check_boot
        snap revert ${core_name}
        store_next_boot
        REBOOT
    fi
    if [ "$SPREAD_REBOOT" = "2" ]; then
        wait_boot_ok
        check_boot
        snap install --dangerous /var/lib/snapd/snaps/${core_name}_$(cat firstBoot).snap
        store_next_boot
        REBOOT
    fi
    if [ "$SPREAD_REBOOT" = "3" ]; then
        wait_boot_ok
        check_boot
        snap revert ${core_name}
        store_next_boot
        REBOOT
    fi
    if [ "$SPREAD_REBOOT" = "4" ]; then
        wait_boot_ok
        check_boot

        test "$(bootenv snap_core)" = "${core_name}_$(cat firstBoot).snap"
    fi
