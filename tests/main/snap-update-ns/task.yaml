summary: smoke test for snap-update-ns

details: |
    Snapd is growing a new executable, snap-update-ns, to modify an existing
    mount namespace.  This is further documented on the forum here
    https://forum.snapcraft.io/t/fixing-live-propagation-of-mount-changes/23

    While the implementation matures this test checks that we call setns
    correctly (and it doesn't fail) enough that we reach the "not implemented"
    message that is currently in snap-updates-ns

environment:
    # I made far too many typos when those were literals in the code below.
    PLUG_SNAP: test-snapd-content-plug
    SLOT_SNAP: test-snapd-content-slot

prepare: |
    # NOTE: those are installed locally so that they are not connected because
    # of missing assertions. We are installing the slot before the plug snap so
    # that there's no attempt to load the default provider. Just in case
    # something changes we're disconnecting them so that tests are predictable.
    "$TESTSTOOLS"/snaps-state install-local "$SLOT_SNAP"
    "$TESTSTOOLS"/snaps-state install-local "$PLUG_SNAP"
    snap disconnect "$PLUG_SNAP:shared-content-plug" || :
    # Ensure there is no preserved mount namespace of the -plug snap.
    # (This one gets created because by connect hooks).
    snapd.tool exec snap-discard-ns "$PLUG_SNAP"
    rm -f "/run/snapd/ns/$PLUG_SNAP.mnt"

execute: |
    # NOTE: All the commands here will focus on the -plug snap as this is where
    # the mount namespace is going to be altered. The -slot snap is just there
    # inert, as a way to provide content, but it does not execute and does not
    # need a namespace namespace.

    # Check that update tool doesn't fail if there is no namespace yet.
    snapd.tool exec snap-update-ns "$PLUG_SNAP"

    # Run a trivial command to build and preserve a mount namespace.
    snap run --shell "$PLUG_SNAP.content-plug" -c 'true'

    # Check that the shared content is not mounted.
    #shellcheck disable=SC2016
    snap run --shell "$PLUG_SNAP.content-plug" -c 'test ! -e $SNAP/import/shared-content'

    # Run snap-update-ns to see that we managed to switch namespaces correctly
    # and did nothing more. We did nothing more because the namespace already
    # is exactly as it needs to be. The snap-confine program has just
    # constructed it according to the desired description.
    diff -Nu "/var/lib/snapd/mount/snap.$PLUG_SNAP.fstab" "/run/snapd/ns/snap.$PLUG_SNAP.fstab"
    snapd.tool exec snap-update-ns "$PLUG_SNAP"
    diff -Nu "/var/lib/snapd/mount/snap.$PLUG_SNAP.fstab" "/run/snapd/ns/snap.$PLUG_SNAP.fstab"

    # Connect the plug to the slot.
    snap connect "$PLUG_SNAP:shared-content-plug" "$SLOT_SNAP:shared-content-slot"

    # Run the update tool manually to see that it is idempotent.
    diff -Nu "/var/lib/snapd/mount/snap.$PLUG_SNAP.fstab" "/run/snapd/ns/snap.$PLUG_SNAP.fstab"
    snapd.tool exec snap-update-ns "$PLUG_SNAP"
    diff -Nu "/var/lib/snapd/mount/snap.$PLUG_SNAP.fstab" "/run/snapd/ns/snap.$PLUG_SNAP.fstab"

    # Check that the shared content is mounted.
    #shellcheck disable=SC2016
    snap run --shell "$PLUG_SNAP.content-plug" -c 'test -e $SNAP/import/shared-content'

    # Disconnect the plug from the slot so that we can test the other way.
    snap disconnect "$PLUG_SNAP:shared-content-plug" "$SLOT_SNAP:shared-content-slot"

    # Run the update tool manually to see that it is idempotent.
    diff -uN "/var/lib/snapd/mount/snap.$PLUG_SNAP.fstab" "/run/snapd/ns/snap.$PLUG_SNAP.fstab"
    snapd.tool exec snap-update-ns "$PLUG_SNAP"
    diff -uN "/var/lib/snapd/mount/snap.$PLUG_SNAP.fstab" "/run/snapd/ns/snap.$PLUG_SNAP.fstab"

    # Check that the shared content is not mounted.
    #shellcheck disable=SC2016
    snap run --shell "$PLUG_SNAP.content-plug" -c 'test ! -e $SNAP/import/shared-content'

    # Discard the namespace so that update has nothing useful to do.
    snapd.tool exec snap-discard-ns "$PLUG_SNAP"
    snapd.tool exec snap-update-ns "$PLUG_SNAP"
