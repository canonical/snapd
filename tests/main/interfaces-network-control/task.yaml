summary: Ensure that the network-control interface works.

details: |
    The network-control interface allows a snap to configure networking.

    A snap which defines the network-control plug must be shown in the interfaces list.
    The plug must not be autoconnected on install and, as usual, must be able to be
    reconnected.

    A snap declaring a plug on this interface must be able to modify the network configuration
    and ask for its status, the test sets up a network service, gets information about it (read
    capability) and creates an arp entry (write capability).

# ubuntu-14.04: systemd-run not supported
systems: [-fedora-*, -opensuse-*, -ubuntu-14.04*]

environment:
    PORT: 8081
    SERVICE_NAME: "test-service"
    ARP_ENTRY_ADDR: "30.30.30.30"

prepare: |
    echo "Given a snap declaring a plug on the network-control interface is installed"
    "$TESTSTOOLS"/snaps-state install-local network-control-consumer

    echo "And a network service is up"
    # shellcheck source=tests/lib/network.sh
    . "$TESTSLIB"/network.sh
    make_network_service "$SERVICE_NAME" "$PORT"

restore: |
    #shellcheck source=tests/lib/network.sh
    . "$TESTSLIB/network.sh"

    systemctl stop "$SERVICE_NAME"
    arp -d "$ARP_ENTRY_ADDR" -i "$(get_default_iface)" || true

    ip netns delete test-ns || true
    ip link delete veth0 || true
    umount /run/netns || true

execute: |
    #shellcheck source=tests/lib/network.sh
    . "$TESTSLIB/network.sh"

    INTERFACE=$(get_default_iface)

    echo "Then the plug disconnected by default"
    snap interfaces -i network-control | MATCH "^- +network-control-consumer:network-control$"

    echo "When the plug is connected"
    snap connect network-control-consumer:network-control

    echo "Then the snap command can query network status information"
    network-control-consumer.cmd ss -lnt | MATCH "LISTEN.*:$PORT"

    if [ "$(snap debug confinement)" = strict ] ; then
        echo "When the plug is disconnected"
        snap disconnect network-control-consumer:network-control

        echo "Then the snap command can not query network status information"
        if network-control-consumer.cmd ss -lnt 2>net-query.output; then
            echo "Expected error caling command with disconnected plug"
            exit 1
        fi
        MATCH "Permission denied" < net-query.output
    fi

    echo "When the plug is connected"
    snap connect network-control-consumer:network-control

    # core18 has no "arp" utility
    if [ "$(comamnd -v arp)" != "" ]; then
        echo "Then the snap command can modify the network configuration"
        network-control-consumer.cmd arp -s "$ARP_ENTRY_ADDR" aa:aa:aa:aa:aa:aa -i "$INTERFACE"
        arp | MATCH "$ARP_ENTRY_ADDR.*?ether.*?CM"

        if [ "$(snap debug confinement)" = strict ] ; then
            echo "When the plug is disconnected"
            snap disconnect network-control-consumer:network-control

            echo "Then the snap command can not modify the network configuration"
            if network-control-consumer.cmd arp -s "$ARP_ENTRY_ADDR" aa:aa:aa:aa:aa:aa -i "$INTERFACE" 2>net-command.output; then
                echo "Expected error calling command with disconnected plug"
                exit 1
            fi
            MATCH "Permission denied" < net-command.output
        fi
    fi

    echo "When the plug is connected"
    snap connect network-control-consumer:network-control

    echo "A network namespace can be created"
    network-control-consumer.cmd ip netns add test-ns
    ip netns list | MATCH test-ns

    echo "And a veth interface can be added to the namespace"

    ip link add veth0 type veth peer name veth1
    ip link list | MATCH "veth0.*veth1"

    network-control-consumer.cmd ip link set veth1 netns test-ns

    ip link list | MATCH "veth0"
    ip link list | NOMATCH "veth1"

    echo "And a command can be executed in the context of the namespace"
    network-control-consumer.cmd ip netns exec test-ns ip link list | MATCH "veth1"

    if [ "$(snap debug confinement)" = strict ] ; then
        echo "And the policy has the ptrace suppression rule"
        MATCH '^deny ptrace \(trace\),' < /var/lib/snapd/apparmor/profiles/snap.network-control-consumer.cmd

        echo "When the plug is disconnected"
        snap disconnect network-control-consumer:network-control

        echo "The snap is not able to create a network namespace"
        if network-control-consumer.cmd ip netns add test-ns-2 2>ns-create.output; then
            echo "Expected error calling ns create command with disconnected plug"
        fi
        MATCH "Permission denied" < ns-create.output

        echo "And the snap can't add a veth interface to an existing namespace"
        # first, move veth1 back to the root namespace
        ip netns exec test-ns ip link set veth1 netns 1
        if network-control-consumer.cmd ip link set veth1 netns test-ns 2>ns-move.output; then
            echo "Expected error trying to move veth to network namespace with disconnected plug"
            exit 1
        fi
        MATCH "Permission denied" < ns-move.output


        echo "And the snap can't execute a command in the context of the namespace"
        if network-control-consumer.cmd ip netns exec test-ns ip link list 2>ns-exec.output; then
            echo "Expected error trying to execute command in a network namespace context with disconnected plug"
            exit 1
        fi
        MATCH "Permission denied" < ns-exec.output
    fi
