summary: Check that timeserver interface works

details: |
    This test makes sure that a snap using the timeserver-control interface
    can access timeserver information and update it.

prepare: |
    truncate --size=0 defer.sh
    chmod +x defer.sh

    # This test requires busctl but on 14.04 we don't have one.
    # Let's pick the one from the core snap in such case.
    if [ -z "$(command -v busctl 2>/dev/null)" ]; then
        ln -s /snap/core/current/usr/bin/busctl /usr/local/bin/busctl
        hash -r
        echo "rm -f /usr/local/bin/busctl" >> defer.sh
    fi

    # Technically the interface may be implemented by many things but in
    # practice systemd implementation has a working SetNTP while others do not.
    # On such systems, install systemd-timesyncd to get the implementation we
    # can test. On other systems remember the current setting of the NTP
    # property and restore it later.
    case "$SPREAD_SYSTEM" in
        debian-sid-*)
            apt-get remove -y ntp
            echo 'apt-get install -y ntp' >> defer.sh
            ;;
        ubuntu-19.10-*)
            apt-get remove -y chrony
            echo 'apt-get install -y chrony' >> defer.sh
            ;;
        *)
            case "$(busctl get-property org.freedesktop.timedate1 /org/freedesktop/timedate1 org.freedesktop.timedate1 NTP)" in
                "b true")
                    echo "busctl call org.freedesktop.timedate1 /org/freedesktop/timedate1 org.freedesktop.timedate1 SetNTP bb true false" >> defer.sh
                    ;;
                "b false")
                    echo "busctl call org.freedesktop.timedate1 /org/freedesktop/timedate1 org.freedesktop.timedate1 SetNTP bb false false" >> defer.sh
                    ;;
                *)
                    echo "Unexpected value of NTP property"
                    exit 1
                    ;;
            esac
            ;;
    esac

    # Install a snap declaring a plug on timeserver-control
    # shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    install_local test-snapd-timedate-control-consumer
    echo "snap remove --purge test-snapd-timedate-control-consumer" >> defer.sh

restore: |
    # Restore system to the previous state by running deferred commands in
    # reverse order.
    tac defer.sh > refed.sh
    sh -xe refed.sh && rm -f {defer,refed}.sh

execute: |
    # If we cannot use network time protocol then the test is meaningless.
    if [ "$(busctl get-property org.freedesktop.timedate1 /org/freedesktop/timedate1 org.freedesktop.timedate1 CanNTP)" != "b true" ]; then
        echo "This system cannot use NTP, test precondition failed"
        exit 1
    fi

    echo "The interface is disconnected by default"
    snap interfaces -i timeserver-control | MATCH -- '- +test-snapd-timedate-control-consumer:timeserver-control'

    echo "When the interface is connected"
    snap connect test-snapd-timedate-control-consumer:timeserver-control

    # Set NTP and check that the setting was propagated.
    for value in true false true; do
        test-snapd-timedate-control-consumer.timedatectl-timeserver set-ntp "$value"
        # Starting or stopping NTP takes non-zero time so give it some time to take effect.
        # shellcheck disable=SC2016
        retry --wait 5 sh -c 'test "$(busctl get-property org.freedesktop.timedate1 /org/freedesktop/timedate1 org.freedesktop.timedate1 NTP)" = "b '"$value"'"'
    done

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect test-snapd-timedate-control-consumer:timeserver-control

    echo "The timedatectl status cannot be retrieved"
    if test-snapd-timedate-control-consumer.timedatectl-timeserver status 2> call.error; then
        echo "Expected permission error calling timedatectl status with disconnected plug"
        exit 1
    fi
    MATCH "Permission denied" < call.error
