summary: Check that timeserver interface works

details: |
    This test makes sure that a snap using the timeserver-control interface
    can access timeserver information and update it.

# Debian sid is skipped because "timedatectl set-ntp" fails with the error:
# "Failed to set ntp: Message recipient disconnected from message bus without replying"
# A workaround is to make "systemctl enable --now systemd-timesyncd.service" instead
# XXX: 20.04: fails with `Failed to restart systemd-timesyncd.service: Unit systemd-timesyncd.service is masked.` - needs further investigation, looks like a packaging issue in 20.04
systems: [-debian-sid-*, -ubuntu-20.04-*]

prepare: |
    # shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh

    # Install a snap declaring a plug on timeserver-control
    install_local test-snapd-timedate-control-consumer

    if [[ "$SPREAD_SYSTEM" == ubuntu-19.10-* ]] || [[ "$SPREAD_SYSTEM" == ubuntu-20.04-* ]]; then
        # ensure chrony is not installed as it interferes with
        # the systemd-timesyncd.service
        apt remove -y chrony
        systemctl restart systemd-timesyncd.service
    fi

restore: |
    # Restore the initial timeserver
    if [ -s timeserver.txt ]; then
        retry-tool -n 10 --wait 5 timedatectl set-ntp "$(cat timeserver.txt)"
    fi

    if [[ "$SPREAD_SYSTEM" == ubuntu-19.10-* ]] || [[ "$SPREAD_SYSTEM" == ubuntu-20.04-* ]]; then
        # bring it back; this removes systemd-timesyncd
        apt install -y chrony
        systemctl restart chronyd.service
    fi

execute: |
    echo "The interface is disconnected by default"
    snap interfaces -i timeserver-control | MATCH -- '- +test-snapd-timedate-control-consumer:timeserver-control'

    echo "When the interface is connected"
    snap connect test-snapd-timedate-control-consumer:timeserver-control

    # Save the default timeserver to be restored at the end
    test-snapd-timedate-control-consumer.timedatectl-timeserver status | grep -oP '(Network time on|systemd-timesyncd.service active): \K(.*)' > timeserver.txt

    get_ntp_status() {
        test-snapd-timedate-control-consumer.timedatectl-timeserver status | \
            grep -oP '(Network time on|System clock synchronized): \K(.*)'
    }

    # NOTE: with systemd >= 239, switching the ntp setting it takes a while for
    # it to become visible

    # Set the ntp value and check the status
    retry-tool -n 10 --wait 5 test-snapd-timedate-control-consumer.timedatectl-timeserver set-ntp yes
    for _ in $(seq 10); do
        if [ "$(get_ntp_status)" = "yes" ] ; then
            break
        fi
        sleep 1
    done
    [ "$(get_ntp_status)" = "yes" ]

    # Set the ntp value and check the status
    test-snapd-timedate-control-consumer.timedatectl-timeserver set-ntp no
    for _ in $(seq 10); do
        if [ "$(get_ntp_status)" = "no" ]; then
            break
        fi
        sleep 1
    done
    [ "$(get_ntp_status)" = "no" ]

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect test-snapd-timedate-control-consumer:timeserver-control

    echo "The timedatectl status cannot be retrieved"
    if test-snapd-timedate-control-consumer.timedatectl-timeserver status 2> call.error; then
        echo "Expected permission error calling timedatectl status with disconnected plug"
        exit 1
    fi
    MATCH "Permission denied" < call.error
