summary: Ensure that the process-control interface works.

summary: |
    The process-control interface allows a snap to control other processes via signals
    and nice.

    A snap which defines the process-control plug must be shown in the interfaces list.
    The plug must not be autoconnected on install and, as usual, must be able to be
    reconnected.

    A snap declaring a plug on this interface must be able to kill other processes. Currently
    this test does not check the priority change capability of the interface, will be
    extended later.

prepare: |
    echo "Given a snap declaring a plug on the process-control interface is installed"
    snapbuild $TESTSLIB/snaps/process-control-consumer .
    snap install --dangerous process-control-consumer_1.0_all.snap

restore: |
    rm -f process-control-consumer_1.0_all.snap process-kill.error process-nice.error

execute: |
    CONNECTED_PATTERN=":process-control +process-control-consumer"
    DISCONNECTED_PATTERN="(?s).*?\n- +process-control-consumer:process-control"

    echo "Then it is not connected by default"
    snap interfaces | grep -Pzq "$DISCONNECTED_PATTERN"

    echo "==================================="

    echo "When the plug is connected"
    snap connect process-control-consumer:process-control ubuntu-core:process-control

    echo "Then the snap is able to kill an existing process"
    while :; do sleep 1; done &
    pid=$!
    ps ax | grep -Pq "^ *$pid"
    process-control-consumer.signal "SIGTERM" $pid
    ! ps ax | grep -Pq "^ *$pid"

    echo "==================================="

    echo "When the plug is disconnected"
    snap disconnect process-control-consumer:process-control ubuntu-core:process-control

    echo "Then the snap is not able to kill an existing process"
    while :; do sleep 1; done &
    pid=$!
    if process-control-consumer.signal SIGTERM $pid 2>${PWD}/process-kill.error; then
        echo "Expected permission error accessing killing a process with disconnected plug"
        exit 1
    fi
    grep -q "Permission denied" process-kill.error
    ps ax | grep -Pq "^ *$pid"
    kill -9 $pid
    ! ps ax | grep -Pq "^ *$pid"
