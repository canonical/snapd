summary: Check that broken seeding generates an error

systems: [-ubuntu-core-*]

environment:
    SEED_DIR: /var/lib/snapd/seed

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    snap pack "$TESTSLIB/snaps/basic18"
    snap download "--$CORE_CHANNEL" core

    "$TESTSLIB/reset.sh" --keep-stopped
    mkdir -p "$SEED_DIR/snaps"
    mkdir -p "$SEED_DIR/assertions"
    # Break the seed by not providing a model assertion and using
    # a base18 snap that needs a core18 base but not providing one.
    # XXX: Another common failure is to not provide some assertions
    #      in the seed, provide a test for this too?
    cat > "$SEED_DIR/seed.yaml" <<EOF
    snaps:
      - name: core
        channel: $CORE_CHANNEL
        file: core.snap
      - name: basic18
        unasserted: true
        file: basic18.snap
    EOF
    echo Copy the needed assertions to /var/lib/snapd/
    cp core_*.assert "$SEED_DIR/assertions"
    echo "Copy the needed snaps to $SEED_DIR/snaps"
    cp ./core_*.snap "$SEED_DIR/snaps/core.snap"
    cp ./basic18_1.0_all.snap "$SEED_DIR/snaps/basic.snap"

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    rm -rf "$SEED_DIR"
    rm -f -- *.snap
    rm -f -- *.assert
    systemctl start snapd.socket snapd.service

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    echo "Start the daemon with an empty state"
    systemctl start snapd.service

    echo "Ensure we get a warning message"
    retry-tool -n 30 sh -c 'snap warnings | MATCH "seeding failed "'
