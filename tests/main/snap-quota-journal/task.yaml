summary: Functional test for journal quota-related snap commands.

details: |
  Functional test for snap journal quota group commands ensuring that they are 
  effective in practice.

# these systems do not support journal quota groups due to their old systemd versions.
# requires systemd v245+
systems:
  - -amazon-linux-2-*
  - -centos-7-*
  - -centos-8-*
  - -debian-10-64
  - -ubuntu-14.04-*
  - -ubuntu-16.04-*
  - -ubuntu-18.04-*
  - -ubuntu-core-16-*
  - -ubuntu-core-18-*

prepare: |
  "$TESTSTOOLS"/snaps-state install-local test-snapd-journal-quota
  snap set system experimental.quota-groups=true
  tests.cleanup defer snap unset system experimental.quota-groups

execute: |
  echo "Starting service and verifying that log messages are sent to default journal namespace"
  snap start test-snapd-journal-quota.logger

  # Now ask for logs and lets see if we can see messages from 'LogDaemon'
  # The format of the log messages are 'LogDaemon: message number: X'
  retry -n 5 sh -c "$TESTSTOOLS/journal-state get-log | MATCH LogDaemon"

  # Create a journal quota group and set arbitrary limits, we will then verify these are written
  # correctly for journald
  echo "Create a group with the logger snap in it"
  snap set-quota group-one --journal-size=16MB --journal-rate-limit=100/10ms test-snapd-journal-quota

  echo "The systemd slice should be active now"
  sliceName="snap.$(systemd-escape --path group-one).slice"
  systemctl is-active "$sliceName"

  # Define the regexp we use to check the ControlGroup string with
  SLICE_REGEXP="/$sliceName/snap.test-snapd-journal-quota.logger.service"

  echo "And the service should be inside that slice"
  systemctl show --property=ControlGroup snap.test-snapd-journal-quota.logger.service | grep -F "$SLICE_REGEXP"

  echo "The service should also still be active"
  retry -n 3 sh -c "snap services test-snapd-journal-quota.logger | MATCH 'test-snapd-journal-quota.logger\s+enabled\s+active'"

  # Verify the contents of /etc/systemd/journald@snap-group-one.conf
  echo "Verifying the journal config contents"
  MATCH "^SystemMaxUse=16000000"        < /etc/systemd/journald@snap-group-one.conf
  MATCH "^RuntimeMaxUse=16000000"       < /etc/systemd/journald@snap-group-one.conf
  MATCH "^RateLimitIntervalSec=10000us" < /etc/systemd/journald@snap-group-one.conf
  MATCH "^RateLimitBurst=100"           < /etc/systemd/journald@snap-group-one.conf
  
  # Now ask for the namespace logs and lets see if we can see messages from 'LogDaemon'
  retry -n 5 sh -c "$TESTSTOOLS/journal-state get-log --namespace snap-group-one | MATCH LogDaemon"

  # Change the size and ensure that the journal is restarted
  echo "Updating size of journal to ensure size changes"
  snap set-quota group-one --journal-size=64MB

  echo "And the service is still active"
  retry -n 3 sh -c "snap services test-snapd-journal-quota.logger | MATCH 'test-snapd-journal-quota.logger\s+enabled\s+active'"

  # Ensure that the new size is printed in the journal logs. We requested 64MB but
  # this will most likely print out as 61.0M, so lets be a bit flexible
  "$TESTSTOOLS"/journal-state get-log --namespace snap-group-one | MATCH "max 6[0-9].[0-9]M,"

  # Ensure that the unit file is correct
  echo "Ensuring the unit file is correct"
  systemctl show --property=LogNamespace snap.test-snapd-journal-quota.logger.service | MATCH "LogNamespace=snap-group-one"

  echo "Removing the quota will stop the slice and the service will be restarted"
  LOGGER_PID=$(systemctl show --property=MainPID --value snap.test-snapd-journal-quota.logger.service)
  snap remove-quota group-one
  systemctl show --property=MainPID --value snap.test-snapd-journal-quota.logger.service | NOMATCH "$LOGGER_PID"
  retry -n 3 sh -c "snap services test-snapd-journal-quota.logger | MATCH 'test-snapd-journal-quota.logger\s+enabled\s+active'"

  echo "And the service is not in a slice anymore"
  systemctl show --property=ControlGroup snap.test-snapd-journal-quota.logger.service | grep -vF "$SLICE_REGEXP"

  echo "And the slice is not active anymore"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=inactive"

  # Make sure that the service is running still and now outputting logs
  # into the original journal.
  echo "And the service is running and is outputting logs into the original journal"
  NEW_MESSAGE_DETECTED=0
  INITIAL_NO=$("$TESTSTOOLS"/journal-state get-log | grep "LogDaemon" | tail -n 1 | awk '{print $NF}')
  for i in $(seq 5); do
      sleep 1
      CURRENT_NO=$("$TESTSTOOLS"/journal-state get-log | grep "LogDaemon" | tail -n 1 | awk '{print $NF}')
      if [ "$CURRENT_NO" -gt "$INITIAL_NO" ]; then
          echo "LogDaemon messages detected after $i tries"
          NEW_MESSAGE_DETECTED=1
          break
      fi
  done
  if [ "$NEW_MESSAGE_DETECTED" = "0" ]; then
      echo "Failed to see new log messages after 5 seconds"
      exit 1
  fi
