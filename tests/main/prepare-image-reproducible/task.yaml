summary: Verify that we are able to request specific revisions of snaps from the store through prepare-image 

details: |
    The `snap prepare-image` command performs some of the steps necessary for
    creating device images.

    This test verifies that the prepare-image command prepares properly an
    ubuntu-core 16 image when specific revisions of snaps are used. Check that
    the expected revisions set in the seed.manifest are retrieve and the
    generated manifest in the working directory contains correct content.

# autopkgtest run only a subset of tests that deals with the integration
# with the distro
backends: [-autopkgtest]

# disable the following distributions
# ubuntu-14, lack of systemd-run
# ubuntu-20.04-arm*, because we use pc kernel and gadget.
# ubuntu-core-*-arm-*, because image generade is not amd64
# ubuntu-18.04-32, lack of pc-kernel snap for pc-i386
systems:
- -ubuntu-14.04-*
- -ubuntu-20.04-arm-*
- -ubuntu-core-*-arm-*
- -ubuntu-18.04-32

environment:
    ROOT: /home/test/tmp/
    IMAGE: /home/test/tmp/image
    GADGET: /home/test/tmp/gadget
    STORE_DIR: $(pwd)/fake-store-blobdir
    STORE_ADDR: localhost:11028

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    mkdir -p "$ROOT"
    chown test:test "$ROOT"

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    
    "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"
    
    rm -rf "$ROOT"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    install_snap_to_fakestore() {
        local SNAP_NAME="$1"
        local SNAP_REVISION="$2"
        local SNAP_PATH

        SNAP_PATH=$("$TESTSTOOLS"/snaps-state pack-local "$SNAP_NAME")
        "$TESTSTOOLS"/store-state make-snap-installable "$STORE_DIR" "$SNAP_PATH"
        cat > snap-"$SNAP_NAME"-decl.json <<EOF
    {
        "type": "snap-declaration",
        "format": "1",
        "revision": "1",
        "snap-name": "$SNAP_NAME",
        "snap-id": "$SNAP_NAME-id",
        "plugs": {
            "snapd-control": {
            "allow-installation": "true",
            "allow-auto-connection": "true"
            }
        }
    }
    EOF
        cat > snap-"$SNAP_NAME"-rev.json <<EOF
    {
        "type": "snap-revision",
        "snap-id": "$SNAP_NAME-id",
        "snap-revision": "$SNAP_REVISION"
    }
    EOF
        fakestore new-snap-declaration --dir "${STORE_DIR}" "$SNAP_PATH" --snap-decl-json snap-"$SNAP_NAME"-decl.json
        fakestore new-snap-revision --dir "${STORE_DIR}" "$SNAP_PATH" --snap-rev-json snap-"$SNAP_NAME"-rev.json
    }
    
    # Ensure the following snaps are available on the host snap to avoid the
    # store script trying to fetch these after setting up the fake store.
    echo Installing required snaps we will need
    snap install core
    snap install remarshal
    snap install jq

    echo Download snaps needed for the the model
    snap download core
    snap download pc
    snap download pc-kernel
    
    echo "Configure daemon to point to the fake store"
    "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"

    echo Expose the needed assertions through the fakestore
    cp "$TESTSLIB"/assertions/testrootorg-store.account-key "$STORE_DIR/asserts"
    cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
    cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"

    # It is not enough to copy the assertions, we must also ack them otherwise we
    # will get an error about not being able to resolve the account key
    snap ack "$STORE_DIR/asserts/testrootorg-store.account-key"
    snap ack "$STORE_DIR/asserts/developer1.account"
    snap ack "$STORE_DIR/asserts/developer1.account-key"
    
    # We now add all the required snaps to the fake store. It hardly matter which revision
    # we give to them, as the fake store does not handle requests of specific revisions. Currently
    # the fake-store will just return whatever revision there is.
    echo "Adding snaps to the fake store"
    "$TESTSTOOLS"/store-state make-snap-installable "$STORE_DIR" "$(ls core_*.snap)" 99T7MUlRhtI3U0QFgl5mXXESAiSwt776
    "$TESTSTOOLS"/store-state make-snap-installable "$STORE_DIR" "$(ls pc_*.snap)" UqFziVZDHLSyO3TqSWgNBoAdHbLI4dAH
    "$TESTSTOOLS"/store-state make-snap-installable "$STORE_DIR" "$(ls pc-kernel_*.snap)" pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza
    install_snap_to_fakestore test-snapd-sh 23

    # Write the lists of revisions we want to get from the fake-store. We have purposely
    # only put these revisions into the store.
    cat > "$ROOT/seed.manifest" <<EOF
    core 1
    pc 1
    pc-kernel 1
    test-snapd-sh 23
    EOF

    # Now we test, as mentioned the store does not really support getting revisions, and it
    # doesn't make sense to implement this and also do a fail-version as we are only verifying
    # our own behavior in that case, and those tests would never fail (and then what was the point?).
    # Instead, until the official store supports asking for specific revisions, we should instead just
    # verify that we are able to send a specific revision to the store.
    export SNAPPY_FORCE_API_URL=http://$STORE_ADDR
    echo Running prepare-image
    snap prepare-image --channel edge --snap test-snapd-sh --write-revisions --revisions "$ROOT"/seed.manifest "$TESTSLIB"/assertions/developer1-pc.model $ROOT

    echo Verifying the expected revisions were retrieved
    test -e "$IMAGE/var/lib/snapd/seed/snaps/core_1.snap"
    test -e "$IMAGE/var/lib/snapd/seed/snaps/pc_1.snap"
    test -e "$IMAGE/var/lib/snapd/seed/snaps/pc-kernel_1.snap"
    test -e "$IMAGE/var/lib/snapd/seed/snaps/test-snapd-sh_23.snap"
    
    echo Verifying that the store acknowledged we requested the expected revisions
    journalctl -u fakestore | grep 'requested snap "core" revision 1'
    journalctl -u fakestore | grep 'requested snap "pc" revision 1'
    journalctl -u fakestore | grep 'requested snap "pc-kernel" revision 1'
    journalctl -u fakestore | grep 'requested snap "test-snapd-sh" revision 23'

    # The generated seed.manifest will be in working directory.
    echo Verifying the generated manifest has correct content
    MATCH "core\s1+$" < seed.manifest
    MATCH "pc\s1+$" < seed.manifest
    MATCH "pc-kernel\s1+$" < seed.manifest
    MATCH "test-snapd-sh\s23+$" < seed.manifest
