summary: Integration tests for the bootstrap.Run autodetect

details: |
    When working on a core system, snapd contains logic to install the system
    from scratch, creating partitions and file systems as necessary. The test
    uses snapd internal API loaded through a helper Go program, to exercise that
    in a hybrid unit/integration test, and observe the outcome.

    This test focuses on the re-installation scenario. A similar test looks at
    the first installation scenario and yet another test looks at creating
    encrypted file systems.

# use the same system and tooling as uc20
systems: [ubuntu-2*]

environment:
    SNAPD_DEBUG: "1"

prepare: |
    if not os.query is-pc-amd64; then
        echo "test designed for amd64 architecture, exiting..."
        exit
    fi

    echo "Create a fake block device image that looks like an image from u-i"
    truncate --size=20GB fake.img

    echo "Setup the image as a block device"
    losetup -fP fake.img
    losetup -a |grep fake.img|cut -f1 -d: > loop.txt
    LOOP="$(cat loop.txt)"

    echo "Create a partition that looks like a uc20 image"
    cat <<EOF | sfdisk "$LOOP"
    label: gpt

    start=2048, size=2048, type=21686148-6449-6E6F-744E-656564454649, name="BIOS Boot"
    start=4096, size=2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, name="ubuntu-seed"
    EOF
    retry -n 3 --wait 1 test -e "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    mkfs.vfat "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    echo "Double check that we got the expected partitions"
    sfdisk -l "$LOOP" | MATCH 'BIOS boot'
    sfdisk -l "$LOOP" | MATCH 'EFI System'

    echo "Get the UC20 gadget"
    snap download --channel=20/edge pc
    unsquashfs -d gadget-dir pc_*.snap

restore: |
    if not os.query is-pc-amd64; then
        echo "test designed for amd64 architecture, exiting..."
        exit
    fi

    for label in ubuntu-seed ubuntu-save ubuntu-data ubuntu-boot; do
        if mountpoint "/run/mnt/$label"; then
            umount "/run/mnt/$label"
        fi
        if mountpoint "./$label"; then
            umount "./$label"
        fi
    done
    if [ -f loop.txt ]; then
        LOOP="$(cat loop.txt)"
        losetup -d "$LOOP"
        sync
        losetup -l | NOMATCH "$LOOP"
    fi

debug: |
    cat /proc/partitions
    if [ -f loop.txt ]; then
        LOOP="$(cat loop.txt)"
        udevadm info --query property "${LOOP}" || true
        udevadm info --query property "${LOOP}p1" || true
        udevadm info --query property "${LOOP}p2" || true
        udevadm info --query property "${LOOP}p3" || true
        udevadm info --query property "${LOOP}p4" || true
        udevadm info --query property "${LOOP}p5" || true
    fi

execute: |
    if not os.query is-pc-amd64; then
        echo "test designed for amd64 architecture, exiting..."
        exit
    fi

    LOOP="$(cat loop.txt)"

    # debug message to see if the udev database is correctly updated
    udevadm info --query=property "${LOOP}p2" | grep ID_FS_TYPE ||:

    echo "Run the snap-bootstrap tool in auto-detect mode"
    # TODO:UC20: make kernel-dir non-empty once we have a gadget that has a
    #            "$kernel:" style ref in the meta/gadget.yaml
    kerneldir=""
    uc20-create-partitions ./gadget-dir pc-kernel "$kerneldir" x1

    echo "And check that the partitions are created"
    sfdisk -l "$LOOP" | MATCH '750M Linux filesystem'
    sfdisk -l "$LOOP" | MATCH '16\.7G Linux filesystem'
    file -s "${LOOP}p3" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-boot"'
    file -s "${LOOP}p4" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-save"'
    file -s "${LOOP}p5" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-data"'

    echo "Create canary files on the ubuntu-{seed,boot,data} partitions"
    mkdir ./ubuntu-seed ./ubuntu-boot ./ubuntu-save ./ubuntu-data
    mount "${LOOP}p2" ./ubuntu-seed
    mount "${LOOP}p3" ./ubuntu-boot
    mount "${LOOP}p4" ./ubuntu-save
    mount "${LOOP}p5" ./ubuntu-data
    for label in ubuntu-seed ubuntu-boot ubuntu-save ubuntu-data; do
        echo "$label" > ./"$label"/canary.txt
        umount ./"$label"
    done

    # re-create partitions on a new install attempt
    echo "Run the snap-bootstrap again"
    uc20-create-partitions ./gadget-dir pc-kernel "$kerneldir" x1

    echo "And check that the partitions are there"
    sfdisk -l "$LOOP" | MATCH '750M Linux filesystem'
    sfdisk -l "$LOOP" | MATCH '16\.7G Linux filesystem'
    sfdisk -l "$LOOP" | NOMATCH "${LOOP}p[6789]"
    file -s "${LOOP}p3" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-boot"'
    file -s "${LOOP}p4" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-save"'
    file -s "${LOOP}p5" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-data"'

    echo "Mount partitions again"
    mount "${LOOP}p2" ./ubuntu-seed
    mount "${LOOP}p3" ./ubuntu-boot
    mount "${LOOP}p4" ./ubuntu-save
    mount "${LOOP}p5" ./ubuntu-data
    echo "The ubuntu-seed partition is still there untouched"
    test -e ./ubuntu-seed/canary.txt
    echo "But ubuntu-{boot,save,data} got re-created"
    not test -e ./ubuntu-boot/canary.txt
    not test -e ./ubuntu-save/canary.txt
    not test -e ./ubuntu-data/canary.txt
