summary: Check the basic static snapshot data exclusion functionality

environment:
    # tar invoked when creating snapshots triggers OOM
    SNAPD_NO_MEMORY_LIMIT: 1
    USER_DATA_DIR: /root/snap/test-snap
    SYSTEM_DATA_DIR: /var/snap/test-snap

prepare: |
    "$TESTSTOOLS"/snaps-state install-local test-snap

restore: |
    rm expected_files restored_files

debug: |
    snap saved || true

execute: |
    # use the snap, so that the data dirs will be created
    test-snap.sh -c 'true'

    # drop in canaries
    echo "system versioned" > "$SYSTEM_DATA_DIR/current/canary.txt"
    echo "system common" > "$SYSTEM_DATA_DIR/common/canary.txt"
    echo "user versioned"  > "$USER_DATA_DIR/current/canary.txt"
    echo "user common" > "$USER_DATA_DIR/common/canary.txt"
    # Create the same directory/file structure on all four data storages
    for DIR in "$USER_DATA_DIR"/{current,common} "$SYSTEM_DATA_DIR"/{current,common}
    do
        touch "$DIR/test_1.txt"
        touch "$DIR/test_2.txt"
        touch "$DIR/test_1.gif"
        touch "$DIR/test_2.gif"
        mkdir  "$DIR/subdir"
        touch "$DIR/subdir/test_1.txt"
        touch "$DIR/subdir/test_2.txt"
        touch "$DIR/subdir/test_1.gif"
        touch "$DIR/subdir/test_2.gif"
    done
    # create snapshot, grab its ID
    SET_ID=$( snap save test-snap | cut -d\  -f1 | tail -n1 )

    # check it includes both snaps
    snap saved | MATCH test-snap
    snap saved --id="$SET_ID" | grep test-snap
    # and is valid
    snap check-snapshot "$SET_ID"

    # and is exportable
    snap export-snapshot "$SET_ID" "${SET_ID}_export.snapshot"
    test -e "${SET_ID}_export.snapshot"

    # remove the canaries
    for DIR in "$USER_DATA_DIR" "$SYSTEM_DATA_DIR"
    do
        rm "$DIR/"{current,common}/canary.txt
    done

    # restore the snapshot
    snap restore "$SET_ID" test-snap
    MATCH "system versioned" < "$SYSTEM_DATA_DIR/current/canary.txt"
    MATCH "system common" < "$SYSTEM_DATA_DIR/common/canary.txt"
    MATCH "user versioned" < "$USER_DATA_DIR/current/canary.txt"
    MATCH "user common" < "$USER_DATA_DIR/common/canary.txt"

    # The "grep -v" is to remove temporary files; we know that they go away
    # after some seconds, but let's not delay the test by waiting
    find "$USER_DATA_DIR" "$SYSTEM_DATA_DIR" | sort \
        | grep -v '\.~\w*~' > restored_files
    cat <<EOF > expected_files
    /root/snap/test-snap
    /root/snap/test-snap/common
    /root/snap/test-snap/common/canary.txt
    /root/snap/test-snap/common/subdir
    /root/snap/test-snap/common/subdir/test_1.txt
    /root/snap/test-snap/common/subdir/test_2.txt
    /root/snap/test-snap/common/test_1.txt
    /root/snap/test-snap/common/test_2.txt
    /root/snap/test-snap/current
    /root/snap/test-snap/x1
    /root/snap/test-snap/x1/canary.txt
    /root/snap/test-snap/x1/subdir
    /root/snap/test-snap/x1/subdir/test_1.gif
    /root/snap/test-snap/x1/subdir/test_2.gif
    /root/snap/test-snap/x1/test_1.gif
    /root/snap/test-snap/x1/test_1.txt
    /root/snap/test-snap/x1/test_2.gif
    /var/snap/test-snap
    /var/snap/test-snap/common
    /var/snap/test-snap/common/canary.txt
    /var/snap/test-snap/common/subdir
    /var/snap/test-snap/common/test_1.gif
    /var/snap/test-snap/common/test_1.txt
    /var/snap/test-snap/common/test_2.gif
    /var/snap/test-snap/common/test_2.txt
    /var/snap/test-snap/current
    /var/snap/test-snap/x1
    /var/snap/test-snap/x1/canary.txt
    /var/snap/test-snap/x1/subdir
    /var/snap/test-snap/x1/subdir/test_1.gif
    /var/snap/test-snap/x1/subdir/test_1.txt
    /var/snap/test-snap/x1/subdir/test_2.gif
    /var/snap/test-snap/x1/subdir/test_2.txt
    /var/snap/test-snap/x1/test_1.gif
    /var/snap/test-snap/x1/test_2.gif
    /var/snap/test-snap/x1/test_2.txt
    EOF
    diff -u expected_files restored_files
