summary: Test core20 preseeding for essential snaps with default-configure and configure hooks.

details: |
  This test confirms that the default-configure and configure hooks of the essential snaps run when
  at the correct time and in the correct order.

# TODO: test on 21.10 / 22.04; they fail because new build of snapd cannot
# be run in core20-based chroot due to old libc.
# This test cannot be executed in arm architecture because the model
# assertion is made for amd64
systems: [ubuntu-20.04-64]

environment:
  PREPARE_IMAGE_DIR: uc20image
  STORE_ADDR: localhost:11028
  STORE_DIR: $(pwd)/fake-store-blobdir

prepare: |
  #shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB"/prepare.sh
  snap download "--channel=${SNAPD_CHANNEL}" snapd
  repack_snapd_snap_with_deb_content_and_run_mode_firstboot_tweaks /tmp

  echo "Setting up fake store with developer 1 account"
  mkdir -p "$STORE_DIR/asserts"
  echo Expose the needed assertions through the fakestore
  cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/testrootorg-store.account-key "$STORE_DIR/asserts"
  "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"

  echo "Generating a new key without password for developer1"
  mkdir -p ~/.snap/gnupg
  gendeveloper1 show-key | gpg --homedir=~/.snap/gnupg --import

restore: |
  rm -rf "$PREPARE_IMAGE_DIR"
  "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"

debug: |
  cat preseed.log || true

execute: |
  # Have snap use the fakestore for assertions (but nothing else)
  export SNAPPY_FORCE_SAS_URL=http://$STORE_ADDR

  echo "Repacking prepared snapd snap with default-configure and configure hook"
  UNPACK_DIR="/tmp/snapd-reunpack"
  PACK_DIR=/tmp/snapd-pack
  SNAPD_SNAP=$(ls /tmp/snapd*.snap)
  unsquashfs -no-progress -d "$UNPACK_DIR" "$SNAPD_SNAP"
  if [ ! -d "$UNPACK_DIR"/meta/hooks ]; then
    mkdir "$UNPACK_DIR"/meta/hooks
  fi
  cp default-configure "$UNPACK_DIR"/meta/hooks
  cp configure "$UNPACK_DIR"/meta/hooks
  mkdir "$PACK_DIR"
  snap pack "$UNPACK_DIR" "$PACK_DIR"
  SNAPD_SNAP=$(ls "$PACK_DIR"/snapd*.snap)

  echo "Repacking pc (gadget) snap with default-configure and configure hook"
  UNPACK_DIR="/tmp/pc-unpack"
  PACK_DIR=/tmp/pc-pack
  snap download --channel=20/stable pc
  unsquashfs -no-progress -d "$UNPACK_DIR" pc*.snap
  if [ ! -d "$UNPACK_DIR"/meta/hooks ]; then
    mkdir "$UNPACK_DIR"/meta/hooks
  fi
  cp default-configure "$UNPACK_DIR"/meta/hooks
  cp configure "$UNPACK_DIR"/meta/hooks
  mkdir "$PACK_DIR"
  snap pack "$UNPACK_DIR" "$PACK_DIR"
  PC_SNAP=$(ls "$PACK_DIR"/pc*.snap)

  echo "Repacking core20 base with default-configure and configure hook"
  UNPACK_DIR="/tmp/core20-reunpack"
  PACK_DIR=/tmp/core20-pack
  snap download --channel=latest/stable core20
  unsquashfs -no-progress -d "$UNPACK_DIR" core20*.snap
  if [ ! -d "$UNPACK_DIR"/meta/hooks ]; then
    mkdir "$UNPACK_DIR"/meta/hooks
  fi
  cp default-configure "$UNPACK_DIR"/meta/hooks
  cp configure "$UNPACK_DIR"/meta/hooks
  mkdir "$PACK_DIR"
  snap pack "$UNPACK_DIR" "$PACK_DIR"
  CORE20_SNAP=$(ls "$PACK_DIR"/core20*.snap)

  echo "Repacking pc-kernel with default-configure and configure hook"
  UNPACK_DIR="/tmp/pc-kernel-unpack"
  PACK_DIR=/tmp/pc-kernel-pack
  snap download --channel=20/stable pc-kernel
  unsquashfs -no-progress -d "$UNPACK_DIR" pc-kernel*.snap
  if [ ! -d "$UNPACK_DIR"/meta/hooks ]; then
    mkdir "$UNPACK_DIR"/meta/hooks
  fi
  # TODO: pc kernel default configure does not work because
  # it is run early before core20 base is available.
  #cp default-configure "$UNPACK_DIR"/meta/hooks
  cp configure "$UNPACK_DIR"/meta/hooks
  mkdir "$PACK_DIR"
  snap pack "$UNPACK_DIR" "$PACK_DIR"
  PC_KERNEL_SNAP=$(ls "$PACK_DIR"/pc-kernel*.snap)

  echo "Downloading test-snapd-with-default-configure-core20"
  snap download --channel=latest/edge test-snapd-with-default-configure-core20
  TEST_SNAPD_WITH_DFLT_CONF_SNAP=$(ls test-snapd-with-default-configure-core20*.snap)

  echo "Preseeding image"
  # TODO: Change to use developer1-pc-preseed-core20-configure-hooks.json ocne that is available
  snap prepare-image --preseed --preseed-sign-key=" (test)" --channel=stable --snap="$SNAPD_SNAP" --snap="$PC_SNAP" --snap="$CORE20_SNAP" --snap="$PC_KERNEL_SNAP" --snap="$TEST_SNAPD_WITH_DFLT_CONF_SNAP" "$TESTSLIB"/assertions/developer1-pc-20-test-preseed-with-configure-hooks.model "$PREPARE_IMAGE_DIR" > preseed.log 2>&1

  exit 1
