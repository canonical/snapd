summary: Verify that we validate the architectures of snaps against the model

# running this on one machine is enough
systems: [ubuntu-20.04-64]

environment:
    ROOT: /home/test/tmp/
    STORE_ADDR: localhost:11028
    STORE_DIR: $(pwd)/fake-store-blobdir

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"

    mkdir "$ROOT"
    chown -R test:test "$ROOT"

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"
    rm -rf "$ROOT"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    if [ "$REMOTE_STORE" = "staging" ]; then
        echo "SKIP: cannot run with staging store yet"
        exit 0
    fi

    # get the model assertion
    gendeveloper1 sign-model < "$TESTSLIB"/assertions/developer1-20-dangerous.json > "$ROOT/model.assertion"
    
    echo Expose the needed assertions through the fakestore
    cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
    cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
    cp "$TESTSLIB"/assertions/testrootorg-store.account-key "$STORE_DIR/asserts"
    # have snap use the fakestore for assertions (but nothing else)
    export SNAPPY_FORCE_SAS_URL=http://$STORE_ADDR

    # Write a manifest with a snap that is meant for a different architecture
    # Snap 'hello' revision 41 points to a ppc64el build
    # Snap 'hello' revision 42 points to an amd64 build
    cat > "$ROOT/seed.manifest" <<EOF
    hello 41
    EOF

    echo Running prepare-image with a snap that refers to a non-compatible architecture
    su -c "SNAPPY_USE_STAGING_STORE=$SNAPPY_USE_STAGING_STORE snap prepare-image --channel edge --revisions $ROOT/seed.manifest --snap hello $TESTSLIB/assertions/developer1-pc.model $ROOT" 2>stderr || true
    MATCH "error: snap \"hello\" supported architectures \(ppc64el\) are incompatible with the model architecture \(amd64\)" < stderr
    # Ensure there are not other warnings/errors on stderr
    wc -l < stderr | MATCH "^2$"

    # Write a valid manifest
    cat > "$ROOT/seed.manifest" <<EOF
    hello 42
    EOF

    echo Running prepare-image with correct snap
    su -c "SNAPPY_USE_STAGING_STORE=$SNAPPY_USE_STAGING_STORE snap prepare-image --channel edge --revisions $ROOT/seed.manifest --snap hello --snap core20 $TESTSLIB/assertions/developer1-pc.model $ROOT"

    echo Verifying the result
    test -e "$ROOT"/image/var/lib/snapd/seed/snaps/core_*.snap
    test -e "$ROOT"/image/var/lib/snapd/seed/snaps/pc-kernel_*.snap
    test -e "$ROOT"/image/var/lib/snapd/seed/snaps/pc_*.snap
    test -e "$ROOT"/image/var/lib/snapd/seed/snaps/core20_*.snap
    test -e "$ROOT"/image/var/lib/snapd/seed/snaps/hello_42.snap
