summary: smoke test for the store-state tool

# cannot work with the staging store without a testing build with compiled-in staging keys
backends: [-external]

# ubuntu-14.04: systemd-run not supported
systems: [-ubuntu-14.04-64]

prepare: |
    echo "Ensure jq is installed"
    if ! command -v jq; then
        snap install --devmode jq
    fi

    echo "Ensure yaml2json is installed"
    if ! command -v yaml2json; then
        snap install --devmode remarshal
    fi

execute: |
    # Check help
    "$TESTSTOOLS"/store-state | MATCH "usage: store-state setup-fake-store <DIR>"
    "$TESTSTOOLS"/store-state -h | MATCH "usage: store-state setup-fake-store <DIR>"
    "$TESTSTOOLS"/store-state --help | MATCH "usage: store-state setup-fake-store <DIR>"

    # Setup staging store
    "$TESTSTOOLS"/store-state setup-staging-store
    snap info core | MATCH "store-url:.*https://staging-api.snapcraft.io"

    # Teardown staging store
    "$TESTSTOOLS"/store-state teardown-staging-store
    snap info core | MATCH "store-url:.*https://snapcraft.io"

    # Setup fakestore
    STORE_DIR="$(pwd)/fake-store-blobdir"
    snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"
    "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"
    systemctl is-active fakestore
    ss -ntlp | MATCH "127.0.0.1:11028"
    snap info core | NOMATCH "store-url:.*https://snapcraft.io"

    # Check make-snap-installable command with snap-id
    create_snap() {
        yaml2json -i snap/meta/snap.yaml.in > snap/meta/snap.json
        jq ".name = \"$1\"" snap/meta/snap.json | json2yaml -o snap/meta/snap.yaml
        "$TESTSTOOLS"/snaps-state pack-local snap
    }

    cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
    cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
    snap ack "$TESTSLIB/assertions/developer1.account"
    snap ack "$TESTSLIB/assertions/developer1.account-key"
    snap_path=$(create_snap my-test-snap)
    "$TESTSTOOLS"/store-state make-snap-installable "$STORE_DIR" "${snap_path}" "EaXqgt1lyCaxKaQCU349mlodBkDCXRcg"
    snap install my-test-snap 2>&1 | MATCH "my-test-snap 1.0.* installed"

    # Check make-snap-installable command without snap-id
    snap_path=$(create_snap my-test-snap-2)
    "$TESTSTOOLS"/store-state make-snap-installable "$STORE_DIR" "${snap_path}"
    snap install my-test-snap-2 2>&1 | MATCH "my-test-snap-2 1.0.* installed"

    # Check snaps can be removed
    snap remove my-test-snap
    snap remove my-test-snap-2

    # Check teardown fakestore
    "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"
    not systemctl is-active fakestore
    ss -ntlp | NOMATCH "127.0.0.1:11028"

    # Check init-fake-refreshes command
    snap install test-snapd-tools
    "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"
    "$TESTSTOOLS"/store-state init-fake-refreshes "$STORE_DIR" "test-snapd-tools"
    snap refresh test-snapd-tools | MATCH "test-snapd-tools .* refreshed"
    "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"

    # Test setup and teardown errors
    "$TESTSTOOLS"/store-state setup-fake-store 2>&1 | MATCH "store-state: the provided dir cannot be empty"
    "$TESTSTOOLS"/store-state teardown-fake-store "noexist" | MATCH 'store-state: the provided top dir does not exist "noexist"'
