summary: the snap-{run,confine,exec} chain does not create files with undesired properties.

# ubuntu-14.04: the test sets up a user session, which requires more recent systemd
systems: [-ubuntu-14.04-*]

prepare: |
    # Install a snap with opengl and joystick plugs.
    # This gives us all of the usual snap-confine configuration, along with all
    # the cgroups that we create.
    snap pack test-snapd-app
    snap install --dangerous ./test-snapd-app_1.0_all.snap
    snap connect test-snapd-app:opengl
    snap connect test-snapd-app:joystick
    tests.session -u test prepare

restore: |
    tests.session -u test restore
    rm -rf /tmp/snap.test-snapd-app

execute: |
    # Run the snap as a non-root user.
    tests.session -u test exec sh -c 'snap run test-snapd-app.sh -c /bin/true'

    # Look for files that are owned by the test user, group owned by the test
    # user or are world-writable in /run/snapd, /sys/fs/cgroup and in /tmp
    # trees. Such files may indicate that parts of code invomed from
    # snap-confine (which includes snap-update-ns and snap-discard-ns) ran as
    # the group of the calling user and did not manage that properly.
    for dname in /run/snapd /sys/fs/cgroup /tmp/snap.*; do
        # Filter out cgroups that are expected to be owned by the test user.
        # Since we are a looking at sysfs, which is modified asynchronously,
        # ignore errors of the kind where readdir and stat race with a
        # concurrent mutator.
        find "$dname" -ignore_readdir_race -user test ! -path '*/user@12345.service*' ! -path '*/user-12345.slice*' >> wrong-user.txt
        find "$dname" -ignore_readdir_race -group test ! -path '*/user@12345.service*' ! -path '*/user-12345.slice*' >> wrong-group.txt
        # Filter out the following elements:
        # - sockets, we don't create any and there are some that are 777
        # - symbolic links, those are always 777
        # - the file cgroup.event_control which is ugo+w for some reason
        # - the per-snap tmp directory as it is meant to be world-writable
        find "$dname" -ignore_readdir_race ! -type s ! -type l ! -name cgroup.event_control ! -path '/tmp/snap.*/tmp' -perm /o+w >> world-writable.txt
    done

    # The test fails if any such file is detected
    ret=0
    if test -s wrong-user.txt; then
        echo "the following files should be owned by root"
        cat wrong-user.txt
        ret=1
    fi
    if test -s wrong-group.txt; then
        echo "the following files should be group-owned by root"
        cat wrong-group.txt
        ret=1
    fi
    if test -s world-writable.txt; then
        echo "the following files should not be world-writable"
        cat world-writable.txt
        ret=1
    fi
    exit "$ret"
