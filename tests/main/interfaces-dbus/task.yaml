summary: Ensure that the dbus interface works

details: |
    The dbus interface allows owning a name on DBus public bus.

    The test uses two snaps, a provider declaring a dbus slot and a consumer
    with a plug with the same attributes as the slot. The provider requests
    a dbus name and, when the plug is connected, the consumer can call the
    method exposed by the provider.

environment:
    DISPLAY: :0

systems: [-ubuntu-core-16-*]

prepare: |
    . "$TESTSLIB/dirs.sh"

    echo "Give a snap declaring a dbus slot in installed"
    snap install --edge test-snapd-dbus-provider

    echo "And a snap declaring a matching dbus plug is installed"
    snap install --edge test-snapd-dbus-consumer

    echo "And the provider dbus loop is started"
    . "$TESTSLIB/dbus.sh"
    start_dbus_unit $SNAP_MOUNT_DIR/bin/test-snapd-dbus-provider.provider

restore: |
    rm -f call.error
    . "$TESTSLIB/dbus.sh"
    stop_dbus_unit || true

execute: |
    export $(cat dbus.env)

    echo "Then the dbus name is properly reserved by the provider and the method is accessible"
    while ! dbus-send --print-reply --dest=com.dbustest.HelloWorld /com/dbustest/HelloWorld com.dbustest.HelloWorld.SayHello | MATCH "hello world"; do
        sleep 1
    done

    echo "And plug is disconnected by default"
    snap interfaces | MATCH "^\- +test-snapd-dbus-consumer:dbus-test"

    if [ "$(snap debug confinement)" = partial ]; then
        exit 0
    fi

    echo "And the consumer is not able to access the provided method"
    if test-snapd-dbus-consumer.dbus-consumer 2>${PWD}/call.error; then
        echo "Expected permission error calling dbus method with disconnected plug"
        exit 1
    fi
    cat call.error | MATCH "Permission denied"

    echo "When the plug is connected"
    snap connect test-snapd-dbus-consumer:dbus-test test-snapd-dbus-provider:dbus-test

    echo "Then the consumer is able to call the provided method"
    test-snapd-dbus-consumer.dbus-consumer | MATCH "hello world"
