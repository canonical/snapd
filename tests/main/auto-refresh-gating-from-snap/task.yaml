summary: Check that snapctl refresh --pending/--proceed can be used outside of
  hooks.

details: |
  Test auto-refresh with gate-auto-refresh hook support enabled
  (experimental.gate-auto-refresh-hook feature) and verify the snaps can
  use snapctl refresh --pending/--proceed commands outside of hooks.
  The test uses two test snaps, there are a few versions of these
  snaps in the store (in stable/beta/edge channels) for this test.

environment:
  SNAP_NAME: test-snapd-refresh-control
  CONTENT_SNAP_NAME: test-snapd-refresh-control-provider
  NOHOOK_SNAP: test-snap-refresh-control-iface
  CONTROL_FILE: /var/snap/test-snapd-refresh-control/common/control
  DEBUG_LOG_FILE: /var/snap/test-snapd-refresh-control/common/debug.log

prepare: |
  snap install --devmode jq
  snap set system experimental.gate-auto-refresh-hook=true

  echo "Install test snaps"
  snap install "$SNAP_NAME"
  snap install "$CONTENT_SNAP_NAME"
  "$TESTSTOOLS"/snaps-state install-local "$NOHOOK_SNAP"

debug: |
  jq -r '.data["snaps-hold"]' < /var/lib/snapd/state.json || true

execute: |
  LAST_REFRESH_CHANGE_ID=1

  echo "Connecting the two test snaps with content interface"
  snap connect "$SNAP_NAME:content" "$CONTENT_SNAP_NAME:content"

  echo "Connecting snap-refresh-control interface to allow the snap to call snapctl refresh --proceed"
  snap connect "$SNAP_NAME:snap-refresh-control"
  snap connect "$NOHOOK_SNAP:snap-refresh-control"

  # sanity check
  snap list | MATCH "$SNAP_NAME +1\.0\.0"
  snap list | MATCH "$CONTENT_SNAP_NAME +1\.0\.0"

  echo "Check that the --pending information is not available yet"
  "$SNAP_NAME".pending > pending.log
  MATCH "pending: none" < pending.log
  NOMATCH "version:" < pending.log

  echo "Check that --proceed complains if nothing is held by the snap initially"
  "$SNAP_NAME".proceed 2>&1 | MATCH "no snaps are held by snap \"$SNAP_NAME\""

  echo "And that --proceed can be used with a snap that doesn't have gate-auto-refresh hook"
  "$NOHOOK_SNAP".proceed 2>&1 | MATCH "no snaps are held by snap \"$NOHOOK_SNAP\""

  snap set core refresh.schedule="0:00-23:59"

  systemctl stop snapd.{service,socket}
  "$TESTSTOOLS"/snapd-state change-snap-channel "$SNAP_NAME" beta
  "$TESTSTOOLS"/snapd-state change-snap-channel "$CONTENT_SNAP_NAME" beta

  # Request the snap to hold the refresh (itself and its content provider).
  # Writing into this file affects the command performed by the gate-auto-refresh hook
  # in tests/lib/snaps/store/test-snapd-refresh-control.v*/meta/hooks/gate-auto-refresh.
  echo "--hold" > "$CONTROL_FILE"

  echo "Trigger auto-refresh of test-snapd-refresh-control-provider but hold it via test-snapd-refresh-control's hook"
  "$TESTSTOOLS"/snapd-state force-autorefresh
  systemctl start snapd.{service,socket}
  
  LAST_REFRESH_CHANGE_ID=$("$TESTSTOOLS"/snapd-state wait-for-autorefresh "$LAST_REFRESH_CHANGE_ID")

  echo "Check that the --pending information is available from the snap"
  "$SNAP_NAME".pending > pending.log
  MATCH "restart: +true" < pending.log
  MATCH "base: +false" < pending.log
  MATCH "channel: beta" < pending.log
  MATCH "pending: ready" < pending.log
  MATCH "version: 2\.0\.0" < pending.log

  echo "Ensure our snaps were not updated"
  snap list | MATCH "$CONTENT_SNAP_NAME +1\.0\.0"
  # sanity check for the gating snap.
  snap list | MATCH "$SNAP_NAME +1\.0\.0"

  echo "Request to proceed from the snap (but hold it by the hook)"
  echo "--hold" > "$CONTROL_FILE"
  "$SNAP_NAME".proceed

  LAST_REFRESH_CHANGE_ID=$("$TESTSTOOLS"/snapd-state wait-for-autorefresh  "$LAST_REFRESH_CHANGE_ID")

  echo "Ensure our snaps were not updated"
  snap list | MATCH "$CONTENT_SNAP_NAME +1\.0\.0"
  snap list | MATCH "$SNAP_NAME +1\.0\.0"

  echo "Request to proceed from the snap and stop holding the refresh from the hook"
  rm -f "$CONTROL_FILE"
  "$SNAP_NAME".proceed

  LAST_REFRESH_CHANGE_ID=$("$TESTSTOOLS"/snapd-state wait-for-autorefresh  "$LAST_REFRESH_CHANGE_ID")

  echo "Ensure our snaps were updated"
  snap list | MATCH "$CONTENT_SNAP_NAME +2\.0\.0"
  snap list | MATCH "$SNAP_NAME +2\.0\.0"

  echo "Check than --proceed is not allowed without snap-refresh-control interface"
  snap disconnect "$SNAP_NAME":snap-refresh-control
  "$SNAP_NAME".proceed 2>&1 | MATCH "cannot proceed: requires snap-refresh-control interface"
