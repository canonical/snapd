summary: Check that `snap run --gdbserver` works

details: |
    Verifies the command `snap run --gdbserver` works properly. Also
    check the --experimental-gdbserver deprecated parameter works properly.

# testing only here to avoid having to install gdb/gdbserver everywhere
systems: [ubuntu-16.04-*, ubuntu-18.04-*, ubuntu-2*]

environment:
    OPT/normal: --gdbserver
    OPT/deprecated: --experimental-gdbserver

prepare: |
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh
    # no need to remove the pkgs in restore, restore_suite_each()
    # will handle this
    apt install -y gdbserver gdb

execute: |
    echo "Test snap run --gdbserver works"

    # run the gdbserver command as a user
    # XXX: use "systemd-run --user -p StandardOutput=file:$(pwd)/stdout"
    # shellcheck disable=SC2016
    su -c 'snap run "$OPT" test-snapd-sh.sh -c "echo hello-hello-hello uid:$UID"' test >stdout &

    # wait for the instructions that gdb is ready to get attached
    retry -n60 grep '^gdb -ex' stdout
    # ensure that the actual program is *not* run yet
    not grep hello-hello-hello < stdout

    # now attach gdb as instructed via "snap run" and continue running the
    # program
    gdb_cmd="$(grep '^gdb -ex' stdout)"
    # shellcheck disable=SC2086
    echo c | eval $gdb_cmd

    # ensure the program ran and was running as a user
    retry --wait 1 -n 5 sh -c 'MATCH hello-hello-hello < stdout'
    MATCH "uid:$(id -u test)" < stdout
