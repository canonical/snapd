summary: Integration tests for the bootstrap.Run

# use the same system and tooling as uc20
systems: [ubuntu-20.04-64]

environment:
    SNAPD_DEBUG: "1"

prepare: |
    echo "Create a fake block device image that looks like an image from u-i"
    truncate --size=20GB fake.img

    echo "Setup the image as a block device"
    losetup -fP fake.img
    losetup -a |grep fake.img|cut -f1 -d: > loop.txt
    LOOP="$(cat loop.txt)"

    echo "Create a partition that looks like a uc20 image"
    cat <<EOF | sfdisk "$LOOP"
    label: gpt

    start=2048, size=2048, type=21686148-6449-6E6F-744E-656564454649, name="BIOS Boot"
    start=4096, size=2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, name="ubuntu-seed"
    EOF
    retry -n 3 --wait 1 test -e "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    mkfs.vfat "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    echo "Double check that we got the expected partitions"
    sfdisk -l "$LOOP" | MATCH 'BIOS boot'
    sfdisk -l "$LOOP" | MATCH 'EFI System'

    echo "Get the UC20 gadget"
    snap download --channel=20/edge pc
    unsquashfs -d gadget-dir pc_*.snap

restore: |
    for label in ubuntu-seed ubuntu-save ubuntu-data ubuntu-boot other-ext4; do
        if mountpoint "/run/mnt/$label"; then
            umount "/run/mnt/$label"
        fi
        if mountpoint "./$label"; then
            umount "./$label"
        fi
    done
    if mountpoint ./mnt; then
        umount ./mnt
    fi
    # sanity check
    mount | NOMATCH /run/mnt
    if [ -f loop.txt ]; then
        LOOP="$(cat loop.txt)"
        losetup -d "$LOOP"
        losetup -l | NOMATCH "$LOOP"
    fi
    rm -f "$GOHOME"/bin/uc20-create-partitions

debug: |
    cat /proc/partitions
    LOOP="$(cat loop.txt)"
    udevadm info --query property "${LOOP}" || true
    udevadm info --query property "${LOOP}p1" || true
    udevadm info --query property "${LOOP}p2" || true
    udevadm info --query property "${LOOP}p3" || true
    udevadm info --query property "${LOOP}p4" || true
    udevadm info --query property "${LOOP}p5" || true

execute: |
    LOOP="$(cat loop.txt)"

    echo "Run the snap-bootstrap tool"
    go get ../../lib/uc20-create-partitions
    # TODO:UC20: make kernel-dir non-empty once we have a gadget that has a
    #            "$kernel:" style ref in the meta/gadget.yaml
    kerneldir=""
    uc20-create-partitions ./gadget-dir "$kerneldir" "$LOOP"

    echo "And check that the partitions are created"
    sfdisk -l "$LOOP" | MATCH '750M Linux filesystem'
    sfdisk -l "$LOOP" | MATCH '16.7G Linux filesystem'
    file -s "${LOOP}p3" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-boot"'
    file -s "${LOOP}p4" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-save"'
    file -s "${LOOP}p5" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-data"'

    echo "Check that the filesystems were not auto-mounted"
    mount | NOMATCH /run/mnt/ubuntu-seed
    mount | NOMATCH /run/mnt/ubuntu-boot
    mount | NOMATCH /run/mnt/ubuntu-save
    mount | NOMATCH /run/mnt/ubuntu-data

    # we used "lsblk --fs" here but it was unreliable
    mkdir -p ./mnt

    echo "Mount ubuntu-seed and check it is vfat"
    mount "${LOOP}p2" ./mnt
    df -T "${LOOP}p2" | MATCH vfat
    umount ./mnt

    echo "Mount ubuntu-boot and check it is ext4 with metadata_csum"
    mount "${LOOP}p3" ./mnt
    df -T "${LOOP}p3" | MATCH ext4
    umount ./mnt
    file -s "${LOOP}p3" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-boot"'
    # check metadata_csum
    tune2fs -l "${LOOP}p3" | MATCH '^Filesystem features:.*metadata_csum'

    echo "Mount ubuntu-save and check it is ext4 with metadata_csum"
    mount "${LOOP}p4" ./mnt
    df -T "${LOOP}p4" | MATCH ext4
    umount ./mnt
    file -s "${LOOP}p4" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-save"'
    # check metadata_csum
    tune2fs -l "${LOOP}p4" | MATCH '^Filesystem features:.*metadata_csum'

    echo "Mount ubuntu-data and check it is ext4 with metadata_csum"
    mount "${LOOP}p5" ./mnt
    df -T "${LOOP}p5" | MATCH ext4
    umount ./mnt
    file -s "${LOOP}p5" | MATCH 'ext4 filesystem data,.* volume name "ubuntu-data"'
    # check metadata_csum
    tune2fs -l "${LOOP}p5" | MATCH '^Filesystem features:.*metadata_csum'

    # size is reported in 512 blocks
    echo "Check ubuntu-data size is expanded"
    sz="$(udevadm info -q property "${LOOP}p5" |grep "^ID_PART_ENTRY_SIZE=" | cut -f2 -d=)"
    # the disk size is 20GB, 1GB in 512 blocks is 2097152, with auto grow, the
    # partition can be safely assumed to be > 10GB
    if [ "$sz" -lt "$((10 * 2097152))" ]; then
        echo "unexpected system-data partition size $((sz * 512))"
        exit 1
    fi

    echo "Check that the filesystem content was deployed"
    mount "${LOOP}p3" ./mnt
    ls ./mnt/EFI/boot/grubx64.efi
    ls ./mnt/EFI/boot/bootx64.efi
    # remove a file
    rm ./mnt/EFI/boot/grubx64.efi
    umount ./mnt

    echo "Add a non-creatable partition to see it fail installation"
    cp gadget-dir/meta/gadget.yaml gadget.yaml.backup
    cat >> gadget-dir/meta/gadget.yaml <<EOF
          - name: Other ext4
            type: 83,0FC63DAF-8483-4772-8E79-3D69D8477DE4
            filesystem: ext4
            filesystem-label: other-ext4
            size: 110M
    EOF
    uc20-create-partitions ./gadget-dir "$kerneldir" "$LOOP" 2>&1 | MATCH "panic: gadget and ${LOOP} partition table not compatible: cannot find gadget structure #6 \(\"Other ext4\"\) on disk"

    # replace the gadget.yaml without the extra partition
    cp gadget.yaml.backup gadget-dir/meta/gadget.yaml

    echo "Ensure we can deploy with mounting"
    uc20-create-partitions --mount ./gadget-dir "$kerneldir" "$LOOP"
    sfdisk -l "$LOOP" | MATCH "${LOOP}p1 .* 1M\s* BIOS boot"
    sfdisk -l "$LOOP" | MATCH "${LOOP}p2 .* 1\.2G\s* EFI System"
    sfdisk -l "$LOOP" | MATCH "${LOOP}p3 .* 750M\s* Linux filesystem"
    sfdisk -l "$LOOP" | MATCH "${LOOP}p4 .* 16M\s* Linux filesystem"
    sfdisk -l "$LOOP" | MATCH "${LOOP}p5 .* 16\.7G\s* Linux filesystem"

    echo "check that the filesystems are created and mounted"
    mount | MATCH /run/mnt/ubuntu-boot
    mount | MATCH /run/mnt/ubuntu-save
    mount | MATCH /run/mnt/ubuntu-data

    echo "Make sure the filesystem was redeployed"
    ls /run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
