summary: |
   Test remodel

systems: [ubuntu-core-16-64]

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json
    mv /var/lib/snapd/seed/assertions/model model.bak
    cp "$TESTSLIB"/assertions/developer1.account /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/developer1.account-key /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/developer1-pc.model /var/lib/snapd/seed/assertions
    cp "$TESTSLIB"/assertions/testrootorg-store.account-key /var/lib/snapd/seed/assertions
    # kick first boot again
    systemctl start snapd.service snapd.socket

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB"/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json

    rm -f /var/lib/snapd/seed/assertions/developer1.account
    rm -f /var/lib/snapd/seed/assertions/developer1.account-key
    rm -f /var/lib/snapd/seed/assertions/developer1-pc.model
    rm -f /var/lib/snapd/seed/assertions/testrootorg-store.account-key
    rm -f /var/lib/snapd/seed/assertions/test-snapd-with-configure_*.assert
    cp model.bak /var/lib/snapd/seed/assertions/model
    rm -f ./*.bak
    # kick first boot again
    systemctl start snapd.service snapd.socket
    # wait for first boot to be done
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
    # extra paranoia because failure to cleanup earlier took us a long time
    # to find
    if [ -e /var/snap/test-snapd-tools/current ]; then
        echo "Leftover test-snapd-tools data dir found, test does not "
        echo "properly cleanup"
        echo "see https://github.com/snapcore/snapd/pull/6620"
        exit 1
    fi

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # sanity check
    not snap list test-snapd-tools
    
    echo "Wait for first boot to be done"
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
    echo "We have the right model assertion"
    snap debug model|MATCH "model: my-model"

    echo "Now we remodel"
    snap remodel "$TESTSLIB"/assertions/developer1-pc-revno2.model

    echo "and we got the new required snap"
    snap list test-snapd-tools

    echo "and we got the new model assertion"
    snap debug model|MATCH "revision: 2"
    snap changes | MATCH "Refresh model assertion from revision 0 to 2"

    echo "and we cannot remove the new required snap"
    not snap remove test-snapd-tools

    echo "And we can remodel again this time test-snapd-tools is no longer required"
    snap remodel "$TESTSLIB"/assertions/developer1-pc-revno3.model
    snap debug model|MATCH "revision: 3"
    snap changes | MATCH "Refresh model assertion from revision 2 to 3"
    echo "and test-snapd-tools is still available"
    snap list test-snapd-tools
    echo "and we can clean it up here because it is no longer required"
    snap remove test-snapd-tools

    echo "and test that the remodel shows up in 'snap changes'"

    echo "and check that this remodel has just a single task"
    snap change --last=remodel > remodel.txt
    MATCH "Set new model assertion" < remodel.txt
    [ "$(grep -c today remodel.txt)" -eq 1 ]
