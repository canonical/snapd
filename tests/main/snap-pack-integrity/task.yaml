summary: Verify that snap pack works with integrity data appended

details: |
    Check that `snap pack` can produce a .snap file with integrity data appended
    to it and that this data can be used to verify the snap's content.

# TODO: add systems we know have veritysetup package available
# so far a lot of distributions don't have veritysetup in path
systems:
  - debian-*
  - ubuntu-1*
  - ubuntu-2*

prepare: |
    snap install jq

execute: |
    # Manually pack the test snap instead of using the snaps-state tool here
    # as we want to append some command line arguments. We also make sure to test
    # with a small snap which is known to cause issues on older veritysetup
    SNAP_DIR="$TESTSLIB"/snaps/test-snapd-sh
    snap pack --append-integrity-data "$SNAP_DIR"

    # Rename for description purposes
    mv ./test-snapd-sh_1.0_all.snap ./snap.combined

    # Build it without any integrity data appended to get the original
    # file-size
    snap pack "$SNAP_DIR"

    # Split the normal data from the hashed data, and add 4K to the
    # offset to account for the header which is written immediately after.
    HDROFFSET=$(wc -c <./test-snapd-sh_1.0_all.snap)
    HASHOFFSET=$((HDROFFSET+4096))
    COMBSIZE=$(wc -c <./snap.combined)
    DIFFSIZE=$((COMBSIZE-HDROFFSET))
    dd if=./snap.combined of=./snap.data bs=4K count="$HDROFFSET" iflag=count_bytes
    dd if=./snap.combined of=./snap.header bs=4K skip="$HDROFFSET" count=4K iflag=skip_bytes,count_bytes
    dd if=./snap.combined of=./snap.hashed bs=4K skip="$HASHOFFSET" count="$DIFFSIZE" iflag=skip_bytes,count_bytes
    ROOT_HASH=$(cut -c 8- < snap.header | jq -n 'input | ."dm-verity"."root-hash"' | tr -d '"')

    # Use veritysetup verify to verify the hashed data
    veritysetup verify ./snap.data ./snap.hashed "$ROOT_HASH"

