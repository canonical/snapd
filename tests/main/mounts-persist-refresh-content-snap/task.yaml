summary: Ensure that mounts persist during a refresh of a content snap

details: |
  A bug in snap-update-ns due to the experimental robust-mount-namespaces option
  being enabled resulted in all files being shared by content interfaces disappearing
  during a refresh, either of snapd or of the snap sharing files via a content. The
  most visible example of this was the firefox snap, which would crash when the files
  disappeared like this (other snaps would misbehave but would not crash as fatally as
  the firefox snap). See launchpad bug https://bugs.launchpad.net/snapd/+bug/1945697 for
  full details.

systems:
  - -ubuntu-14.04-* # no support for tests.session
  - -ubuntu-core-* # can't modify rootfs to add a fonts dir

kill-timeout: 10m

prepare: |
  # make a font directory and restart snapd so it will see it when it goes to
  # connect the desktop interface for the snap
  mkdir /usr/share/fonts/foo-font
  systemctl restart snapd

  # install a snap which exposes some files via a content slot
  "$TESTSTOOLS"/snaps-state install-local test-snapd-content-slot

  # install a snap which consumes said files via content plug
  "$TESTSTOOLS"/snaps-state install-local test-snapd-desktop-layout-with-content

  # connect
  snap connect test-snapd-desktop-layout-with-content:shared-content-plug test-snapd-content-slot:shared-content-slot

  # prepare a user session
  tests.session -u test prepare
  tests.cleanup defer tests.session -u test restore

execute: |
  touch /run/keep-running
  # read a file continuously in the background until it fails - note that the
  # while loop here has to be inside the snap run shell, since the process must
  # persist during the refresh, if it is on the outside the mount namespace will
  # be rebuilt and the crash will not be reproduced
  tests.session -u test exec snap run --shell test-snapd-desktop-layout-with-content.cmd -c 'while test -f /run/keep-running && test -d /usr/share/fonts/foo-font; do true; done' &
  pid=$!

  # refresh the content slot snap
  # TODO: when refresh app awareness is enabled, this will need to ignore running processes to
  # check the behavior
  "$TESTSTOOLS"/snaps-state install-local test-snapd-content-slot

  # ensure the process is still running
  if not ps -p "$pid"; then
    echo "process died, test failed"
    exit 1
  fi

  # signal to kill the loop
  rm /run/keep-running

  wait "$pid" || true
