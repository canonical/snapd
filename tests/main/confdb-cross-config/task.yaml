summary: Check confdb cross-snap configuration

details: |
  Check that we can configure confdb across snaps and that the appropriate
  hooks are invoked.

# the test snaps have a core24 base not supported on 16.04.
# This conflicts with other tests on debian11 in a way that breaks snap-confine
# (which this test runs many times due the hook calls).
systems: [ -ubuntu-16.04 ]

prepare: |
  snap set system experimental.confdb=true

restore: |
  snap unset system experimental.confdb

execute: |
  changeAfterID() {
    local OLD_CHANGE="$1"
    local NEW_CHANGE
    for _ in $(seq 30); do
      NEW_CHANGE=$(snap changes | tail -n 2 | head -n 1 | awk '{print $1}')
      if [ "$NEW_CHANGE" -gt "$OLD_CHANGE" ]; then
        break
      fi
      snap debug ensure-state-soon
      sleep 1s
    done
    if [ "$NEW_CHANGE" -le "$OLD_CHANGE" ]; then
      echo "expected a change with an id greater than $OLD_CHANGE"
      exit 1
    fi
  }

  resetTestState() {
    rm -f /var/snap/test-custodian-snap/common/*
    rm -f /var/snap/test-failing-custodian-snap/common/*
    rm -f /var/snap/test-snap/common/*
    rm -f /var/snap/loading-custodian/common/*
  }

  if [ "$TRUST_TEST_KEYS" = "false" ]; then
    echo "This test needs test keys to be trusted"
    exit
  fi

  snap ack "$TESTSLIB/assertions/developer1-network.confdb"
  "$TESTSTOOLS"/snaps-state install-local test-custodian-snap
  "$TESTSTOOLS"/snaps-state install-local test-snap

  snap connect test-custodian-snap:manage-wifi
  snap connect test-snap:setup-wifi

  echo "Test that confdb changes are observed by other snaps"
  OLD_CHANGE=$(snap changes | tail -n 2 | head -n 1 | awk '{print $1}')
  test-custodian-snap.sh -c 'snapctl set --view :manage-wifi ssid=first'
  changeAfterID "$OLD_CHANGE"

  retry -n 5 --wait 1 sh -c 'snap changes | tail -n 2 | grep "Done.*Set confdb through \"developer1/network/wifi-setup\""'
  # check that the right hooks were called and they can see the expected values
  MATCH "first" < /var/snap/test-custodian-snap/common/change-view-manage-wifi-ran
  # the value was modified by change-confdb
  MATCH "first-custodian" < /var/snap/test-custodian-snap/common/save-view-manage-wifi-ran
  MATCH "first-custodian" < /var/snap/test-snap/common/observe-view-setup-wifi-ran

  # check no other hooks were called
  test "2" = "$(find /var/snap/test-custodian-snap/common/* -maxdepth 1 | wc -l)"
  test "1" = "$(find /var/snap/test-snap/common/* -maxdepth 1 | wc -l)"
  # the change was persisted
  snap get developer1/network/wifi-setup ssid | MATCH "first-custodian"
  resetTestState

  echo "Test that custodian snaps can manage and save confdb changes"
  OLD_CHANGE=$(snap changes | tail -n 2 | head -n 1 | awk '{print $1}')
  test-snap.sh -c 'snapctl set --view :setup-wifi ssid=second'
  changeAfterID "$OLD_CHANGE"
  retry -n 5 --wait 1 sh -c 'snap changes | tail -n 2 | grep "Done.*Set confdb through \"developer1/network/wifi-setup\""'
  MATCH "second" < /var/snap/test-custodian-snap/common/change-view-manage-wifi-ran
  # the value was modified by the custodian snap
  MATCH "second-custodian" < /var/snap/test-custodian-snap/common/save-view-manage-wifi-ran
  MATCH "second-custodian" < /var/snap/test-custodian-snap/common/observe-view-manage-wifi-ran
  # check no other hooks were called
  test "3" = "$(find /var/snap/test-custodian-snap/common/* -maxdepth 1 | wc -l)"
  test "0" = "$(find /var/snap/test-snap/common/* -maxdepth 1 | wc -l)"
  snap get developer1/network/wifi-setup ssid | MATCH "second-custodian"
  resetTestState

  echo "Test that many snaps can change the value and that failed save-confdb phases are rolled back"
  # install another custodian snap that will fail to save-confdb
  "$TESTSTOOLS"/snaps-state install-local test-failing-custodian-snap
  snap connect test-failing-custodian-snap:manage-wifi
  OLD_CHANGE=$(snap changes | tail -n 2 | head -n 1 | awk '{print $1}')
  test-snap.sh -c 'snapctl set --view :setup-wifi ssid=third'
  changeAfterID "$OLD_CHANGE"

  retry -n 5 --wait 1 sh -c 'snap changes | tail -n 2 | grep "Error.*Set confdb through \"developer1/network/wifi-setup\""'
  MATCH "third" < /var/snap/test-custodian-snap/common/change-view-manage-wifi-ran
  # the value was modified by test-custodian-snap
  MATCH "third-custodian" < /var/snap/test-failing-custodian-snap/common/change-view-manage-wifi-ran
  # and again by test-failing-custodian-snap, for the first run. The second run is
  # a rollback so the value should be the original one
  test "2" = "$(wc -l /var/snap/test-custodian-snap/common/save-view-manage-wifi-ran | awk '{printf $1}')"
  head -n 1 /var/snap/test-custodian-snap/common/save-view-manage-wifi-ran | MATCH "third-custodian-rollback"
  tail -n 1 /var/snap/test-custodian-snap/common/save-view-manage-wifi-ran | MATCH "second-custodian"
  # check no other hooks were called (don't call observe-view since the change failed)
  test "2" = "$(find /var/snap/test-custodian-snap/common/* -maxdepth 1 | wc -l)"
  test "1" = "$(find /var/snap/test-failing-custodian-snap/common/* -maxdepth 1 | wc -l)"
  test "0" = "$(find /var/snap/test-snap/common/* -maxdepth 1 | wc -l)"
  # still the same value
  snap get developer1/network/wifi-setup ssid | MATCH "second-custodian"
  resetTestState

  # install a sole custodian that saves and loads data
  snap remove --purge test-custodian-snap test-failing-custodian-snap test-snap
  "$TESTSTOOLS"/snaps-state install-local loading-custodian
  snap ack "$TESTSLIB/assertions/network-ephemeral.confdb"
  snap connect loading-custodian:manage-wifi

  # write some ephemeral data (i.e., password)
  OLD_CHANGE=$(snap changes | tail -n 2 | head -n 1 | awk '{print $1}')
  loading-custodian.sh -c 'snapctl set --view :manage-wifi ssid=my-ssid password=written-secret'
  changeAfterID "$OLD_CHANGE"
  retry -n 5 --wait 1 sh -c 'snap changes | tail -n 2 | grep "Done.*Set confdb through \"developer1/network-ephemeral/wifi-setup\""'

  # the hooks get the expected data
  MATCH 'written-secret' < /var/snap/loading-custodian/common/change-view-manage-wifi-ran
  MATCH 'written-secret-changed' < /var/snap/loading-custodian/common/save-view-manage-wifi-ran
  # snapd caches the written value
  gojq -c '.data."confdb-databags".developer1."network-ephemeral".wifi.psk' < /var/lib/snapd/state.json | MATCH "written-secret-changed"

  OLD_CHANGE=$(snap changes | tail -n 2 | head -n 1 | awk '{print $1}')
  # we load the most up to date value from the custodian snap
  loading-custodian.sh -c 'snapctl get --view :manage-wifi password' | MATCH "loaded-secret-queried"
  changeAfterID "$OLD_CHANGE"
  retry -n 5 --wait 1 sh -c 'snap changes | tail -n 2 | grep "Done.*Get confdb through \"developer1/network-ephemeral/wifi-setup\""'

  # check that before loading we read the cached version from snapd and the load-view hook gets this
  MATCH 'written-secret-changed' < /var/snap/loading-custodian/common/load-view-manage-wifi-ran
  # but query-view gets the value load-view sets
  MATCH "loaded-secret" < /var/snap/loading-custodian/common/query-view-manage-wifi-ran

  # check that triggering the change from the API has the same effect
  resetTestState
  OLD_CHANGE=$(snap changes | tail -n 2 | head -n 1 | awk '{print $1}')
  snap get developer1/network-ephemeral/wifi-setup password | MATCH "loaded-secret-queried"
  changeAfterID "$OLD_CHANGE"
  retry -n 5 --wait 1 sh -c 'snap changes | tail -n 2 | grep "Done.*Get confdb through \"developer1/network-ephemeral/wifi-setup\""'

  # check we read the cached version before running any hooks (and load-view sees that)
  MATCH 'written-secret-changed' < /var/snap/loading-custodian/common/load-view-manage-wifi-ran
  # but query-view gets the value load-view sets
  MATCH "loaded-secret" < /var/snap/loading-custodian/common/query-view-manage-wifi-ran
