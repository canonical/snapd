summary: Functional test for quota-related snap commands.

details: |
  Functional test for snap quota group commands ensuring that they are 
  effective in practice.

# these systems do not support quota groups due to their old systemd versions,
# we do have a check to do for these systems, but that is just to ensure that
# we don't allow using quota groups, and that check is done in the snap-quota
# spread instead
systems:
  - -ubuntu-14.04-*
  - -centos-7-*
  - -amazon-linux-2-*
  - -ubuntu-16.04-*
  - -ubuntu-core-16-*

prepare: |
  snap install go-example-webserver jq remarshal hello-world
  snap install test-snapd-curl --edge --devmode
  snap set system experimental.quota-groups=true
  tests.cleanup defer snap unset system experimental.quota-groups

execute: |
  echo "Create a group with a snap in it"
  snap set-quota group-one --memory=100MB go-example-webserver

  echo "The systemd slice should be active now"
  sliceName="snap.$(systemd-escape --path group-one).slice"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=active"

  echo "The service should also still be active"
  snap services go-example-webserver.webserver | MATCH "go-example-webserver.webserver\s+enabled\s+active"

  # systemd/kernel have three different locations for the cgroup pids depending
  # on version
  echo "The systemd slice should have one process in it now"
  cgroupsV1OldSystemdProcsFile="/sys/fs/cgroup/memory/$sliceName/snap.go-example-webserver.webserver.service/cgroup.procs"
  cgroupsV1ProcsFile="/sys/fs/cgroup/memory/$sliceName/cgroup.procs"
  cgroupsV2ProcsFile="/sys/fs/cgroup/$sliceName/snap.go-example-webserver.webserver.service/cgroup.procs"
  if [ -e "$cgroupsV2ProcsFile" ]; then
      cgroupProcsFile="$cgroupsV2ProcsFile"
  elif [ -e "$cgroupsV1OldSystemdProcsFile" ]; then
      cgroupProcsFile="$cgroupsV1OldSystemdProcsFile"
  elif [ -e "$cgroupsV1ProcsFile" ]; then
      cgroupProcsFile="$cgroupsV1ProcsFile"
  else
      echo "cannot detect cgroup procs file"
      exit 1
  fi

  #shellcheck disable=SC2016
  retry --wait 1 -n 100 --env cgroupProcsFile="$cgroupProcsFile" sh -x -c 'test "$(wc -l < $cgroupProcsFile)" = 1'
  SERVER_PID=$(cat "$cgroupProcsFile")

  echo "And that process is the main PID for the example webserver"
  systemctl show --property=MainPID snap.go-example-webserver.webserver.service | MATCH "MainPID=$SERVER_PID"

  echo "And the service is in the Control Group for the slice"
  # using a regexp for the ControlGroup match here as on older systemd (16.04)
  # the group is double escaped
  systemctl show --property=ControlGroup snap.go-example-webserver.webserver.service | MATCH 'ControlGroup=/snap.group(.*)one.slice/snap.go-example-webserver.webserver.service'

  # snap quota group-one formats the memory usage as a nice human readable 
  # string, which complicates the comparison here, so instead just grab the 
  # memory usage in raw bytes from the REST API instead
  echo "The memory usage reported for the slice from snapd is within 10% of what the kernel reports"

  # TODO: the v2 path here is probably wrong
  cgroupsV1OldSystemdMemFile="/sys/fs/cgroup/memory/$sliceName/memory.usage_in_bytes"
  cgroupsV1MemFile="/sys/fs/cgroup/memory/$sliceName/memory.usage_in_bytes"
  cgroupsV2MemFile="/sys/fs/cgroup/$sliceName/memory.current"
  if [ -e "$cgroupsV2MemFile" ]; then
      cgroupMemFile="$cgroupsV2MemFile"
  elif [ -e "$cgroupsV1OldSystemdMemFile" ]; then
      cgroupMemFile="$cgroupsV1OldSystemdMemFile"
  elif [ -e "$cgroupsV1MemFile" ]; then
      cgroupMemFile="$cgroupsV1MemFile"
  else
      echo "cannot detect cgroup memory file"
      exit 1
  fi

  snapdSaysMemUsage="$(sudo snap run test-snapd-curl.curl --unix-socket /run/snapd.socket http://localhost/v2/quotas/group-one | jq -r '.result.current.memory')"
  kernelSaysMemUsage="$(cat "$cgroupMemFile")"

  pyCmd="import math; print(math.ceil(abs($snapdSaysMemUsage - $kernelSaysMemUsage) / $snapdSaysMemUsage * 100))"
  if command -v python3 > /dev/null; then
    percentChg="$(python3 -c "$pyCmd")"
  else 
    percentChg="$(python -c "$pyCmd")"
  fi

  if [ "$percentChg" -gt 10 ]; then
    echo "memory usage reported by snapd differs from that of the kernel by more than 10%"
    exit 1
  fi

  echo "Removing the quota will stop the slice and the service will be restarted"
  snap remove-quota group-one
  systemctl show --property=MainPID snap.go-example-webserver.webserver.service | NOMATCH "MainPID=$SERVER_PID"
  snap services go-example-webserver.webserver | MATCH "go-example-webserver.webserver\s+enabled\s+active"

  echo "And the service is not in a slice anymore"
  systemctl show --property=ControlGroup snap.go-example-webserver.webserver.service | NOMATCH "/$sliceName/snap.go-example-webserver.webserver.service"

  echo "And the slice is not active anymore"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=inactive"

  echo "Creating a quota with a very small memory limit results in the service being unable to start"
  snap set-quota too-small --memory=4097B go-example-webserver

  # wait for systemd to finish trying to automatically restart it, we want 
  # systemd to hit the start limit for this service, otherwise systemd 
  # restarting the service will race with removing the quota directly below
  # the unit will jump between SubState=running and SubState=auto-restart while
  # trying to restart it in a loop, but after systemd has hit the limit it will
  # give up and mark the unit as failed
  retry --wait 1 -n 10 sh -c "systemctl show --property=SubState snap.go-example-webserver.webserver.service | MATCH 'SubState=failed'"

  # clear "oom-killer" messages from dmesg or prepare-restore.sh will fail due
  # to the oom-killer messages from go-example-webserver
  tests.cleanup defer dmesg -c

  echo "The systemd slice should be active"
  sliceName="snap.$(systemd-escape --path too-small).slice"
  systemctl show --property=ActiveState "$sliceName" | MATCH "ActiveState=active"

  echo "But the service is not running after a short amount of time"
  retry --wait 1 -n 100 sh -c 'snap services go-example-webserver.webserver | MATCH "go-example-webserver.webserver\s+enabled\s+inactive"'
  # check for the service to have ExecMainStatus=9 (or =203) here since that is 
  # indicative of the service being killed by systemd ungracefully or being 
  # unable to start up properly which is what we are expecting with the low 
  # memory limit for the quota group.
  # run the check in a loop, because technically what is happening now is that 
  # systemd is starting the process, it gets killed because it doesn't have 
  # enough memory very quickly after being started, and then systemd retries 
  # again up to the StartLimitBurst related settings. So the service is actually
  # very quickly transitioning through the various states and we are racing with
  # systemd as we check the status, so doing it in a loop ensures that if the 
  # system is working we won't fail the test simply because systemd won the race
  retry --wait 1 -n 10 sh -c 'systemctl show --property=ExecMainStatus snap.go-example-webserver.webserver.service | MATCH "ExecMainStatus=(203|9)"'

  echo "And after removing the quota group, services will not automatically restart as they were inactive"
  function service_start_time {
    systemctl show --property=ExecMainStartTimestampMonotonic "$1" | cut -d= -f2
  }
  TIMESTAMP_BEFORE=$(service_start_time snap.go-example-webserver.webserver.service)
  snap remove-quota too-small
  snap services go-example-webserver.webserver | MATCH "go-example-webserver.webserver\s+enabled\s+inactive"
  TIMESTAMP_AFTER=$(service_start_time snap.go-example-webserver.webserver.service)
  test "$TIMESTAMP_AFTER" -eq "$TIMESTAMP_BEFORE"

  echo "But they can still be started manually"
  snap start go-example-webserver.webserver
  retry --wait 1 -n 10 sh -c 'snap services go-example-webserver.webserver | MATCH "go-example-webserver.webserver\s+enabled\s+active"'

  echo "Removing a snap ensures that the snap is not in the quota group anymore"
  snap set-quota group-three --memory=100MB go-example-webserver
  snap quota group-three | yaml2json | jq -r '.snaps | .[]' | MATCH go-example-webserver
  snap remove go-example-webserver
  snap quota group-three | yaml2json | jq -r '.snaps' | MATCH null
  snap remove-quota group-three

  echo "Creating a quota group with no actual services in it still has logical memory usage reported for it"
  snap set-quota group-four --memory=100MB
  # putting a snap inside this one, even a snap with no services will trigger us
  # to write out the slice unit definition and activate it which triggers a bug
  # in reporting it's memory usage on old systemd versions
  snap set-quota group-five --memory=10MB --parent=group-four hello-world

  snapdSaysMemUsage="$(sudo snap run test-snapd-curl.curl --unix-socket /run/snapd.socket http://localhost/v2/quotas/group-five | jq -r '.result.current.memory')"
  # both 0 and 4096 values are expected here, 0 is for older systemd/kernels 
  # where an empty cgroup has exactly 0, but on newer systems there is some 
  # minimum amount of accounting memory for an empty cgroup, so it shows up as 
  # 4K
  if [ "$snapdSaysMemUsage" != null ] && [ "$snapdSaysMemUsage" != 0 ] && [ "$snapdSaysMemUsage" != 4096 ] ; then
    echo "unexpected memory usage for empty quota group group-five, snapd says: $snapdSaysMemUsage"
    exit 1
  fi

  snapdSaysMemUsage="$(sudo snap run test-snapd-curl.curl --unix-socket /run/snapd.socket http://localhost/v2/quotas/group-four | jq -r '.result.current.memory')"
  if [ "$snapdSaysMemUsage" != null ] && [ "$snapdSaysMemUsage" != 0 ] && [ "$snapdSaysMemUsage" != 4096 ] ; then
    echo "unexpected memory usage for empty quota group group-four, snapd says: $snapdSaysMemUsage"
    exit 1
  fi
