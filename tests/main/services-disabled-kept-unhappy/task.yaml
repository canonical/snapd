summary: Check that disabled snap services stay disabled across unhappy
  refreshes, reverts, and disable/enable cycles where undos are triggered (there
  is a separate tests for happy ops without undos, etc.)

# This test is for the "happy" paths for disabled services, where nothing goes
# wrong and is undone, but there are still a lot of cases here for that. This
# test covers the following cases:

# 1. install snap, disable services, attempt refresh which gets undone
#    => the services are disabled
#    => state.json doesn't have last-active-disabled-services

# 2. install snap, disable services, attempt refresh with svc renames which gets undone
#    => the services are disabled
#    => state.json doesn't have last-active-disabled-services

# 3. install snap, refresh, disable services, attempt revert which gets undone
#    => the services are disabled
#    => state.json doesn't have last-active-disabled-services

# 4. install snap, disable services, refresh snap with svc changed into app, attempt revert which is undone
#    => the services are disabled
#    => state.json doesn't have last-active-disabled-services

# 5. install snap, disable services, refresh snap with svc renamed, disable services, attempt revert which is undone
#    => the new service is still disabled
#    => state.json has the old service saved in last-active-disabled-services

# 6. install snap, disable services, refresh snap with svc renamed, disable services, attempt refresh to revision without services which is undone
#    => the new service is still disabled
#    => state.json has the old service saved in last-active-disabled-services

# 7. install snap, disable services, refresh snap with svc renamed, disable services, attempt a refresh snap with new svc changed into app which is undone
#    => the new services is still disabled
#    => state.json has the old service saved in last-active-disabled-services

prepare: |
  snap install --edge jq
  rm -f /root/disabled-svcs-kept-fail
  rm -rf disabled-svcs-kept*

  echo "Build the snaps"
  cp -r "$TESTSLIB/snaps/disabled-svcs-kept/" ./disabled-svcs-kept1/
  sed \
    -e s@THEVERSION@1.0@ \
    -e s@THESVCNAME@svc@ \
    -e "s@THEDAEMON@daemon: simple@" \
    disabled-svcs-kept1/meta/snap.yaml.in > disabled-svcs-kept1/meta/snap.yaml
  snap pack ./disabled-svcs-kept1

  cp -r "$TESTSLIB/snaps/disabled-svcs-kept/" ./disabled-svcs-kept2/
  sed \
    -e s@THEVERSION@2.0@ \
    -e s@THESVCNAME@svc2@ \
    -e "s@THEDAEMON@daemon: simple@" \
    disabled-svcs-kept2/meta/snap.yaml.in > disabled-svcs-kept2/meta/snap.yaml
  snap pack ./disabled-svcs-kept2

  cp -r "$TESTSLIB/snaps/disabled-svcs-kept/" ./disabled-svcs-kept3/
  sed \
    -e s@THEVERSION@3.0@ \
    -e s@THESVCNAME@svc2@ \
    -e "s@THEDAEMON@@" \
    disabled-svcs-kept3/meta/snap.yaml.in > disabled-svcs-kept3/meta/snap.yaml
  snap pack ./disabled-svcs-kept3

  cp -r "$TESTSLIB/snaps/disabled-svcs-kept/" ./disabled-svcs-kept4/
  sed \
    -e s@THEVERSION@4.0@ \
    -e s@THESVCNAME@app@ \
    -e "s@THEDAEMON@@" \
    disabled-svcs-kept4/meta/snap.yaml.in > disabled-svcs-kept4/meta/snap.yaml
  snap pack ./disabled-svcs-kept4

restore: |
  rm -f /root/disabled-svcs-kept-fail
  rm -rf disabled-svcs-kept*

execute: |
  # shellcheck source=tests/lib/disabled-svcs.sh
  . "$TESTSLIB/disabled-svcs.sh"

  ########################################
  ############### CASE 1 #################
  ########################################

  echo "CASE 1"

  echo "Install the snap"
  snap install --dangerous disabled-svcs-kept_1.0*.snap

  echo "Disable a service in the snap"
  snap stop --disable disabled-svcs-kept.svc

  echo "Check that it was actually disabled"
  retry -n 10 --wait 1 sh -c 'snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"'

  echo "Trigger a failing configure hook"
  touch /root/disabled-svcs-kept-fail

  echo "Try a refresh (which should fail)"
  if snap install --dangerous disabled-svcs-kept_1.0*.snap; then
    echo "refresh should have failed"
    exit 1
  fi

  echo "Remove the failing configure hook trigger"
  rm /root/disabled-svcs-kept-fail

  echo "Check that the service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  ########################################
  ############### CASE 2 #################
  ########################################

  echo "CASE 2"

  echo "Trigger a failing configure hook"
  touch /root/disabled-svcs-kept-fail

  echo "Try a refresh to a new revision with different services (which should fail)"
  if snap install --dangerous disabled-svcs-kept_2.0*.snap; then
    echo "refresh should have failed"
    exit 1
  fi

  echo "Remove the failing configure hook trigger"
  rm /root/disabled-svcs-kept-fail

  echo "Check that the service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  ########################################
  ############### CASE 3 #################
  ########################################

  echo "CASE 3"

  echo "Refresh to a new revision identical to the current one"
  # this is x2
  snap install --dangerous disabled-svcs-kept_1.0*.snap

  echo "Trigger a failing configure hook"
  touch /root/disabled-svcs-kept-fail

  echo "Try a revert (which should fail)"
  if snap revert disabled-svcs-kept --revision=x1; then
    echo "revert should have failed"
    exit 1
  fi

  echo "Remove the failing configure hook trigger"
  rm /root/disabled-svcs-kept-fail

  echo "Check that the service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  echo "Check that state.json doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  ########################################
  ############### CASE 4 #################
  ########################################

  echo "CASE 4"

  echo "Trigger a failing configure hook"
  touch /root/disabled-svcs-kept-fail

  echo "Try refreshing to a revision with a service changed into an app (which should fail)"
  if snap install --dangerous disabled-svcs-kept_3.0*.snap; then
    echo "install should have failed"
    exit 1
  fi

  echo "Remove the failing configure hook trigger"
  rm /root/disabled-svcs-kept-fail

  echo "Check that state.json doesn't contain last-active-disabled-services"
  check_state_json_no_disabled_svcs

  echo "Check that the service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc\\s+disabled\\s+inactive"

  ########################################
  ############### CASE 5 #################
  ########################################

  echo "CASE 5"

  echo "Refresh to a new revision with a renamed service"
  # this is x3
  snap install --dangerous disabled-svcs-kept_2.0*.snap

  echo "Trigger a failing configure hook"
  touch /root/disabled-svcs-kept-fail

  echo "Disable the renamed service"
  snap stop --disable disabled-svcs-kept.svc2

  echo "Check that the renamed service is now disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  echo "Try a revert (which should fail)"
  if snap revert disabled-svcs-kept --revision=x2; then
    echo "revert should have failed"
    exit 1
  fi

  echo "Remove the failing configure hook trigger"
  rm /root/disabled-svcs-kept-fail

  echo "Check that the renamed service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  echo "Check that state.json still contains the old service in last-active-disabled-services"
  check_state_json_specific_disabled_svc svc

  ########################################
  ############### CASE 6 #################
  ########################################

  echo "CASE 6"

  echo "Trigger a failing configure hook"
  touch /root/disabled-svcs-kept-fail

  echo "Try refreshing to a revision without services (which should fail)"
  if snap install --dangerous disabled-svcs-kept_4.0*.snap; then
    echo "install should have failed"
    exit 1
  fi

  echo "Remove the failing configure hook trigger"
  rm /root/disabled-svcs-kept-fail

  echo "Check that the original renamed service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"

  echo "Check that state.json still contains the old service in last-active-disabled-services"
  check_state_json_specific_disabled_svc svc

  ########################################
  ############### CASE 7 #################
  ########################################

  echo "CASE 7"

  echo "Trigger a failing configure hook"
  touch /root/disabled-svcs-kept-fail

  echo "Try refreshing to a revision with a service changed into an app (which should fail)"
  if snap install --dangerous disabled-svcs-kept_3.0*.snap; then
    echo "install should have failed"
    exit 1
  fi

  echo "Check that state.json still contains the old service in last-active-disabled-services"
  check_state_json_specific_disabled_svc svc

  echo "Check that the new service is still disabled"
  snap services disabled-svcs-kept | MATCH "disabled-svcs-kept\\.svc2\\s+disabled\\s+inactive"
