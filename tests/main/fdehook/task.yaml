summary: Ensure that calling fdehook binaries works

# enough to test this on ubuntu 20.04+
systems: [ubuntu-2*]

environment:
    # an empty $topsrcdir/tests/go.mod seems to break importing or building go
    # packages referenced by their import paths while under the tests directory,
    # need to disable go modules support for this test
    GO111MODULE: off

prepare: |
    tests.cleanup prepare

execute: |
    # build a fde hook runner
    go build run-fdehook.go

    echo "Run trivial unlock fde hook"
    # create trivial "unlock" fde hook
    mkdir -p fake-kernel/meta/hooks/
    cat > fake-kernel/meta/hooks/fde <<'EOF'
    #!/bin/sh -e
    echo "$(cat -)"
    EOF
    chmod +x fake-kernel/meta/hooks/fde
    # validate that unlock input/output works
    echo fake-sealed-key | ./run-fdehook ./fake-kernel | MATCH "unsealed key"

    echo "Run fde hook at triggers the sandboxing via a mount"
    # create bind mount *target* here (and add cleanup)
    touch /tmp/test-bind-mount
    # the umount should not be needed as the mount will be blocked by seccomp
    tests.cleanup defer umount "/tmp/test-bind-mount"
    tests.cleanup defer rm -f "/tmp/test-bind-mount"
    # now validate that mounting is sandboxed
    cat > fake-kernel/meta/hooks/fde <<'EOF'
    #!/bin/sh -e
    mount -o bind /bin/true /tmp/test-binary
    echo "mount was successful"
    EOF
    set +e
    echo fake-sealed-key | ./run-fdehook ./fake-kernel
    RET=$?
    set -e
    test "$RET" -ne 0
    # no mount was performed
    not test -x /tmp/test-bind-mount

    echo "Run fdehook that runs too long"
    cat > fake-kernel/meta/hooks/fde <<'EOF'
    #!/bin/sh -e
    sleep 60
    echo "done sleeping"
    EOF
    set +e
    echo fake-sealed-key | DEBUG_FDEHOOK_RUNTIME_MAX=10s ./run-fdehook ./fake-kernel > output.txt
    RET=$?
    set -e
    test "$RET" -ne 0
    NOMATCH "done sleeping" < output.txt

restore: |
    tests.cleanup restore
