summary: ensure snap-confine denies operation when not in expected location

details: |
    Ensure that when running from an unexpected location, snap-confine will
    not execute the snap-discard-ns helper from the same location since
    this may not be the one which is expected.

environment:
    SNAP_CONFINE: $(os.paths libexec-dir)/snapd/snap-confine

prepare: |
    echo "Install a helper snap"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh

execute: |
    # copy snap-confine with full permissions to /tmp - ideally we would do
    # this by hardlinking snap-confine into /tmp to make this a more
    # realistic test (as this is something a regular user could do assuming
    # fs.protected_hardlinks is disabled) but some spread systems have /tmp
    # on a tmpfs and hence a different mount point so instead copy it as
    # root for the test
    echo "Copying snap-confine to /tmp"

    cp -a "$SNAP_CONFINE" /tmp
    tests.cleanup defer rm -f /tmp/snap-confine
    # ensure has the correct permissions
    diff <(stat -c "%U %G %a" "$SNAP_CONFINE") <(stat -c "%U %G %a" /tmp/snap-confine)

    # then execute /tmp/snap-confine - this should fail since snap-confine
    # is not in the location it expects to be when it goes to find the
    # snap-discard-ns etc helper binaries
    env -i SNAP_INSTANCE_NAME=test-snapd-sh /tmp/snap-confine --base snapd snap.test-snapd-sh.sh /nonexistent 2>/tmp/snap-confine-output.txt && exit 1
    tests.cleanup defer rm -f /tmp/snap-confine-output.txt
    MATCH "running from unexpected location: /tmp/snap-confine" /tmp/snap-confine-output.txt

