summary: Checks for parallel installation of sideloaded snaps


execute: |
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    path="$(make_snap test-snapd-tools)"

    echo "Sideload the regular snap"
    snap install --dangerous "$path"

    #shellcheck source=tests/lib/dirs.sh
    . "$TESTSLIB"/dirs.sh

    for instance in foo longname; do
        echo "Sideload same snap as different instance named test-snapd-tools_$instance"
        expected="^test-snapd-tools_$instance 1.0 installed\$"
        snap install --dangerous --name "test-snapd-tools_$instance" "$path" | MATCH "$expected"

        test -d "$SNAP_MOUNT_DIR/test-snapd-tools_$instance/x1"
        # TODO: running from snap will fail until low-level bits are done
        rm -f run.err
        ! "test-snapd-tools_$instance.success" > run.err 2>&1
        MATCH "security tag snap.test-snapd-tools_$instance.success not allowed" < run.err
    done

    echo "All snaps are listed"
    snap list | MATCH '^test-snapd-tools '
    snap list | MATCH '^test-snapd-tools_foo '
    snap list | MATCH '^test-snapd-tools_longname '

    echo "Removing one instance does not remove other instances' directories"
    snap remove test-snapd-tools_foo
    test -d "$SNAP_MOUNT_DIR/test-snapd-tools_longname/x1"
    test -d "$SNAP_MOUNT_DIR/test-snapd-tools/x1"
