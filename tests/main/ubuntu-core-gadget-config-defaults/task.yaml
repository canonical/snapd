summary: |
   Test that config defaults specified in the gadget are picked up
   for first boot snaps
systems: [ubuntu-core-16-64]
prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    . $TESTSLIB/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json
    snap download --edge test-snapd-with-configure
    unsquashfs /var/lib/snapd/snaps/pc_*.snap
    # fill in defaults
    TEST_SNAP_ID=
    if [ "$SNAPPY_USE_STAGING_STORE" = 1 ]; then
        TEST_SNAP_ID=jHxWQxtGqu7tHwiq7F8Ojk5qazcEeslT
    else
        TEST_SNAP_ID=aLcJorEJZgJNUGL2GMb3WR9SoVyHUNAd
    fi
    cat >> squashfs-root/meta/gadget.yaml <<EOF

    defaults:
       ${TEST_SNAP_ID}:
         a: A
         b: B
    EOF
    mksquashfs squashfs-root pc_x1.snap -comp gzip -no-fragments
    rm -rf squashfs-root
    cp pc_x1.snap /var/lib/snapd/seed/snaps/
    cp test-snapd-with-configure_*.snap /var/lib/snapd/seed/snaps/
    mv /var/lib/snapd/seed/assertions/model model.bak
    cp /var/lib/snapd/seed/seed.yaml seed.yaml.bak
    python3 ./manip_seed.py /var/lib/snapd/seed/seed.yaml test-snapd-with-configure_*.snap
    cp $TESTSLIB/assertions/developer1.account /var/lib/snapd/seed/assertions
    cp $TESTSLIB/assertions/developer1.account-key /var/lib/snapd/seed/assertions
    cp $TESTSLIB/assertions/developer1-pc-w-config.model /var/lib/snapd/seed/assertions
    cp $TESTSLIB/assertions/testrootorg-store.account-key /var/lib/snapd/seed/assertions
    cp test-snapd-with-configure_*.assert /var/lib/snapd/seed/assertions
    # kick first boot again
    systemctl start snapd.service snapd.socket
restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    . $TESTSLIB/systemd.sh
    systemctl stop snapd.service snapd.socket
    rm -rf /var/lib/snapd/assertions/*
    rm -rf /var/lib/snapd/device
    rm -rf /var/lib/snapd/state.json

    if systemctl status snap-pc-x1.mount ; then
       systemctl stop snap-pc-x1.mount
       rm -f /etc/systemd/system/snap-pc-x1.mount
       rm -f /etc/systemd/system/multi-user.target.wants/snap-pc-x1.mount
       rm -f /var/lib/snapd/snaps/pc_x1.snap
       systemctl daemon-reload
    fi
    rm /var/lib/snapd/seed/snaps/pc_x1.snap

    TEST_REVNO=$(awk "/^snap-revision: / {print \$2}" test-snapd-with-configure_*.assert)
    if systemctl status snap-test-snapd-with-configure-${TEST_REVNO}.mount ; then
       systemctl stop snap-test-snapd-with-configure-${TEST_REVNO}.mount
       rm -f /etc/systemd/system/snap-test-snapd-with-configure-${TEST_REVNO}.mount
       rm -f /etc/systemd/system/multi-user.target.wants/snap-test-snapd-with-configure-${TEST_REVNO}.mount
       rm -f /var/lib/snapd/snaps/test-snapd-with-configure_*.snap
       systemctl daemon-reload
    fi
    rm /var/lib/snapd/seed/snaps/test-snapd-with-configure_*.snap

    cp seed.yaml.bak /var/lib/snapd/seed/seed.yaml
    rm -f /var/lib/snapd/seed/assertions/developer1.account
    rm -f /var/lib/snapd/seed/assertions/developer1.account-key
    rm -f /var/lib/snapd/seed/assertions/developer1-pc-w-config.model
    rm -f /var/lib/snapd/seed/assertions/testrootorg-store.account-key
    rm -f /var/lib/snapd/seed/assertions/test-snapd-with-configure_*.assert
    cp model.bak /var/lib/snapd/seed/assertions/model
    rm -f *.bak
    # kick first boot again
    systemctl start snapd.service snapd.socket
    # wait for first boot to be done
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    echo "Wait for first boot to be done"
    while ! snap changes | grep -q "Done.*Initialize system state"; do sleep 1; done
    echo "We have a model assertion"
    snap known model|MATCH "model: my-model-w-config"

    echo "The configurable snap was installed"
    snap list|MATCH "test-snapd-with-configure"

    echo "The configuration defaults from the gadget where applied"
    snap get test-snapd-with-configure a|MATCH "^A$"
    snap get test-snapd-with-configure b|MATCH "^B$"
