summary: Ensure the default policy is correct for base and core bases

details: |
    Ideally we would check that:
    
    1. 'base: core' can access a core-only rule that 'base: other' cannot
    2. 'base: other' can access a base-only rule that 'base: core' cannot
    3. both can access something allowed by common rules
    
    While there are no core-only rules at this time for '1', we can at least
    test that 'grep --version' (differently allowed by core-only and
    base-only rules) does not get blocked. Combined with '2', this proves
    that that the 'base: core' snap has core-only policy but not base-only
    policy. Until we have a core-only rule that can be tested here, we'll
    rely on unit tests to ensure that base snaps don't have core-only rules).

prepare: |
    echo "Given basic snaps are installed"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh-core
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh-core18

    # core26 is currently only available on edge
    if ! snap list core26 2> /dev/null; then
        snap install --edge core26
    fi
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh-core26

    # test-snapd-core18 is only available on amd64
    if os.query is-pc-amd64; then
        "$TESTSTOOLS"/snaps-state install-local test-snapd-sh-other18
    fi

execute: |
    # technically only apparmor file mediation is needed but strict is what
    # guarantees it is in use
    if [ "$(snap debug confinement)" != strict ]; then
        exit 0
    fi

    # 'grep' is allowed explicitly in core rules and via glob rule in base
    # rules
    echo "Then 'grep --version' is allowed by core"
    test-snapd-sh-core.sh -c 'grep --version' 2>&1 | NOMATCH "Permission denied"
    test-snapd-sh-core18.sh -c 'grep --version' 2>&1 | NOMATCH "Permission denied"

    echo "Then a common rule should succeed with either base"
    test-snapd-sh-core.sh -c 'grep root /etc/passwd' 2>&1 | MATCH "root:"
    test-snapd-sh-core18.sh -c 'grep root /etc/passwd' 2>&1 | MATCH "root:"
    if os.query is-pc-amd64; then
        test-snapd-sh-other18.sh -c 'grep root /etc/passwd' 2>&1 | MATCH "root:"
    fi

    # 'ls' is allowed explicitly in core rules and via glob rule in base rules
    # so fail with core if EPERM on exec of /bin/ls and fail with base if EPERM
    # on anything.
    echo "But a base-only rule should only pass with non-core base"
    test-snapd-sh-core.sh -c 'ls -l /var' 2>&1 | MATCH "'/var': Permission denied"
    test-snapd-sh-core18.sh -c 'ls -l /var' 2>&1 | MATCH "'/var': Permission denied"
    if os.query is-pc-amd64; then
        test-snapd-sh-other18.sh -c 'ls -l /var' 2>&1 | NOMATCH "Permission denied"
    fi

    # core26 chose to ship coreutils-uutils at their native
    # installation location used by cargo. the template was updated
    # accordingly to allow them.
    echo "Check if expected coreutils paths are allowed"
    # /usr/bin/true - usually a symlink to /usr/lib/cargo/bin/coreutils/true
    # /usr/lib/cargo/bin/coreutils/true - true from coreutils-uutils
    # /usr/bin/gnutrue - GNU coreutils
    for variant in /usr/bin/true /usr/bin/gnutrue /usr/lib/cargo/bin/coreutils/true; do
        test-snapd-sh-core26.sh -c "$variant"
    done
    # template doesn't contain permissions for whoami
    for variant in /usr/bin/whoami /usr/bin/gnuwhoami /usr/lib/cargo/bin/coreutils/whoami; do
        test-snapd-sh-core26.sh -c "$variant" 2>&1 | MATCH "Permission denied"
    done
