summary: Test that snaps still work when /home is a NFS mount

details: |
    Snapd now contains a feature where NFS-mounted /home (or any sub-directory)
    initializes a workaround mode where all snaps gain minimal amount of network
    permissions sufficient for NFS to operate.

# takes >1.5min to run
backends: [-autopkgtest]

# ubuntu-core: nfs service not available on core
# opensuse: the test is failing after retry several times the snapd service reaching the systemd start-limit.
# fedora, centos: disable until we figure out how to handle NFS and SELinux
#                 labels, labels can only be exported for NFSv4.2+ with security_label option
# ubuntu-14.04-64: group 'systemd-journal' does not exist
# amazon-linux-2023: nfs service unit does not exist
systems: [-ubuntu-core-*, -opensuse-*, -fedora-*, -centos-*, -ubuntu-14.04-64, -amazon-linux-2023-*]

prepare: |
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh

    # If /proc/fs/nfsd is not initially mounted then ask the test to unmount it later.
    if not mountinfo.query /proc/fs/nfsd .fs_type=nfsd; then
        touch /tmp/please-unmount-nfsd
        echo "the test needs to unmount /proc/fs/nfsd if it becomes mounted"
    fi
    # If /var/lib/nfs/rpc_pipefs is not initially mounted then ask the test to unmount it later.
    if not mountinfo.query /var/lib/nfs/rpc_pipefs .fs_type=rpc_pipefs; then
        touch /tmp/please-unmount-rpc-pipefs
        echo "the test needs to unmount /var/lib/nfs/rpc_pipefs if it becomes mounted"
    fi

restore: |
    # Unmount NFS mount over /home if one exists.
    if mountinfo.query /home; then
        umount /home
    fi

    rm -f ~test/.snap/auth.json

    # Restore the fstab backup file if one exists.
    if [ -e /tmp/fstab.orig ]; then
        mv /tmp/fstab.orig /etc/fstab
    fi

    # Remove the NFS server and its configuration data.
    rm -f /etc/exports.d/test.exports
    rm -f -d /etc/exports.d
    exportfs -r

    # Restart snapd in to ensure it doesn't know about NFS configuration anymore.
    systemctl stop snapd.service snapd.socket
    systemctl reset-failed snapd.service snapd.socket
    systemctl start snapd.service

    # Depending on OS do cleanup appropriate for the host.
    case "$SPREAD_SYSTEM" in
        ubuntu-14.04-*)
            # On Ubuntu 14.04 we started the NFS server so stop it here. On
            # other versions of Ubuntu the server was pre-installed and
            # running so we don't have to stop it.
            service nfs-kernel-server stop
            ;;
        arch-*)
            # The nfsdcld service may keep rpc_pipefs busy, as seen in this output from lsof.
            # nfsdcld 5736 root   10u  FIFO   0,47      0t0  114 /var/lib/nfs/rpc_pipefs/nfsd/cld (deleted)
            systemctl stop nfsdcld.service
            systemctl stop nfs-server.service
            systemctl disable nfs-server.service
            ;;
        amazon-*|centos-*)
            systemctl stop nfs
            systemctl disable nfs
            ;;
    esac
    if [ -e /tmp/please-unmount-nfsd ]; then
        if mountinfo.query /proc/fs/nfsd .fs_type=nfsd; then
            umount /proc/fs/nfsd
        fi
        rm -f /tmp/please-unmount-nfsd
    fi
    if [ -e /tmp/please-unmount-rpc-pipefs ]; then
        if mountinfo.query /var/lib/nfs/rpc_pipefs .fs_type=rpc_pipefs; then
            umount /var/lib/nfs/rpc_pipefs
        fi
        rm -f /tmp/please-unmount-rpc-pipefs
    fi
    # If the system originally had NFS installed, restore the status after
    # changes made in switch-case above.
    case "$SPREAD_SYSTEM" in
        ubuntu-14.04-*)
            service nfs-kernel-server start
            ;;
    esac

debug: |
    lsof | grep /home
    fuser -mv /home

execute: |
    # only needed because we do it 11 times (!)
    restart_snapd() {
        systemctl stop snapd.service snapd.socket
        systemctl reset-failed snapd.service snapd.socket
        systemctl start snapd.service
    }
    ensure_extra_perms() {
        if [ "$(snap debug confinement)" = strict ]; then
            MATCH 'network inet,' < /var/lib/snapd/apparmor/snap-confine/nfs-support
            MATCH 'network inet,' < /var/lib/snapd/apparmor/profiles/snap.test-snapd-sh.with-home-plug
        fi
    }

    ensure_normal_perms() {
        if [ "$(snap debug confinement)" = strict ]; then
            test ! -e /var/lib/snapd/apparmor/snap-confine/nfs-support
            NOMATCH 'network inet,' < /var/lib/snapd/apparmor/profiles/snap.test-snapd-sh.with-home-plug
        fi
    }

    # This test calls umount right after executing a "su" command with the
    # "test" user. But this can randomly fail, because entering the user
    # session causes systemd to activate the dbus.service unit for the "test"
    # user for the duration of the command, but its shutdown (which happens in
    # the background) might take a little longer and leave the dbus-daemon
    # "using" the /home/test directory, therefore preventing the umount.
    umount_with_retry() {
        # systemd-logind has a 10 seconds timeout for shutting down the user
        # session, but we don't want to wait that long: let's kill all the
        # processes belonging to the test user ourselves.
        ps -U test -o pid= | while read -r PID
        do
            kill -9 "$PID" || true
        done
        retry -n 10 --wait 0.5 umount "$1"
    }

    # Export /home over NFS.
    mkdir -p /etc/exports.d/
    # no no_root_squash as we want to test for that scenario
    echo '/home localhost(rw,no_subtree_check)' > /etc/exports.d/test.exports

    # Make sure the nfs service is running
    case "$SPREAD_SYSTEM" in
        ubuntu-14.04-*)
            service nfs-kernel-server start
            ;;
        ubuntu-*|debian-*)
            systemctl restart nfs-kernel-server
            ;;
        fedora-*)
            # Enable udp protocol for nfs on fedora which is disabled by default
            sed -i -e 's/RPCNFSDARGS=.*/RPCNFSDARGS="--udp"/g' /etc/sysconfig/nfs
            # FIXME: this is not restored anywhere.
            systemctl restart nfs
            ;;
        arch-*)
            systemctl enable nfs-server.service
            systemctl start nfs-server.service
            ;;
        opensuse-*)
            systemctl enable nfsserver.service
            systemctl start nfsserver.service
            ;;
        amazon-*|centos-*)
            systemctl enable nfs
            systemctl restart nfs
            ;;
    esac

    # Synchronize the nfs directories
    nfs_sync=0
    for _ in $(seq 5); do
        if exportfs -r; then
            nfs_sync=1
            break
        fi
        sleep 1
    done
    # Check synchronization for the nfs directories is done
    [ $nfs_sync = 1 ]

    # Ensure that apparmor profiles don't permit network access
    ensure_normal_perms

    # Mount NFS-exported /home over real /home using NFSv3 and TCP transport
    mount -t nfs localhost:/home /home -o nfsvers=3,proto=tcp

    # Restart snapd to observe the active NFS mount.
    restart_snapd

    # Ensure that snap-confine's apparmor profile and the test snap's apparmor
    # profile now permit network access.
    ensure_extra_perms

    # As a non-root user perform a write over NFS-mounted /home
    #shellcheck disable=SC2016
    su -c 'snap run test-snapd-sh.with-home-plug -c "touch \$SNAP_USER_DATA/smoke-nfs3-tcp"' test

    # With this the following snap commands will generate EOF errors but
    # not perm issues
    su -c 'cd; install -d -m 0700 .snap; install  -m 0600 /dev/null .snap/auth.json' test
    # Test auth.json access
    su -c 'snap list' test 2>&1 |MATCH EOF
    su -c 'sudo snap list' test 2>&1 |MATCH EOF
    su -c 'sg systemd-journal -c "snap list"' test 2>&1 |MATCH EOF

    # Unmount /home and restart snapd so that we can check another thing.
    umount_with_retry /home
    restart_snapd

    # Ensure that this removed the extra permissions.
    ensure_normal_perms

    # Skip udp protocol on arch-linux and debian-sid because it is not supported. Error displayed:
    # - arch: mount.nfs: requested NFS version or transport protocol is not supported
    # - debian-sid: mount.nfs: an incorrect mount option was specified
    # - ubuntu-2*: mount.nfs: an incorrect mount option was specified
    if not os.query is-arch-linux && not os.query is-debian && not os.query is-ubuntu-ge 20.04; then
        # Mount NFS-exported /home over real /home using NFSv3 and UDP transport
        mount -t nfs localhost:/home /home -o nfsvers=3,proto=udp

        # Restart snapd to observe the active NFS mount.
        restart_snapd

        # Ensure that snap-confine's apparmor profile and the test snap's apparmor
        # profile now permit network access.
        ensure_extra_perms

        # As a non-root user perform a write over NFS-mounted /home
        #shellcheck disable=SC2016
        su -c 'snap run test-snapd-sh.with-home-plug -c "touch \$SNAP_USER_DATA/smoke-nfs3-udp"' test
        # Test auth.json access
        su -c 'snap list' test 2>&1 |MATCH EOF
        su -c 'sudo snap list' test 2>&1 |MATCH EOF
        su -c 'sg systemd-journal -c "snap list"' test 2>&1 |MATCH EOF

        # Unmount /home and restart snapd so that we can check another thing.
        umount_with_retry /home
        restart_snapd

        # Ensure that this removed the extra permissions.
        ensure_normal_perms
    fi

    # Mount NFS-exported /home over real /home using NFSv4
    mount -t nfs localhost:/home /home -o nfsvers=4

    # Restart snapd to observe the active NFS mount.
    restart_snapd

    # Ensure that snap-confine's apparmor profile and the test snap's apparmor
    # profile now permit network access.
    ensure_extra_perms

    # As a non-root user perform a write over NFS-mounted /home
    #shellcheck disable=SC2016
    su -c 'snap run test-snapd-sh.with-home-plug -c "touch \$SNAP_USER_DATA/smoke-nfs4"' test
    # Test auth.json access
    su -c 'snap list' test 2>&1 |MATCH EOF
    su -c 'sudo snap list' test 2>&1 |MATCH EOF
    su -c 'sg systemd-journal -c "snap list"' test 2>&1 |MATCH EOF

    # Unmount /home and restart snapd so that we can check another thing.
    umount_with_retry /home
    restart_snapd

    # Ensure that this removed the extra permissions.
    ensure_normal_perms

    # Back up the /etc/fstab file and define a NFS mount mount there.
    cp -a /etc/fstab /tmp/fstab.orig
    echo 'localhost:/home /home nfs defaults 0 0' >> /etc/fstab

    # Restart snapd and ensure that we have extra permissions again.
    #
    # Note that at this time /home is not mounted as NFS yet but the mere
    # presence of the entry in /etc/fstab is sufficient to grant extra
    # permissions.
    restart_snapd
    ensure_extra_perms
