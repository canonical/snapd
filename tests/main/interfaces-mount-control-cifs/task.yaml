summary: Test mount-control with CIFS shares

details: |
    Verify that CIFS mounts can be performed with mount-control.

# limit to systems where we know samba is recent enough and works without issues
systems:
  - ubuntu-22.04-*
  - ubuntu-24.04-*

prepare: |
    # Mount should not leak
    tests.cleanup defer NOMATCH 'cifs-share' /proc/self/mountinfo

    # Create directory which the test will share
    if [ ! -d /var/cifs-share ]; then
      mkdir /var/cifs-share
      tests.cleanup defer rm -r /var/cifs-share
    fi
    echo 'hello from CIFS share' > /var/cifs-share/hello

    # Install a package with additional kernel modules
    if ! tests.pkgs install "linux-modules-extra-$(uname -r)"; then
      echo "SKIP: Kernel version and extras module mismatch"
      exit 1
    fi

    tests.pkgs install samba smbclient
    # back up the origianl configuration
    tests.backup prepare /etc/samba
    tests.cleanup defer tests.backup restore /etc/samba

    # set up the share
    cat <<-__SMB__ >>'/etc/samba/smb.conf'
    [var-cifs-share]
    comment = test CIFS share
    path = /var/cifs-share
    browseable = yes
    read only = no
    create mask = 0755
    directory mask = 0755
    smb3 unix extensions = yes
    ea support = yes
    guest ok = yes
    __SMB__

    # another entry with password based auth
    cat <<-__SMB__ >>'/etc/samba/smb.conf'
    [var-cifs-share-with-password]
    comment = test CIFS share with user auth
    path = /var/cifs-share
    browseable = yes
    read only = no
    create mask = 0755
    directory mask = 0755
    smb3 unix extensions = yes
    ea support = yes
    user = test
    __SMB__

    # set the test user password
    (echo 'test' ; echo 'test') | smbpasswd  -a test
    tests.cleanup defer smbpasswd -x test

    systemctl restart smbd.service

    smbclient --no-pass -L //localhost | MATCH "var-cifs-share .* test CIFS share"
    # logging in as user does not change share visibility, but we only verify
    # credentials here
    smbclient --user test --password test -L //localhost | MATCH "var-cifs-share-with-password .* test CIFS share"

restore: |
    tests.cleanup restore

execute: |
    snap install test-snapd-mount-control-cifs
    mkdir -p /media/mounted
    tests.cleanup defer rm -rf /media/mounted

    # Connect removable media first so that we can 'read' files.
    snap connect test-snapd-mount-control-cifs:removable-media

    # Blocked by seccomp, hence EPERM rather than EACCESS
    test-snapd-mount-control-cifs.cmd mount.cifs -o guest //localhost/var-cifs-share /media/mounted 2>&1 | \
        MATCH 'Operation not permitted'

    test-snapd-mount-control-cifs.cmd snapctl mount -t cifs -o rw,guest //localhost/var-cifs-share /media/mounted 2>&1 | \
        MATCH 'no matching mount-control connection found'

    echo "When the mount-control interface which lists CIFS is connected"
    snap connect test-snapd-mount-control-cifs:mntctl

    echo "It is possible to mount the share directly from the snap as a guest"
    test-snapd-mount-control-cifs.cmd mount.cifs -o guest //localhost/var-cifs-share /media/mounted
    echo "Read the contents under the mount point"
    test-snapd-mount-control-cifs.cmd cat /media/mounted/hello | MATCH 'hello from CIFS share'
    echo "And unmount it"
    test-snapd-mount-control-cifs.cmd umount /media/mounted

    echo "It is possible to mount the share directly from the snap as an authenticated user"
    # mounting password proteced share are a guest fails
    if test-snapd-mount-control-cifs.cmd mount.cifs -o rw,guest \
        //localhost/var-cifs-share-with-password /media/mounted; then
        echo "unexpected success when mounting as guest"
        exit 1
    fi
    # but succeeds as a user
    test-snapd-mount-control-cifs.cmd mount.cifs -o rw,user=test,password=test \
        //localhost/var-cifs-share-with-password /media/mounted
    echo "Read the contents under the mount point"
    test-snapd-mount-control-cifs.cmd cat /media/mounted/hello | MATCH 'hello from CIFS share'
    echo "And unmount it"
    test-snapd-mount-control-cifs.cmd umount /media/mounted

    echo "Same thing works through snapctl"
    # note using 'localhost' occasionally fails, let's use the IP address
    test-snapd-mount-control-cifs.cmd snapctl mount -t cifs -o rw,guest //127.0.0.1/var-cifs-share /media/mounted
    test-snapd-mount-control-cifs.cmd cat /media/mounted/hello | MATCH 'hello from CIFS share'
    test-snapd-mount-control-cifs.cmd snapctl umount /media/mounted

    # snapctl matches the mount against all options, which means that
    # authentication data would need to be part of the attribute specification
    not test-snapd-mount-control-cifs.cmd snapctl mount -t cifs -o rw,user=test,password=test \
        //localhost/var-cifs-share /media/mounted 2> snapctl-mount-auth.log
    MATCH "no matching mount-control connection found" < snapctl-mount-auth.log
