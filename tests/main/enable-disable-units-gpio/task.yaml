summary: Check that systemd units are enabled/disabled and gpio works after rebooting

details: |
    This test makes sure that the systemd snippet created by the gpio interface
    is executed after a reboot.

    It modifies the core snap to provide a gpio slot. Also, a mocked gpio node and the
    required systemfs files (export and unexeport) are created as a bind mount. The test
    expects that, after a snap declared a gpio plug is installed and connected, after
    a reboot the systemd service tries to regenerate the gpio device node if it does not
    find it.

systems: [ubuntu-core-16-64]

prepare: |
    # shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB/systemd.sh"
    echo "Create/enable fake gpio"
    systemd_create_and_start_persistent_unit fake-gpio "$TESTSLIB/fakegpio/fake-gpio.py" "[Unit]\nBefore=snap.core.interface.gpio-100.service\n[Service]\nType=notify"

    echo "Given a snap declaring a plug on gpio is installed"
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    install_local gpio-consumer

    echo "And the gpio plug is connected"
    snap connect gpio-consumer:gpio :gpio-pin

restore: |
    # shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB/systemd.sh"
    system_stop_and_remove_persistent_unit fake-gpio
    umount /sys/class/gpio || true

execute: |
    # shellcheck source=tests/lib/journalctl.sh
    . "$TESTSLIB/journalctl.sh"

    echo "Then the snap service units concerning the gpio device must be run before and after a reboot"
    expected="Unit snap.core.interface.gpio-100.service has finished starting up"
    get_journalctl_log -xe --no-pager | MATCH "$expected"

    if [ "$SPREAD_REBOOT" = "0" ]; then
        REBOOT
    fi

    if [ "$SPREAD_REBOOT" = "1" ]; then
        test -e /sys/class/gpio/gpio100
    fi
