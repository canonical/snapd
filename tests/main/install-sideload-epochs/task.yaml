summary: Checks for snap sideload install w/ mismatched epochs

details: |
    Check that updating a snap via a sideload install fails if snapd can't read
    the previous version's epoch. This ensures that an update can't result in
    the snap not being able to read previous version's data.

environment:
    # Ensure that running purely from the deb (without re-exec) works
    # correctly
    SNAP_REEXEC/reexec0: 0
    SNAP_REEXEC/reexec1: 1

prepare: |
    if [ "$SNAP_REEXEC" = "0" ] && tests.info is-snapd-from-archive; then
        tests.exec skip-test "No needed to test the snap pkg when it is coming from the repository" && exit 0
    fi
    snap pack test-snapd-epoch-1
    snap pack test-snapd-epoch-2

execute: |
    tests.exec is-skipped && exit 0

    rx="cannot refresh \"[^ \"]*\" to local snap with epoch [^ ]*, because it can't read the current epoch"
    snap try test-snapd-epoch-1
    not snap try test-snapd-epoch-2 2> try.err
    tr -s "\n " "  "  < try.err      | MATCH "$rx"

    not snap install --dangerous test-snapd-epoch_2_all.snap 2>install.err
    tr -s "\n " "  "  < install.err  | MATCH "$rx"

    snap remove --purge test-snapd-epoch
    snap install --dangerous test-snapd-epoch_2_all.snap
    not snap install --dangerous test-snapd-epoch_1_all.snap 2>install1.err
    tr -s "\n " "  "  < install1.err  | MATCH "$rx"

    snap remove --purge test-snapd-epoch
