summary: Each snap app and hook is tracked in a pids cgroup
# fedora-31: uses cgroupv2, which does not have a separate pids controller hierarchy
# fedora-32: uses cgroupv2, which does not have a separate pids controller hierarchy
systems: [ -fedora-31-*, -fedora-32-*]

details: |
    This test creates a snap process that suspends itself and ensures that it
    placed into the appropriate hierarchy under the pids cgroup.

prepare: |
    # This feature depends on the release-app-awareness feature
    snap set core experimental.refresh-app-awareness=true

    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    install_local test-snapd-sh

restore: |
    rmdir /sys/fs/cgroup/pids/snap.test-snapd-sh.sh || true

    # TODO: There is currently no way to unset configuration options.
    # Once this is fixed please uncomment this line:
    # snap unset core experimental.refresh-app-awareness

execute: |
    trap 'killall test-snapd-sh || true' EXIT
    # Start a "sleep" process in the background
    #shellcheck disable=SC2016
    test-snapd-sh.sh -c 'touch $SNAP_DATA/1.stamp && exec sleep 1h' &
    pid1=$!
    # Ensure that snap-confine has finished its task and that the snap process
    # is active. Note that we don't want to wait forever either.
    for _ in $(seq 30); do
        test -e /var/snap/test-snapd-sh/current/1.stamp && break
        sleep 0.1
    done
    # While the process is alive itselfs PID can be seen in the cgroup.procs file
    # of the pid controller.
    MATCH "$pid1" < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs

    # Start a second process so that we can check adding tasks to an existing
    # control group.
    #shellcheck disable=SC2016
    test-snapd-sh.sh -c 'touch $SNAP_DATA/2.stamp && exec sleep 1h' &
    pid2=$!
    for _ in $(seq 30); do
        test -e /var/snap/test-snapd-sh/current/2.stamp && break
        sleep 0.1
    done
    MATCH "$pid2" < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs

    # When the process terminates the control group is updated and the task no
    # longer registers there.
    kill "$pid1"
    wait "$pid1" || true  # wait returns the exit code and we kill the process
    not MATCH "$pid1" < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs

    kill "$pid2"
    wait "$pid2" || true  # same as above
    not MATCH "$pid2" < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs

    # If a snap command forks a child process it is also tracked.
    #shellcheck disable=SC2016
    test-snapd-sh.sh -c 'touch $SNAP_DATA/3.stamp && sleep 1h' &
    pid3=$!

    # Ensure that snap-confine has finished its task and that the snap process
    # is active. Note that we don't want to wait forever either.
    for _ in $(seq 30); do
        test -e /var/snap/test-snapd-sh/current/3.stamp && break
        sleep 0.1
    done
    # While the process is alive its PID can be seen in the cgroup.procs file
    # of the pid controller.
    MATCH "$pid3" < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs

    # Because the script above used "sleep 1h" instead of "exec sleep 1h" there
    # are now two processes: the shell and sleep.
    test "$(wc -l < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs)" -eq 2
    kill "$pid3"
    test "$(wc -l < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs)" -eq 1
    # Kill the remaining cgroup process.
    while read -r pid; do
        kill "$pid"
    done < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs
    wait "$pid3" || true  # same as above
    test "$(wc -l < /sys/fs/cgroup/pids/snap.test-snapd-sh.sh/cgroup.procs)" -eq 0
