summary: Ensure the snapd works without core on classic systems

# Run only on ubuntu classic because this re-execs.  We have a
# separate test for UC18 already and on UC16 we always have a core
# snap so we don't need to test there.
systems: [ubuntu-1*, ubuntu-2*]

environment:
    # uploading large snap triggers OOM
    SNAPD_NO_MEMORY_LIMIT: 1

restore: |
    rm -f /tmp/snapd_*.snap

execute: |
    if [ "${SNAP_REEXEC:-}" = "0" ]; then
        echo "skipping test when SNAP_REEXEC is disabled"
        exit 0
    fi

    echo "Create modified snapd snap"
    #shellcheck source=tests/lib/prepare.sh
    . "$TESTSLIB"/prepare.sh
    snap download --edge snapd
    repack_snapd_snap_with_deb_content /tmp

    echo "Ensure core is gone so that we can have snapd"
    #shellcheck source=tests/lib/pkgdb.sh
    . "$TESTSLIB"/pkgdb.sh
    distro_purge_package snapd
    distro_install_build_snapd

    echo "Install the snapd snap"
    snap set core experimental.snapd-snap=true
    snap install --dangerous /tmp/snapd_*.snap
    echo "Ensure we restarted into the snapd snap"
    "$TESTSTOOLS"/journal-state match-log  'restarting into "/snap/snapd/'

    echo "Now install a core18 based snap and ensure it works"
    snap install test-snapd-sh-core18
    test-snapd-sh-core18.sh -c 'echo hello' | MATCH hello
    echo "No core was installed"
    snap list | not grep ^"core "

    echo "Ensure we re-exec to the snapd snap"
    SNAPD_DEBUG=1 test-snapd-sh-core18.sh -c 'true' 2>&1 | MATCH 'restarting into "/snap/snapd/current'
