summary: Ensure that the personal-files interface works.

details: |
    The personal-files interface allows access specific personal files or directories.

prepare: |
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh

    # First layer of dirs and files
    "$TESTSTOOLS"/fs-state mock-file /root/.testfile1
    "$TESTSTOOLS"/fs-state mock-file /root/testfile1
    "$TESTSTOOLS"/fs-state mock-dir /root/.testdir1
    "$TESTSTOOLS"/fs-state mock-dir /root/testdir1

    # Second layer of dirs and files
    "$TESTSTOOLS"/fs-state mock-file /root/.testdir1/.testfile2
    "$TESTSTOOLS"/fs-state mock-file "/root/.testdir1/test file2"
    "$TESTSTOOLS"/fs-state mock-dir /root/.testdir1/.testdir2

    # Not accessible dirs and files
    "$TESTSTOOLS"/fs-state mock-dir /var/tmp/.testdir1
    "$TESTSTOOLS"/fs-state mock-file /var/tmp/.testfile1
    "$TESTSTOOLS"/fs-state mock-dir /var/tmp/root
    "$TESTSTOOLS"/fs-state mock-file /var/tmp/root/testfile2
    "$TESTSTOOLS"/fs-state mock-file /var/tmp/root/.testfile2

    # Creation of missing directories is only supported for non-root users
    tests.session -u test prepare

restore: |
    tests.session -u test restore
    "$TESTSTOOLS"/fs-state restore-file /root/.testfile1
    "$TESTSTOOLS"/fs-state restore-file /root/testfile1
    "$TESTSTOOLS"/fs-state restore-dir /root/.testdir1
    "$TESTSTOOLS"/fs-state restore-dir /root/testdir1
    "$TESTSTOOLS"/fs-state restore-dir /var/tmp/.testdir1
    "$TESTSTOOLS"/fs-state restore-file /var/tmp/.testfile1
    "$TESTSTOOLS"/fs-state restore-dir /var/tmp/root

execute: |
    echo "The interface is not connected by default"
    snap interfaces -i personal-files | MATCH "\\- +test-snapd-sh:personal-files"

    echo "When the interface is connected"
    snap connect test-snapd-sh:personal-files

    echo "There is a single \"ensure-dir\" kind of user mount entry for \$HOME/.local/share"
    test -e /var/lib/snapd/mount/snap.test-snapd-sh.user-fstab
    test "$(wc -l </var/lib/snapd/mount/snap.test-snapd-sh.user-fstab)" -eq 1
    # shellcheck disable=SC2016
    MATCH 'none \$HOME/.missing-parent none x-snapd.kind=ensure-dir,x-snapd.must-exist-dir=\$HOME 0 0' < /var/lib/snapd/mount/snap.test-snapd-sh.user-fstab

    echo "Then the snap run as user test can create /home/test/testdir1, but cannot create /home/test/.missing-dir/testdir1"
    tests.session -u test exec test-snapd-sh.with-personal-files-plug -c "mkdir -p /home/test/.testdir1"
    rm -rf /home/test/.testdir1
    tests.session -u test exec test-snapd-sh.with-personal-files-plug -c "mkdir -p /home/test/.missing-parent/testdir1" 2>&1| MATCH "Permission denied"

    echo "Then the snap is able to access all the files and dirs in $HOME"
    test-snapd-sh.with-personal-files-plug -c "cat /root/.testfile1" | MATCH "mock file"
    test-snapd-sh.with-personal-files-plug -c "cat /root/testfile1" | MATCH "mock file"
    test-snapd-sh.with-personal-files-plug -c "ls /root/.testdir1"
    test-snapd-sh.with-personal-files-plug -c "ls /root/testdir1"
    test-snapd-sh.with-personal-files-plug -c "cat /root/.testdir1/.testfile2" | MATCH "mock file"
    test-snapd-sh.with-personal-files-plug -c "cat '/root/.testdir1/test file2'" | MATCH "mock file"
    test-snapd-sh.with-personal-files-plug -c "ls  /root/.testdir1/.testdir2/"

    echo "Then the snap is able to write on /root/.testdir1 and /root/.testfile1"
    test-snapd-sh.with-personal-files-plug -c "echo test >> /root/.testfile1"
    test-snapd-sh.with-personal-files-plug -c "touch /root/.testdir1/testfile2"

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "Then the snap is not able to write outside /root/.testdir1 and /root/.testfile1"
    if test-snapd-sh.with-personal-files-plug -c "echo test >> /root/testfile1" 2> call.error; then
        echo "Expected permission error writing the personal file"
        exit 1
    fi
    MATCH "Permission denied" < call.error

    echo "Then the snap is not able to to access files and dirs outside $HOME"
    test-snapd-sh.with-personal-files-plug -c "ls /var/tmp/.testdir1" 2>&1| MATCH "Permission denied"
    test-snapd-sh.with-personal-files-plug -c "cat /var/tmp/.testfile1" 2>&1| MATCH "Permission denied"
    test-snapd-sh.with-personal-files-plug -c "ls /var/tmp/root/" 2>&1| MATCH "Permission denied"
    test-snapd-sh.with-personal-files-plug -c "cat /var/tmp/root/testfile2" 2>&1| MATCH "Permission denied"
    test-snapd-sh.with-personal-files-plug -c "cat /var/tmp/root/.testfile2" 2>&1| MATCH "Permission denied"

    echo "When the plug is disconnected"
    snap disconnect test-snapd-sh:personal-files

    echo "There are no user mount entries"
    test ! -e /var/lib/snapd/mount/snap.test-snapd-sh.user-fstab

    echo "Then the snap is not able to read files and dirs in $HOME"
    if test-snapd-sh.with-personal-files-plug -c "ls /root/.testdir1" 2> call.error; then
        echo "Expected permission error accessing the personal dir"
        exit 1
    fi
    MATCH "Permission denied" < call.error
    if test-snapd-sh.with-personal-files-plug -c "cat /root/.testfile1" 2> call.error; then
        echo "Expected permission error accessing the personal file"
        exit 1
    fi
    MATCH "Permission denied" < call.error
