summary: Ensure that the firewall-control interface works.

details: |
    The firewall-control interface allows a snap to configure the firewall.

    A snap which defines the firewall-control plug must be shown in the interfaces list.
    The plug must not be autoconnected on install and, as usual, must be able to be
    reconnected.

    For this test we use a snap that declares a plug on this interface and that adds and
    removes iptables entries. With the plug connected the test checks that a rule to map
    localhost to a given IP can be added by the snap, ensuring that a generic client can
    access a generic service listening on localhost through the IP set up in the firewall
    rule.

environment:
    PORT: 8081
    SERVICE_FILE: "./service.sh"
    SERVICE_NAME: "test-service"
    REQUEST_FILE: "./request.txt"
    DESTINATION_IP: "172.26.0.15"

prepare: |
    echo "Given a snap declaring a plug on the firewall-control interface is installed"
    snapbuild $TESTSLIB/snaps/firewall-control-consumer .
    snap install --dangerous firewall-control-consumer_1.0_all.snap

    echo "And a service is listening"
    printf "#!/bin/sh -e\nwhile true; do echo \"HTTP/1.1 200 OK\n\nok\n\" |  nc -l -p $PORT -q 1; done" > $SERVICE_FILE
    chmod a+x $SERVICE_FILE
    . "$TESTSLIB/systemd.sh"
    systemd_create_and_start_unit $SERVICE_NAME "$(readlink -f $SERVICE_FILE)"

    while ! netstat -lnt | grep -Pq "tcp.*?:$PORT +.*?LISTEN\n*"; do sleep 0.5; done

    echo "And we store a basic HTTP request"
    cat > $REQUEST_FILE <<EOF
    GET / HTTP/1.0

    EOF

restore: |
    . "$TESTSLIB/systemd.sh"
    systemd_stop_and_destroy_unit $SERVICE_NAME
    rm -f firewall-control-consumer_1.0_all.snap firewall-create.error $SERVICE_FILE $REQUEST_FILE

execute: |
    CONNECTED_PATTERN='^:firewall-control +firewall-control-consumer$'
    DISCONNECTED_PATTERN='^- +firewall-control-consumer:firewall-control$'

    echo "Then it is not connected by default"
    snap interfaces | MATCH "$DISCONNECTED_PATTERN"

    echo "==================================="

    echo "When the plug is connected"
    snap connect firewall-control-consumer:firewall-control
    snap interfaces | MATCH "$CONNECTED_PATTERN"

    echo "And the snap creates a firewall rule"
    firewall-control-consumer.create

    echo "Then the service listening on localhost is accessible through the destination IP in the rule"
    nc -w 2 "$DESTINATION_IP" "$PORT" < $REQUEST_FILE | MATCH 'ok$'

    echo "When the snap deletes the firewall rule"
    firewall-control-consumer.delete

    echo "Then the service listening on localhost is no longer accessible through the destination IP in the rule"
    ! nc -w 2 "$DESTINATION_IP" "$PORT" < $REQUEST_FILE

    if snap forced-devmode ; then
        exit 0
    fi

    echo "==================================="

    echo "When the plug is disconnected"
    snap disconnect firewall-control-consumer:firewall-control
    snap interfaces | MATCH "$DISCONNECTED_PATTERN"

    echo "Then the snap is not able to configure the firewall"
    if firewall-control-consumer.create 2>firewall-create.error; then
        echo "Expected permission error creating firewall rules with disconnected plug"
        exit 1
    fi
    MATCH "Permission denied" < firewall-create.error
