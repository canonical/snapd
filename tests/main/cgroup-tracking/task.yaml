summary: Each snap app and hook is tracked via cgroups

details: |
    This test creates a snap process that suspends itself and ensures that it
    placed into the appropriate hierarchy.

systems:
    # Ubuntu 14.04's special version of systemd doesn't have StartTransientUnit API.
    # This is covered in more depth in the sister cgroup-tracking-failure test.
    - -ubuntu-14.04-*

environment:
    USER/root: root
    USER/test: test

prepare: |
    # This feature depends on the release-app-awareness feature
    snap set core experimental.refresh-app-awareness=true
    tests.cleanup defer snap unset core experimental.refresh-app-awareness

    snap pack test-snapd-tracking
    tests.cleanup defer rm -f test-snapd-tracking_1_all.snap

    snap install --dangerous ./test-snapd-tracking_1_all.snap
    tests.cleanup defer snap remove test-snapd-tracking

    tests.session -u "$USER" prepare
    tests.cleanup defer tests.session -u "$USER" restore

restore: |
    rm -f /tmp/*.pid /tmp/*.stamp

    if [ "$USER" = root ]; then
        systemctl --user stop dbus.service || true
    fi

debug: |
    cat /proc/self/cgroup
    systemctl --version || true
    cat /proc/cmdline

execute: |
    # This test varies between Ubuntu 16.04, Ubuntu 18.04 and Fedora 31.
    # This combination exercises each of the three cases below, namely:
    # - pure cgroup v2 system, like Fedora 31
    # - hybrid cgroup system, like Ubuntu 18.04
    # - pure cgroup v1 system, like Ubuntu 16.04
    echo "Find the path and id of the cgroup snapd uses for tracking."
    if [ "$(stat -f --print=%T /sys/fs/cgroup)" = "cgroup2fs" ]; then
        base_cg_path=/sys/fs/cgroup
        base_cg_id=0
    elif [ "$(stat -f --print=%T /sys/fs/cgroup/unified)" = "cgroup2fs" ]; then
        base_cg_path=/sys/fs/cgroup/unified
        base_cg_id=0
    elif [ "$(stat -f --print=%T /sys/fs/cgroup/systemd)" = "cgroupfs" ]; then
        base_cg_path=/sys/fs/cgroup/systemd
        base_cg_id="$(grep -F 'name=systemd' < /proc/self/cgroup | cut -d : -f 1)"
    else
        echo "cannot find any tracking cgroup"
        exit 1
    fi
    echo "Sanity check, base directory of selected cgroup exists."
    test -d "$base_cg_path"

    # The configure hook was executed and used a scope for tracking. The scope
    # was attached to the system slice, as it is not associated with any user.
    test -f /var/snap/test-snapd-tracking/common/configure.cgroup
    hook_tracking_cg_path="$(grep -E "^$base_cg_id:" < /var/snap/test-snapd-tracking/common/configure.cgroup | cut -d : -f 3)"
    echo "$hook_tracking_cg_path" | MATCH '/system\.slice/snap\.test-snapd-tracking\.hook\.configure\.[0-9a-f-]+\.scope'

    # The nap service was executed and was tracked as a systemd service.
    test -f /var/snap/test-snapd-tracking/common/nap.cgroup
    service_tracking_cg_path="$(grep -E "^$base_cg_id:" < /var/snap/test-snapd-tracking/common/nap.cgroup | cut -d : -f 3)"
    echo "$service_tracking_cg_path" | MATCH '/system\.slice/snap\.test-snapd-tracking\.nap\.service'

    # The application tracking is tested below.
    if [ "$USER" = test ] && "$TESTSTOOLS"/version-compare --strict "$(systemctl --version | head -n 1 | cut -d ' ' -f 2)" -lt 238; then
        echo "Systemd running as user session manager cannot start transient units"
        echo "that cross ownership boundary. This test effectively runs through root"
        echo "that is using ssh to connect to a test machine. Crossing the boundary"
        echo "of cgroup ownership is allowed by systemd 238 or newer, thanks to"
        echo "org.freedesktop.systemd1.Manager.AttachProcessesToUnit method,"
        echo "offered by systemd running as system manager, which allows"
        echo "overcoming this kernel limitation".
        echo "SKIP: systemd is too old to perform this test as user"

        # This effectively can run starting with Ubuntu 19.10, Fedora 30,
        # Debian 10 (but no version of openSUSE Leap yet) - older versions will
        # not perform in this unique environment that spread provides for us.
        # In typical desktop environment going all the way back to 16.04 should
        # work fine, as far as the intended use-case is concerned.

        exit 0
    fi

    if [ "$USER" = test ]; then
        case "$SPREAD_SYSTEM" in
            # XXX: this may now pass on core18+, verify that.
            ubuntu-core-*)
                echo "On core systems there is no session bus so the test variant does not make much sense"
                echo "Please see the cgroup-tracking-failure test for more extensive analysis"
                echo "SKIP: core systems don't have session services / session bus"
                exit 0
                ;;
        esac
    fi

    echo "Start a \"sleep\" process in the background, in a new session"
    # NOTE: tests.session handles PAM and that necessitates a management process
    # that eventually performs PAM termination activities. The PID returned from
    # invoking tests.session in the background will not be that of the invoked program
    # but rather of the monitoring helper process.
    tests.session -p /tmp/1.pid -u "$USER" exec snap run test-snapd-tracking.sh -c 'touch /tmp/1.stamp && exec sleep 3m' &
    session1_pid=$!
    trap "pkill sleep || true" EXIT
    echo "Ensure that snap-confine has finished its task and that the snap process"
    echo "is active. Note that we don't want to wait forever either."
    retry -n 30 test -e /tmp/snap.test-snapd-tracking/tmp/1.stamp
    pid1_sleep=$(cat /tmp/1.pid)

    echo "During startup snap-run has asked systemd to move the process to a"
    echo "new transient scope. The scope name is \"snap.\$random.test-snapd-tracking.sh\"."
    echo "Let's verify that."
    pid1_tracking_cg_path="$(grep -E "^$base_cg_id:" < "/proc/$pid1_sleep/cgroup" | cut -d : -f 3)"
    echo "$pid1_tracking_cg_path" | MATCH '.*/snap\.test-snapd-tracking\.sh\.[0-9a-f-]+\.scope'

    echo "Sanity check, cgroup associated with the scope exists."
    test -d "${base_cg_path}${pid1_tracking_cg_path}"

    echo "While the process is alive its PID can be seen in the cgroup.procs file."
    MATCH "$pid1_sleep" < "${base_cg_path}${pid1_tracking_cg_path}/cgroup.procs"

    echo "Start a second process so that we can check each scope is independent."
    #shellcheck disable=SC2016
    tests.session -p /tmp/2.pid -u "$USER" exec snap run test-snapd-tracking.sh -c 'touch /tmp/2.stamp && exec sleep 2m' &
    session2_pid=$!
    retry -n 30 test -e /tmp/snap.test-snapd-tracking/tmp/2.stamp
    pid2_sleep=$(cat /tmp/2.pid)
    pid2_tracking_cg_path="$(grep -E "^$base_cg_id:" < "/proc/$pid2_sleep/cgroup" | cut -d : -f 3)"
    echo "$pid2_tracking_cg_path" | MATCH '.*/snap\.test-snapd-tracking\.sh\.[0-9a-f-]+\.scope'
    MATCH "$pid2_sleep" < "${base_cg_path}${pid2_tracking_cg_path}/cgroup.procs"

    echo "Each invocation uses a new transient scope and thus a new cgroup path."
    test "$pid1_tracking_cg_path" != "$pid2_tracking_cg_path"

    echo "When the process terminates, the control group it used to exist in is"
    echo "automatically removed by systemd, though perhaps not instantly"
    kill "$pid1_sleep"
    wait "$session1_pid" || true  # wait returns the exit code and we kill the process
    retry -n 10 test ! -e "${base_cg_path}${pid1_tracking_cg_path}"

    kill "$pid2_sleep"
    wait "$session2_pid" || true  # same as above
    retry -n 10 test ! -e "${base_cg_path}${pid2_tracking_cg_path}"

    echo "If a snap command forks a child process it is also tracked."
    #shellcheck disable=SC2016
    tests.session -p /tmp/3.pid -u "$USER" exec snap run test-snapd-tracking.sh -c 'touch /tmp/3.stamp && sleep 1m' &
    session3_pid=$!
    retry -n 30 test -e /tmp/snap.test-snapd-tracking/tmp/3.stamp
    pid3_sh=$(cat /tmp/3.pid)
    pid3_tracking_cg_path="$(grep -E "^$base_cg_id:" < "/proc/$pid3_sh/cgroup" | cut -d : -f 3)"
    MATCH "$pid3_sh" < "${base_cg_path}${pid3_tracking_cg_path}/cgroup.procs"

    echo "Because the script above used \"sleep 1m\" instead of \"exec sleep 1m\" there"
    echo "are now two processes: the shell and sleep."
    cgroup_procs_path="${base_cg_path}${pid3_tracking_cg_path}/cgroup.procs"
    test "$(wc -l < "$cgroup_procs_path")" -eq 2
    kill "$pid3_sh"
    #shellcheck disable=SC2016
    cgroup_procs_path="$cgroup_procs_path" retry -n 10 --wait 0.5 sh -c 'test "$(wc -l < $cgroup_procs_path)" -eq 1'

    wait "$session3_pid" || true  # same as above
    retry -n 10 test ! -e "${base_cg_path}${pid3_tracking_cg_path}"

    if [ "$USER" != "root" ]; then
        # since the service we run here writes under /var/snap/ we need to make
        # that location writable
        chmod a+w /var/snap/test-snapd-tracking/common
    fi
    echo "A service run directly as the user will also get a tracking scope"
    rm -f /var/snap/test-snapd-tracking/common/nap.cgroup
    tests.session -p /tmp/4.pid -u "$USER" exec snap run test-snapd-tracking.nap &
    session4_pid=$!
    retry -n 30 test -e /var/snap/test-snapd-tracking/common/nap.cgroup
    pid4=$(cat /tmp/4.pid)
    pid4_tracking_cg_path="$(grep -E "^$base_cg_id:" < "/proc/$pid4/cgroup" | cut -d : -f 3)"
    echo "$pid4_tracking_cg_path" | MATCH '.*/snap\.test-snapd-tracking\.nap\.[0-9a-f-]+\.scope'
    kill "$pid4"
    wait "$session4_pid" || true
