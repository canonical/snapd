summary: Test mount control with NFS shares

details: |
    Verify that NFS mounts can be performed with mount-control

# limit to systems where we know NFS works without problems
# ubuntu-core: no required dependencies to export NFS shares
systems:
  - ubuntu-22.04-*
  - ubuntu-24.04-*

prepare: |
    # Mount should not leak
    tests.cleanup defer NOMATCH 'nfs-share' /proc/self/mountinfo

    # Create directory which the test will share
    if [ ! -d /var/nfs-share ]; then
      mkdir /var/nfs-share
      tests.cleanup defer rm -r /var/nfs-share
    fi
    echo 'hello from NFS share' > /var/nfs-share/hello

    # Install a package with additional kernel modules
    if ! tests.pkgs install "linux-modules-extra-$(uname -r)"; then
      echo "SKIP: Kernel version and extras module mismatch"
      exit 1
    fi

    # Install nfs with some precautions to undo the side-effects if we are
    # really installing it and it was not pre-installed. If /proc/fs/nfsd
    # is not initially mounted then ask the test to unmount it later
    # without checking if it is mounted (hence okfail wrapper).
    if not mountinfo.query /proc/fs/nfsd .fs_type=nfsd; then
      tests.cleanup defer okfail umount /proc/fs/nfsd
    fi
    # If /var/lib/nfs/rpc_pipefs is not initially mounted then ask the test
    # to unmount it later.
    if not mountinfo.query /var/lib/nfs/rpc_pipefs .fs_type=rpc_pipefs; then
        tests.cleanup defer okfail umount /proc/nfs/rpc_pipefs
    fi

    tests.pkgs install nfs-kernel-server

    # Export /var/home/test-remote over NFS.
    mkdir -p /etc/exports.d/
    echo '/var/nfs-share localhost(rw,no_subtree_check)' > /etc/exports.d/test.exports
    tests.cleanup defer rm -f /etc/exports.d/test.exports
    retry -n 10 exportfs -r

    # Later on remove the exports file and reload exported filesystems.
    tests.cleanup defer retry -n 10 exportfs -r

restore: |
    # Run cleanup handlers registered earlier.
    tests.cleanup restore

execute: |
    snap install test-snapd-mount-control-nfs
    mkdir -p /media/mounted
    tests.cleanup defer rm -rf /media/mounted

    # Connect removable media first so that we can 'read' files.
    snap connect test-snapd-mount-control-nfs:removable-media

    # Blocked by seccomp, hence EPERM rather than EACCESS
    test-snapd-mount-control-nfs.cmd mount.nfs localhost:/var/nfs-share /media/mounted 2>&1 | \
        MATCH 'Operation not permitted'

    test-snapd-mount-control-nfs.cmd snapctl mount -t nfs localhost:/var/nfs-share /media/mounted 2>&1 | \
        MATCH 'no matching mount-control connection found'

    echo "When the mount-control interface which lists NFS is connected"
    snap connect test-snapd-mount-control-nfs:mntctl

    echo "It is possible to mount the share"
    test-snapd-mount-control-nfs.cmd mount.nfs localhost:/var/nfs-share /media/mounted
    echo "Read the contents under the mount point"
    test-snapd-mount-control-nfs.cmd cat /media/mounted/hello | MATCH 'hello from NFS share'
    echo "And unmount it"
    test-snapd-mount-control-nfs.cmd umount /media/mounted

    echo "Same thing works through snapctl"
    test-snapd-mount-control-nfs.cmd snapctl mount -t nfs localhost:/var/nfs-share /media/mounted
    test-snapd-mount-control-nfs.cmd cat /media/mounted/hello | MATCH 'hello from NFS share'
    test-snapd-mount-control-nfs.cmd snapctl umount /media/mounted
