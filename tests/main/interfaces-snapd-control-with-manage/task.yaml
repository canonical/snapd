summary: Ensure that the snapd-control "refresh-schedule" attribute works.

prepare: |
    . $TESTSLIB/snaps.sh
    install_local test-snapd-control-consumer
    
    # now pretend test-snapd-control-consumer comes from the store (fugly HACK)
    systemctl stop snapd.{service,socket}
    jq '.data.snaps["test-snapd-control-consumer"].sequence[0]["snap-id"] = "99T7MUlRhtI3U0QFgl5mXXESAiSwt776"' /var/lib/snapd/state.json > /var/lib/snapd/state.json.new
    mv /var/lib/snapd/state.json.new /var/lib/snapd/state.json
    systemctl start snapd.{service,socket}
    
execute: |
    echo "When the snapd-control-with-manage plug is connected"
    snap connect test-snapd-control-consumer:snapd-control-with-manage
    snap set core refresh.schedule=managed

    echo "Then the core refresh.schedule can be set to 'managed'"
    if journalctl -u snapd |grep 'cannot parse "managed"'; then
        echo "refresh.schedule=managed was not rejected as it should be"
        exit 1
    fi
    snap refresh --time | MATCH 'schedule: managed'

    echo "When the snapd-control-with-manage plug is disconnected"
    snap disconnect test-snapd-control-consumer:snapd-control-with-manage

    echo "Then the snap refresh schedule cannot be set to managed"
    snap set core refresh.schedule=managed
    journalctl -u snapd |MATCH 'cannot parse "managed"'
