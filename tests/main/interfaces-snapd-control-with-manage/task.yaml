summary: Ensure that the snapd-control "refresh-schedule" attribute works.

# ubuntu-14.04: systemd-run not supported
systems: [-ubuntu-14.04*]

environment:
  BLOB_DIR: $(pwd)/fake-store-blobdir

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    echo "Ensure jq is installed"
    if ! command -v jq; then
        snap install --devmode jq
    fi

    snap debug can-manage-refreshes | MATCH false

    snap ack "$TESTSLIB/assertions/testrootorg-store.account-key"

    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    setup_fake_store "$BLOB_DIR"

    snap_path=$("$TESTSTOOLS"/snaps-state pack-local test-snapd-control-consumer)
    make_snap_installable "$BLOB_DIR" "${snap_path}"
    cat > snap-decl.json <<'EOF'
    {
      "format": "1",
      "revision": "2",
      "snap-name": "test-snapd-control-consumer",
      "snap-id": "test-snapd-control-consumer-id",
      "plugs":
      {
        "snapd-control": {
          "allow-installation": "true",
          "allow-auto-connection": "true"
        }
      }
    }
    EOF
    fakestore new-snap-declaration --dir "${BLOB_DIR}" --snap-decl-json snap-decl.json
    snap ack "${BLOB_DIR}"/asserts/*.snap-declaration

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi
    #shellcheck source=tests/lib/store.sh
    . "$TESTSLIB"/store.sh
    teardown_fake_store "$BLOB_DIR"

debug: |
    jq .data.auth.device /var/lib/snapd/state.json

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    snap install test-snapd-control-consumer

    echo "The interface is connected by default"
    snap interfaces -i snapd-control | MATCH ":snapd-control .*test-snapd-control-consumer:snapd-control-with-manage"

    echo "When the snapd-control-with-manage plug is connected"
    snap connect test-snapd-control-consumer:snapd-control-with-manage

    echo "Then the system knows it can be set to managed"
    snap debug can-manage-refreshes | MATCH true

    echo "Then the core refresh.schedule can be set to 'managed'"
    snap set core refresh.schedule=managed
    if "$TESTSTOOLS"/journal-state get-log -u snapd |grep 'cannot parse "managed"'; then
        echo "refresh.schedule=managed was not accepted as it should be"
        exit 1
    fi
    snap refresh --time | MATCH 'schedule: managed'

    echo "Reset refresh.schedule"
    snap set core refresh.schedule=
    if snap refresh --time | grep -q -E 'schedule: managed'; then
        echo "Refresh schedule not reset, test broken"
        exit 1
    fi
    echo "Then the core refresh.timer can be set to 'managed'"
    snap set core refresh.timer=managed
    snap refresh --time | MATCH 'timer: managed'

    echo "Check that we trigger a refresh for hints at least once"
    systemctl stop snapd.socket snapd.service
    "$TESTSTOOLS"/snapd-state force-autorefresh
    systemctl start snapd.socket snapd.service

    echo "Ensure that last-refresh-hit happens"
    for _ in $(seq 120); do
        if jq '.data["last-refresh-hints"]' /var/lib/snapd/state.json | grep "$(date +%Y)"; then
            break
        fi
        sleep 1
    done
    jq '.data["last-refresh-hints"]' /var/lib/snapd/state.json | grep "$(date +%Y)"

    # prevent refreshes again
    systemctl stop snapd.socket snapd.service
    "$TESTSTOOLS"/snapd-state prevent-autorefresh
    systemctl start snapd.socket snapd.service

    # unset because 'managed' will not be rejected if is already set in state.
    snap unset core refresh.schedule
    snap unset core refresh.timer

    echo "When the snapd-control-with-manage plug is disconnected"
    snap disconnect test-snapd-control-consumer:snapd-control-with-manage

    echo "Then the snap refresh schedule cannot be set to managed"
    if snap set core refresh.schedule=managed; then
       echo "refresh.schedule=managed was not rejected as it should be"
       exit 1
    fi
    echo "Then the snap refresh timer cannot be set to managed"
    if snap set core refresh.timer=managed; then
       echo "refresh.timer=managed was not rejected as it should be"
       exit 1
    fi
