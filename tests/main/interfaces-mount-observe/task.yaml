summary: Ensures that the mount-observe interface works

details: |
    The mount-observe interface allows a snap to read information about the
    mount table from /proc/<pid>/mounts file. The interface is not connected
    automatically. The test shows that mount propagation allows the snap,
    running in a distinct mount namespace, to observe the new mount point made
    on the host mount namespace.

prepare: |
    echo "Given a snap declaring a plug on the mount-observe interface is installed"
    "$TESTSTOOLS"/snaps-state install-local mount-observe-consumer

execute: |
    echo "The interface is not connected by default"
    snap interfaces -i mount-observe | MATCH -- '- +mount-observe-consumer:mount-observe'

    echo "When the plug is connected"
    snap connect mount-observe-consumer:mount-observe

    echo "Then the mount info is reachable"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    expected="$SNAP_MOUNT_DIR/mount-observe-consumer"
    su -l -c "mount-observe-consumer" test | grep -Pq "$expected"

    echo "When the plug is connected"
    snap connect mount-observe-consumer:mount-observe

    echo "And a new mount is created"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh

    echo "Then the new mount info is reachable"
    expected="$SNAP_MOUNT_DIR/test-snapd-sh"
    su -l -c "mount-observe-consumer" test | grep -Pq "$expected"

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect mount-observe-consumer:mount-observe

    echo "Then the mount info is not reachable"
    if su -l -c "mount-observe-consumer" test; then
        echo "Expected error accessing mount info with disconnected plug"
        exit 1
    fi
