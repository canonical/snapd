summary: Ensures that the mount-observe interface works

details: |
    A snap declaring the mount-observe plug is defined, its command
    just read the /proc/<pid>/mounts file.

    The test itself checks for the lack of autoconnect and then tries
    to execute the snap command with the plug connected (it must succeed)
    and disconnected (it must fail).

    The test also checks that a new mount created after the snap is installed
    is also shown when the plug is connected.

prepare: |
    echo "Given a snap declaring a plug on the mount-observe interface is installed"
    "$TESTSTOOLS"/snaps-state install-local mount-observe-consumer

execute: |
    echo "The interface is not connected by default"
    snap interfaces -i mount-observe | MATCH -- '- +mount-observe-consumer:mount-observe'

    echo "When the plug is connected"
    snap connect mount-observe-consumer:mount-observe

    echo "Then the mount info is reachable"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    expected="$SNAP_MOUNT_DIR/mount-observe-consumer"
    su -l -c "mount-observe-consumer" test | grep -Pq "$expected"

    echo "When the plug is connected"
    snap connect mount-observe-consumer:mount-observe

    echo "And a new mount is created"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh

    echo "Then the new mount info is reachable"
    expected="$SNAP_MOUNT_DIR/test-snapd-sh"
    su -l -c "mount-observe-consumer" test | grep -Pq "$expected"

    if [ "$(snap debug confinement)" = partial ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect mount-observe-consumer:mount-observe

    echo "Then the mount info is not reachable"
    if su -l -c "mount-observe-consumer" test; then
        echo "Expected error accessing mount info with disconnected plug"
        exit 1
    fi
