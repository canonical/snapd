summary: Integration tests for the snap-bootstrap binary

# use the same system and tooling as uc20
systems: [ubuntu-20.04-64-secboot]

environment:
    # an empty $topsrcdir/tests/go.mod seems to break importing or building go
    # packages referenced by their import paths while under the tests directory,
    # need to disable go modules support for this test
    GO111MODULE: off

debug: |
    cat /proc/partitions

restore: |
    if [[ -d ./mnt ]]; then
        umount ./mnt || true
    fi
    umount /dev/mapper/ubuntu-data || true
    umount /dev/mapper/test-udata || true

    cryptsetup close /dev/mapper/ubuntu-data || true
    cryptsetup close /dev/mapper/test-udata || true

    if [ -f loop.txt ]; then
        losetup -d "$(cat loop.txt)"
    fi
    apt remove -y cryptsetup

    rm -Rf /run/mnt

prepare: |
    echo "Create a fake block device image that looks like an image from u-i"
    truncate --size=10GB fake.img

    apt install -y cryptsetup

    echo "Setup the image as a block device"
    losetup -fP fake.img
    losetup -a |grep fake.img|cut -f1 -d: > loop.txt
    LOOP="$(cat loop.txt)"

    echo "Create a partition that looks like a uc20 image"
    cat <<EOF | sfdisk "$LOOP"
    label: gpt

    start=2048, size=2048, type=21686148-6449-6E6F-744E-656564454649, name="BIOS Boot"
    start=4096, size=2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, name="ubuntu-seed"
    EOF
    udevadm trigger --settle "${LOOP}p2"
    mkfs.vfat "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    echo "Double check that we got the expected partitions"
    sfdisk -l "$LOOP" | MATCH 'BIOS boot'
    sfdisk -l "$LOOP" | MATCH 'EFI System'

    echo "Get the UC20 gadget"
    snap download --channel=20/edge pc
    unsquashfs -d gadget-dir pc_*.snap

    echo "Install EFI binaries"
    bootdir=/run/mnt/ubuntu-boot/EFI/boot
    mkdir -p "$bootdir"
    cp /usr/lib/shim/shimx64.efi.signed "$bootdir"/bootx64.efi
    cp /usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed "$bootdir"/grubx64.efi

execute: |
    bootdir=/run/mnt/ubuntu-boot/EFI/boot
    ls -l "$bootdir"
    sbverify --list "$bootdir"/bootx64.efi
    sbverify --list "$bootdir"/grubx64.efi
    LOOP="$(cat loop.txt)"

    echo "Run the snap-bootstrap tool"
    go get ../../../lib/create-partitions
    create-partitions \
        --encrypt --key-file keyfile \
        --recovery-key-file recovery-key \
        --policy-update-data-file policy-update-data \
        --tpm-lockout-auth tpm-lockout-auth \
        --model <(snap model --assertion) \
        ./gadget-dir "$LOOP"

    echo "Check that the key file was created"
    test "$(stat --printf=%s ./keyfile)" = 1095

    echo "Check that the partitions are created"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p1 .*size=\s*2048, type=21686148-6449-6E6F-744E-656564454649,.*BIOS Boot"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p2 .*size=\s*2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B,.*ubuntu-seed"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p3 .*size=\s*1536000, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-boot"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p4 .*size=\s*15533521, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-data"

    not cryptsetup isLuks "${LOOP}p1"
    not cryptsetup isLuks "${LOOP}p2"
    not cryptsetup isLuks "${LOOP}p3"
    cryptsetup isLuks "${LOOP}p4"

    cryptsetup luksDump "${LOOP}p4" | MATCH 'Label:\s*ubuntu-data-enc'
    POSIXLY_CORRECT=1 file -s /dev/mapper/ubuntu-data | MATCH 'volume name "ubuntu-data"'

    cryptsetup close /dev/mapper/ubuntu-data

    echo "Check the policy update data and TPM lockout authorization files"
    ls -l policy-update-data
    ls -l tpm-lockout-auth

    # Test the recovery key

    # Can't test the keyfile because it's now sealed to the TPM
    mkdir -p ./mnt
    echo "Ensure that we can open the encrypted device using the recovery key"
    cryptsetup open --key-file recovery-key "${LOOP}p4" test-recovery
    mount /dev/mapper/test-recovery ./mnt
    umount ./mnt
    cryptsetup close /dev/mapper/test-recovery
