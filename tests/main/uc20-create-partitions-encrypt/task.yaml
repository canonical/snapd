summary: Integration tests for the snap-bootstrap binary

details: |
    This test checks the snap-bootstrap binary. First it is used
    uc20-create-partitions tool and validated partitions and 
    ubuntu-* key files are created. Then the unsealed and save keys
    are validated in run and recovery modes, and also it is possible to
    add/remove new keys. Finally check the disk-mapping.json has
    expected contents.

# use the same system and tooling as uc20
# TODO: revert skip for ubuntu-23*
systems: [ubuntu-20.*,ubuntu-22.*]

environment:
    SNAPD_DEBUG: "1"
    DISK_MAPPING_JSON: /run/mnt/ubuntu-data/system-data/var/lib/snapd/device/disk-mapping.json

prepare: |
    if not os.query is-pc-amd64; then
        echo "test designed for amd64 architecture, exiting..."
        exit
    fi

    echo "Create a fake block device image that looks like an image from u-i"
    truncate --size=5GB fake.img

    apt install -y cryptsetup

    echo "Setup the image as a block device"
    # use a script here as this code needs to be run on the next boot
    cat > losetup.sh <<'EOF'
    #!/bin/sh -e
    echo "Setting up loop"
    losetup --show -fP fake.img >loop.txt
    EOF
    chmod +x ./losetup.sh
    ./losetup.sh
    LOOP="$(cat loop.txt)"

    echo "Create a partition that looks like a uc20 image"
    cat <<EOF | sfdisk "$LOOP"
    label: gpt

    start=2048, size=2048, type=21686148-6449-6E6F-744E-656564454649, name="BIOS Boot"
    start=4096, size=2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, name="ubuntu-seed"
    EOF
    retry -n 3 --wait 1 test -e "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    mkfs.vfat "${LOOP}p2"
    udevadm trigger --settle "${LOOP}p2"
    echo "Double check that we got the expected partitions"
    sfdisk -l "$LOOP" | MATCH 'BIOS boot'
    sfdisk -l "$LOOP" | MATCH 'EFI System'

    # Resize the disk without resizing the partition table
    truncate --size=10GB fake.img
    losetup -c "${LOOP}"
    partx -u "${LOOP}"

    echo "Get the UC20 gadget"
    if os.query is-focal; then
        snap download --channel=20/edge pc
    elif os.query is-ubuntu 22.04; then
        snap download --channel=22/edge pc
    fi
    unsquashfs -d gadget-dir pc_*.snap

restore: |
    if not os.query is-pc-amd64; then
        echo "test designed for amd64 architecture, exiting..."
        exit
    fi

    for m in ubuntu-seed ubuntu-save ubuntu-data ubuntu-boot; do
        if mountpoint "/run/mnt/$m"; then
            umount "/run/mnt/$m"
        fi
    done
    if mountpoint ./mnt; then
        umount ./mnt
    fi

    cryptsetup close /dev/mapper/ubuntu-save || true
    cryptsetup close /dev/mapper/ubuntu-data || true
    cryptsetup close /dev/mapper/test-udata || true

    if [ -f loop.txt ]; then
        LOOP="$(cat loop.txt)"
        losetup -d "$LOOP"
        losetup -l | NOMATCH "$LOOP"
    fi

    # purge the key we added
    systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
        /usr/bin/keyctl purge -s user "ubuntu-fde:${LOOP}p4:unlock" || true

    apt autoremove -y cryptsetup

    rm -Rf /run/mnt

debug: |
    cat /proc/partitions

execute: |
    if not os.query is-pc-amd64; then
        echo "test designed for amd64 architecture, exiting..."
        exit
    fi

    channel=20
    if os.query is-ubuntu-ge 22.04; then
        channel=22
    fi

    # this test simulates a reinstall, to clear the TPM this requires
    # a reboot so the losetup has to be redone
    if [ "$SPREAD_REBOOT" = 1 ]; then
        ./losetup.sh
    fi
    LOOP="$(cat loop.txt)"

    echo "Setup simulated ubuntu-seed mount"
    mkdir -p /run/mnt/ubuntu-seed
    mount "${LOOP}"p2 /run/mnt/ubuntu-seed

    echo "Install EFI binaries"
    bootdir=/run/mnt/ubuntu-boot/EFI/boot
    seedbootdir=/run/mnt/ubuntu-seed/EFI/boot
    mkdir -p "$bootdir" "$seedbootdir"
    cp /usr/lib/shim/shimx64.efi.signed "$seedbootdir"/bootx64.efi
    cp /usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed "$seedbootdir"/grubx64.efi
    cp /usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed "$bootdir"/grubx64.efi

    sbverify --list "$seedbootdir"/bootx64.efi
    sbverify --list "$seedbootdir"/grubx64.efi
    sbverify --list "$bootdir"/grubx64.efi
    # TODO:UC20: make kernel-dir non-empty once we have a gadget that has a
    #            "$kernel:" style ref in the meta/gadget.yaml
    kerneldir=""

    echo "Run the snap-bootstrap tool"
    uc20-create-partitions \
        --encrypt \
        ./gadget-dir "$kerneldir" "$LOOP"
    # keep for later

    echo "Check that the ubuntu-data key files were created"
    test "$(stat --printf=%s unsealed-key)" -eq 32
    echo "Check that the ubuntu-save key files were created"
    test "$(stat --printf=%s save-key)" -eq 32

    # TODO restore these checks once keys can be created on-demand at runtime
    # recovery key is 16 bytes long
    # test "$(stat --printf=%s recovery-key)" -eq 16
    # reinstall key is 16 bytes long
    # test "$(stat --printf=%s reinstall-key)" -eq 16

    echo "Check that the partitions are created"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p1 .*size=\s*2048, type=21686148-6449-6E6F-744E-656564454649,.*BIOS Boot"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p2 .*size=\s*2457600, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B,.*ubuntu-seed"
    sfdisk -d "$LOOP" | MATCH "^${LOOP}p3 .*size=\s*1536000, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-boot"
    if [ "$channel" = "20" ]; then
        sfdisk -d "$LOOP" | MATCH "^${LOOP}p4 .*size=\s*32768, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-save"
        sfdisk -d "$LOOP" | MATCH "^${LOOP}p5 .*size=\s*15500753, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-data"
    else
        sfdisk -d "$LOOP" | MATCH "^${LOOP}p4 .*size=\s*65536, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-save"
        sfdisk -d "$LOOP" | MATCH "^${LOOP}p5 .*size=\s*15467985, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4,.*ubuntu-data"
    fi

    not cryptsetup isLuks "${LOOP}p1"
    not cryptsetup isLuks "${LOOP}p2"
    not cryptsetup isLuks "${LOOP}p3"
    cryptsetup isLuks "${LOOP}p4"
    cryptsetup isLuks "${LOOP}p5"

    cryptsetup luksDump "${LOOP}p4" | MATCH 'Label:\s*ubuntu-save-enc'
    POSIXLY_CORRECT=1 file -s /dev/mapper/ubuntu-save | MATCH 'volume name "ubuntu-save"'

    cryptsetup luksDump "${LOOP}p5" | MATCH 'Label:\s*ubuntu-data-enc'
    POSIXLY_CORRECT=1 file -s /dev/mapper/ubuntu-data | MATCH 'volume name "ubuntu-data"'

    cryptsetup close /dev/mapper/ubuntu-data
    cryptsetup close /dev/mapper/ubuntu-save

    mkdir -p ./mnt

    # Test the unsealed key
    echo "Ensure that we can open the encrypted ubuntu-data device using the unsealed key"
    cryptsetup open --key-file unsealed-key "${LOOP}p5" test
    mount /dev/mapper/test ./mnt
    umount ./mnt
    cryptsetup close /dev/mapper/test

    # Test the save key
    echo "Ensure that we can open the encrypted ubuntu-save device using the run mode key"
    cryptsetup open --key-file save-key "${LOOP}p4" test-save
    mount /dev/mapper/test-save ./mnt
    umount ./mnt
    cryptsetup close /dev/mapper/test-save

    # TODO: convert the test to use snap-fde-keymgr add-recovery-key/remove-recovery-key
    echo "Add a recovery key to ubuntu-data and ubuntu-save"
    systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
        /usr/lib/snapd/snap-fde-keymgr add-recovery-key \
            --key-file "$PWD/recovery-key" \
            --devices "${LOOP}p5" --authorizations "file:$PWD/unsealed-key" \
            --devices "${LOOP}p4" --authorizations "file:$PWD/save-key"

    # Test the recovery key
    echo "Ensure that we can open the encrypted ubuntu-data device using the recovery key"
    cryptsetup open --key-file recovery-key "${LOOP}p5" test-data
    mount /dev/mapper/test-data ./mnt
    umount ./mnt
    cryptsetup close /dev/mapper/test-data


    echo "Ensure that we can open the encrypted ubuntu-save device using the recovery key"
    cryptsetup open --key-file recovery-key "${LOOP}p4" test-save
    mount /dev/mapper/test-save ./mnt
    umount ./mnt
    cryptsetup close /dev/mapper/test-save

    # make a copy of the recovery key, as we'll use it later
    cp -av recovery-key recovery-key-copy

    echo "Ensure that adding recovery keys again does not fail, and does not change the key"
    cryptsetup luksDump "${LOOP}p4" > loop-p4-dump
    cryptsetup luksDump "${LOOP}p5" > loop-p5-dump
    # this shouldn't fail
    systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
        /usr/lib/snapd/snap-fde-keymgr add-recovery-key \
            --key-file "$PWD/recovery-key" \
            --devices "${LOOP}p5" --authorizations "file:$PWD/unsealed-key" \
            --devices "${LOOP}p4" --authorizations "file:$PWD/save-key"
    # the recovery key file is still the same
    cmp recovery-key recovery-key-copy
    cryptsetup luksDump "${LOOP}p4" > loop-p4-dump-after
    cryptsetup luksDump "${LOOP}p5" > loop-p5-dump-after
    # the dumps are identical
    diff -u loop-p4-dump loop-p4-dump-after
    diff -u loop-p5-dump loop-p5-dump-after

    echo "Remove the recovery key from ubuntu-data and ubuntu-save"
    # remove-recovery-key removes the file, so make a copy of it
    cp -av recovery-key recovery-key-copy
    systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
        /usr/lib/snapd/snap-fde-keymgr remove-recovery-key \
            --key-files "$PWD/recovery-key-copy" \
            --devices "${LOOP}p5" --authorizations "file:$PWD/unsealed-key" \
            --devices "${LOOP}p4" --authorizations "file:$PWD/save-key"
    # the file was removed
    test ! -f recovery-key-copy
    echo "The recovery key can no longer open ubuntu-save or ubuntu-data"

    echo "Check the disk-mapping.json has expected contents"
    not cryptsetup open --key-file recovery-key "${LOOP}p5" test-data
    not cryptsetup open --key-file recovery-key "${LOOP}p4" test-save

    echo "Verify encryption key change"
    # first get the relevant ubuntu-save key to the user keyring
    systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
        /usr/bin/keyctl padd user "ubuntu-fde:${LOOP}p4:unlock" @u < save-key

    # the new key is all ones
    printf "11111111111111111111111111111111" > new-save-key
    echo '{"key":"MTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTE="}' | \
        systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
            /usr/lib/snapd/snap-fde-keymgr change-encryption-key \
                --device "${LOOP}p4" --stage
    # now it's possible to open save with both the old and new keys
    cryptsetup open --key-file save-key "${LOOP}p4" test-save
    cryptsetup close /dev/mapper/test-save
    cryptsetup open --key-file new-save-key "${LOOP}p4" test-save
    cryptsetup close /dev/mapper/test-save

    # now transition the key
    echo '{"key":"MTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTE="}' | \
        systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
            /usr/lib/snapd/snap-fde-keymgr change-encryption-key \
                --device "${LOOP}p4" --transition

    # the old key no longer works
    not cryptsetup open --key-file save-key "${LOOP}p4" test-save
    # but the new key does
    cryptsetup open --key-file new-save-key "${LOOP}p4" test-save
    cryptsetup close /dev/mapper/test-save

    # try to transition once more, such that we execute a reboot like scenario
    echo '{"key":"MTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTE="}' | \
        systemd-run --pipe --wait --collect -p KeyringMode=inherit -- \
            /usr/lib/snapd/snap-fde-keymgr change-encryption-key \
                --device "${LOOP}p4" --transition
    # and opening should still work
    cryptsetup open --key-file new-save-key "${LOOP}p4" test-save
    cryptsetup close /dev/mapper/test-save

    LOOP_BASENAME="$(basename "$LOOP")"

    # disk things
    jq -r '.pc.size'                                          < "$DISK_MAPPING_JSON" | MATCH 10000000000
    jq -r '.pc."sector-size"'                                 < "$DISK_MAPPING_JSON" | MATCH 512
    jq -r '.pc."device-path"'                                 < "$DISK_MAPPING_JSON" | MATCH "/sys/devices/virtual/block/$LOOP_BASENAME"
    jq -r '.pc."kernel-path"'                                 < "$DISK_MAPPING_JSON" | MATCH "$LOOP"
    jq -r '.pc.schema'                                        < "$DISK_MAPPING_JSON" | MATCH gpt
    jq -r '.pc.structure | length'                            < "$DISK_MAPPING_JSON" | MATCH 5
    jq -r '.pc."structure-encryption" | length'               < "$DISK_MAPPING_JSON" | MATCH 2
    jq -r '.pc."structure-encryption"."ubuntu-data" | length' < "$DISK_MAPPING_JSON" | MATCH 1
    jq -r '.pc."structure-encryption"."ubuntu-save" | length' < "$DISK_MAPPING_JSON" | MATCH 1
    jq -r '.pc."structure-encryption"."ubuntu-data"."method"' < "$DISK_MAPPING_JSON" | MATCH LUKS
    jq -r '.pc."structure-encryption"."ubuntu-save"."method"' < "$DISK_MAPPING_JSON" | MATCH LUKS

    # note: no partition "id" for gpt disks

    # first structure - "BIOS Boot"
    # note: no filesystem for the BIOS Boot structure
    jq -r '.pc.structure[0]."device-path"'      < "$DISK_MAPPING_JSON" | MATCH "/sys/devices/virtual/block/$LOOP_BASENAME/${LOOP_BASENAME}p1"
    jq -r '.pc.structure[0]."kernel-path"'      < "$DISK_MAPPING_JSON" | MATCH "${LOOP}p1"
    jq -r '.pc.structure[0]."filesystem-label"' < "$DISK_MAPPING_JSON" | MATCH ""
    jq -r '.pc.structure[0]."partition-label"'  < "$DISK_MAPPING_JSON" | MATCH "BIOS\\\x20Boot"
    jq -r '.pc.structure[0].id'                 < "$DISK_MAPPING_JSON" | MATCH ""
    jq -r '.pc.structure[0].offset'             < "$DISK_MAPPING_JSON" | MATCH 1048576
    jq -r '.pc.structure[0].size'               < "$DISK_MAPPING_JSON" | MATCH 1048576

    # second structure - ubuntu-seed
    # TODO: for some reason udev does not identify ubuntu-seed as having a
    # filesystem label, I think this has something to do with how we create it
    # artificially above
    jq -r '.pc.structure[1]."device-path"'      < "$DISK_MAPPING_JSON" | MATCH "/sys/devices/virtual/block/$LOOP_BASENAME/${LOOP_BASENAME}p2"
    jq -r '.pc.structure[1]."kernel-path"'      < "$DISK_MAPPING_JSON" | MATCH "${LOOP}p2"
    jq -r '.pc.structure[1]."filesystem-label"' < "$DISK_MAPPING_JSON" | MATCH ""
    jq -r '.pc.structure[1]."partition-label"'  < "$DISK_MAPPING_JSON" | MATCH ubuntu-seed
    jq -r '.pc.structure[1].id'                 < "$DISK_MAPPING_JSON" | MATCH ""
    jq -r '.pc.structure[1].offset'             < "$DISK_MAPPING_JSON" | MATCH 2097152
    jq -r '.pc.structure[1].size'               < "$DISK_MAPPING_JSON" | MATCH 1258291200

    # third structure - ubuntu-boot
    jq -r '.pc.structure[2]."device-path"'      < "$DISK_MAPPING_JSON" | MATCH "/sys/devices/virtual/block/$LOOP_BASENAME/${LOOP_BASENAME}p3"
    jq -r '.pc.structure[2]."kernel-path"'      < "$DISK_MAPPING_JSON" | MATCH "${LOOP}p3"
    jq -r '.pc.structure[2]."filesystem-label"' < "$DISK_MAPPING_JSON" | MATCH ubuntu-boot
    jq -r '.pc.structure[2]."partition-label"'  < "$DISK_MAPPING_JSON" | MATCH ubuntu-boot
    jq -r '.pc.structure[2].id'                 < "$DISK_MAPPING_JSON" | MATCH ""
    jq -r '.pc.structure[2].offset'             < "$DISK_MAPPING_JSON" | MATCH 1260388352
    jq -r '.pc.structure[2].size'               < "$DISK_MAPPING_JSON" | MATCH 786432000

    # fourth structure - ubuntu-save-enc
    jq -r '.pc.structure[3]."device-path"'      < "$DISK_MAPPING_JSON" | MATCH "/sys/devices/virtual/block/$LOOP_BASENAME/${LOOP_BASENAME}p4"
    jq -r '.pc.structure[3]."kernel-path"'      < "$DISK_MAPPING_JSON" | MATCH "${LOOP}p4"
    jq -r '.pc.structure[3]."filesystem-label"' < "$DISK_MAPPING_JSON" | MATCH ubuntu-save-enc
    jq -r '.pc.structure[3]."partition-label"'  < "$DISK_MAPPING_JSON" | MATCH ubuntu-save
    jq -r '.pc.structure[3].id'                 < "$DISK_MAPPING_JSON" | MATCH ""
    if [ "$channel" = "20" ]; then
        jq -r '.pc.structure[3].offset'         < "$DISK_MAPPING_JSON" | MATCH 2046820352
        jq -r '.pc.structure[3].size'           < "$DISK_MAPPING_JSON" | MATCH 16777216
    else
        jq -r '.pc.structure[3].offset'         < "$DISK_MAPPING_JSON" | MATCH 2046820352
        jq -r '.pc.structure[3].size'           < "$DISK_MAPPING_JSON" | MATCH 33554432
    fi

    # fifth structure - ubuntu-data-enc
    jq -r '.pc.structure[4]."device-path"'      < "$DISK_MAPPING_JSON" | MATCH "/sys/devices/virtual/block/$LOOP_BASENAME/${LOOP_BASENAME}p5"
    jq -r '.pc.structure[4]."kernel-path"'      < "$DISK_MAPPING_JSON" | MATCH "${LOOP}p5"
    jq -r '.pc.structure[4]."filesystem-label"' < "$DISK_MAPPING_JSON" | MATCH ubuntu-data-enc
    jq -r '.pc.structure[4]."partition-label"'  < "$DISK_MAPPING_JSON" | MATCH ubuntu-data
    jq -r '.pc.structure[4].id'                 < "$DISK_MAPPING_JSON" | MATCH ""
    if [ "$channel" = "20" ]; then
        jq -r '.pc.structure[4].offset'         < "$DISK_MAPPING_JSON" | MATCH 2063597568
        jq -r '.pc.structure[4].size'           < "$DISK_MAPPING_JSON" | MATCH 7936385536
    else
        jq -r '.pc.structure[4].offset'         < "$DISK_MAPPING_JSON" | MATCH 2080374784
        jq -r '.pc.structure[4].size'           < "$DISK_MAPPING_JSON" | MATCH 7919608320
    fi
