summary: Ensure that the snapd-control interface works.

prepare: |
    echo "Given a snap declaring a plug on the snapd-control interface is installed"
    snapbuild $TESTSLIB/snaps/snapd-control-consumer .
    snap install snapd-control-consumer_1.0_all.snap

restore: |
    rm -f snapd-control-consumer_1.0_all.snap snapd.error

execute: |
    CONNECTED_PATTERN=":snapd-control +snapd-control-consumer"
    DISCONNECTED_PATTERN="(?s).*?\n- +snapd-control-consumer:snapd-control"

    echo "Then it is connected by default"
    snap interfaces | grep -Pzq "$CONNECTED_PATTERN"

    echo "================================================"

    echo "When the plug is disconnected"
    snap disconnect snapd-control-consumer:snapd-control ubuntu-core:snapd-control
    snap interfaces | grep -Pzq "$DISCONNECTED_PATTERN"

    echo "Then the snap command is not able to control snapd"
    if snapd-control-consumer 2>snapd.error; then
        echo "Expected error with plug disconnected"
        exit 1
    fi
    cat snapd.error | grep -q "Permission denied"

    echo "================================================"

    echo "When the plug is connected"
    snap connect snapd-control-consumer:snapd-control ubuntu-core:snapd-control
    snap interfaces | grep -Pzq "$CONNECTED_PATTERN"

    echo "Then the snap command is able to control snapd"
    snapd-control-consumer
    while ! snap list | grep -Pq "test-snapd-tools"; do sleep 1; done
