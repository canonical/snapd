summary: mimic test for the hole-poking code in snap-update-ns

details: |
    When snap-confine cannot create a mount point because of read-only
    filesystem it will use a "writable mimic" constructed out of tmpfs and a
    farm of bind mounts.  This test contains a mimic snap that has various
    kinds of elements that must be correctly handled by the mimic code.

prepare: |
    . $TESTSLIB/snaps.sh
    install_local test-snapd-content-mimic-plug
    install_local test-snapd-content-mimic-slot

environment:
    PLUG: test-snapd-content-mimic-plug:content
    SLOT: test-snapd-content-mimic-slot:content

execute: |
    # Before the content interface is connected we expect to see certain files
    # in the $SNAP directory. Those files represent various kinds of filesystem
    # entries that should be correctly replicated inside the mimic.
    
    check_existing_files() {
        test-snapd-content-mimic-plug.sh -c 'test -f $SNAP/file'
        test-snapd-content-mimic-plug.sh -c 'test -d $SNAP/dir'
        test-snapd-content-mimic-plug.sh -c 'test -h $SNAP/symlink'
        test-snapd-content-mimic-plug.sh -c 'cat $SNAP/file' | MATCH 'content-of-file'
        test-snapd-content-mimic-plug.sh -c 'ls $SNAP/dir' | MATCH 'stuff-in-dir'
        test-snapd-content-mimic-plug.sh -c 'readlink $SNAP/symlink' | MATCH 'symlink-target'
    }

    # Measure the real thing, before a mimic is established.
    check_existing_files

    # Connect the content interface which will make $SNAP/content show up (TIP:
    # it's not in the snap! It's added dynamically at runtime). Not only we get
    # access to the new things (we'll check those shortly) but we also retain
    # access to the same old stuff that was there before.
    test-snapd-content-mimic-plug.sh -c 'test ! -e $SNAP/content'
    snap connect "$PLUG" "$SLOT"
    check_existing_files
    test-snapd-content-mimic-plug.sh -c 'test -d $SNAP/content'

    # The content connection also means we should see shared content inside the
    # newly created directory. 
    test-snapd-content-mimic-plug.sh -c 'test -e $SNAP/content/canary'

    # The content interface is fully undoable so as soon as we disconnect all
    # of that goes away without a trace.
    snap disconnect "$PLUG" "$SLOT"
    check_existing_files
    test-snapd-content-mimic-plug.sh -c 'test ! -e $SNAP/content'
