summary: Ensures that the mount entries from different interfaces can coexist

details: |
    Both the system-observe and the fwupd interfaces expose the host /boot
    directory into the snap mount namespace as a bind mount. While the former
    only grants R/O access, the latter grants R/W access.

    With this test we want to make sure that /boot is mounted as R/W inside the
    snap.

# On UC the system-observe interface is not doing a mount of the full /boot
# folder (since the kernel is delivered as a snap, there won't be any
# /boot/config* files, so the interface code will skip adding the mount entry),
# so this test is pointless there (and partially failing).
# On Arch and openSUSE tumbleweed, the /boot/config* files are missing, so
# these also are distributions we can't use for this test.
systems: [-arch-*,-opensuse-tumbleweed-*,-ubuntu-core-*]

prepare: |
    "$TESTSTOOLS"/snaps-state install-local testsnap
    "$TESTSTOOLS"/snaps-state install-local fwupd-client
    snap connect testsnap:system-observe
    snap connect fwupd-client:fwupd testsnap:fwupd

restore: |
    rm -rf /boot/efi/EFI/foo

execute: |
    echo "Check that we can read /boot"
    KERNEL_VERSION="$(uname -r)"
    testsnap.cmd cat "/boot/config-$KERNEL_VERSION" | MATCH "CONFIG_"

    echo "Check that we can write in /boot"
    # The snap doesn't have permissions to create dirs, so let's do it while
    # unconfined
    mkdir -p /boot/efi/EFI/foo/fw/
    testsnap.cmd sh -c "echo hello > /boot/efi/EFI/foo/fw/new-file"
