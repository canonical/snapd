summary: Ensure snap userd allows settings via xdg-settings

# Not supposed to work on Ubuntu Core systems as we don't have
# a user session environment there
systems:
    - -amazon-linux-2-*  # does not support systemd --user
    - -centos-7-*  # does not support systemd --user
    - -ubuntu-14.04-*  # not supported as desktop OS, systemd too old for tests.session
    - -ubuntu-core-*  # test exercises regular xdg-settings, not the custom one in ubuntu-core

prepare: |
    "$TESTSTOOLS"/snaps-state install-local test-snapd-xdg-settings

    tests.session -u test prepare

    # wait for session to be ready
    # TODO: change this to busctl, it's much easier to use.
    tests.session -u test exec env "PATH=$PATH" retry -n 5 --wait 0.5 dbus-send \
            --session                                         \
            --dest=io.snapcraft.Settings                      \
            --type=method_call                                \
            --print-reply                                     \
            /                                                 \
            org.freedesktop.DBus.Peer.Ping

    # Create a small helper which will tell us if snap passes
    # the settings to the right handler
    cat << 'EOF' > /tmp/xdg-settings
    #!/bin/sh
    echo "$@" > /tmp/xdg-settings-output
    EOF

    chmod +x /tmp/xdg-settings
    touch /usr/bin/xdg-settings
    mount --bind /tmp/xdg-settings /usr/bin/xdg-settings

restore: |
    tests.session -u test restore
    umount -f /usr/bin/xdg-settings || true
    umount -f /usr/bin/zenity || true

execute: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    ensure_xdg_settings_output() {
        rm -f /tmp/xdg-settings-output

        # run xdg-settings from inside the snap
        tests.session -u test exec test-snapd-xdg-settings.xdg-settings-wrapper "$@"

        if [ $# -eq 3 ]; then
            # the dbus interface rewrites the final param to be <snap name>_<desktop file>
            test_output="$1 $2 test-snapd-xdg-settings_$3"
        elif [ $# -eq 4 ]; then
            # the dbus interface rewrites the final param to be <snap name>_<desktop file>
            test_output="$1 $2 $3 test-snapd-xdg-settings_$4"
        else
            return
        fi

        # verify that the command was transmitted corrected via dbus
        test -e /tmp/xdg-settings-output
        test "$(cat /tmp/xdg-settings-output)" = "$test_output"
    }

    ensure_error_no_xdg_settings_output() {
        rm -f /tmp/xdg-settings-output

        # run xdg-settings from inside the snap
        not tests.session -u test exec test-snapd-xdg-settings.xdg-settings-wrapper "$@"

        # verify that the output file doesn't exist
        test ! -e /tmp/xdg-settings-output
    }

    # ensure zenity answers "yes"
    touch /usr/bin/zenity
    mount --bind /bin/true /usr/bin/zenity

    # Test valid actions
    ensure_xdg_settings_output "set" "default-web-browser" "browser.desktop"
    ensure_xdg_settings_output "set" "default-url-scheme-handler" "irc" "browser.desktop"

    # Test unknown action
    ensure_error_no_xdg_settings_output "unknown" 2> stderr.log
    MATCH 'unknown action unknown' < stderr.log

    # Ensure settings whitelist works
    ensure_error_no_xdg_settings_output "set" "random-settting" "something" 2> stderr.log
    MATCH 'invalid setting "random-settting"' < stderr.log

    # Ensure settings value validation works
    ensure_error_no_xdg_settings_output "set" "default-web-browser" "in채lid" 2> stderr.log
    MATCH 'cannot set "default-web-browser" setting to invalid value "in채lid"' < stderr.log

    ensure_error_no_xdg_settings_output "set" "default-url-scheme-handler" "irc" "in채lid" 2> stderr.log
    MATCH 'cannot set "default-url-scheme-handler" subproperty "irc" setting to invalid value "in채lid"' < stderr.log

    # ensure zenity answers "no"
    umount /usr/bin/zenity
    mount --bind /bin/false /usr/bin/zenity

    ensure_error_no_xdg_settings_output "set" "default-web-browser" "browser.desktop"
