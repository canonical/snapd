summary: Check that undo for snap refresh works

systems: [-ubuntu-core-16-64, -ubuntu-core-16-arm-64, -ubuntu-core-16-arm-32]

environment:
    BLOB_DIR: $(pwd)/fake-store-blobdir
    GOOD_SNAP: test-snapd-python-webserver
    BAD_SNAP: test-snapd-tools

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    . $TESTSLIB/store.sh

    echo "Given two snaps are installed"
    for snap in $GOOD_SNAP $BAD_SNAP; do
        snap install $snap
    done

    echo "And the daemon is configured to point to the fake store"
    setup_fake_store $BLOB_DIR

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    . $TESTSLIB/store.sh
    teardown_fake_store $BLOB_DIR

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    echo "When the store is configured to make them refreshable"
    . $TESTSLIB/store.sh
    init_fake_refreshes $GOOD_SNAP,$BAD_SNAP $BLOB_DIR

    echo "When a snap is broken"
    echo "i-am-broken-now" >> $BLOB_DIR/${BAD_SNAP}*fake1*.snap

    echo "And a refresh is performed"
    if snap refresh ; then
        echo "snap refresh should fail but it did not, test is broken"
        exit 1
    fi

    echo "Then the new version of the good snap got installed"
    snap list | MATCH -E "${GOOD_SNAP}.*?fake1"

    echo "But the bad snap did not get updated"
    snap list | MATCH -E "${BAD_SNAP}"| MATCH -v "fake"

    echo "Verify the snap change"
    snap change 4 | MATCH "Undone.*Download snap \"${BAD_SNAP}\""
    snap change 4 | MATCH "Done.*Download snap \"${GOOD_SNAP}\""
    snap change 4 | MATCH "ERROR cannot verify snap \"test-snapd-tools\", no matching signatures found"
