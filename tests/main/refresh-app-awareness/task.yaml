summary: Ensure that foreground applications block app refresh.

details: |
    When the refresh-app-awareness feature is enabled running snap processes,
    mainly foreground applications, will block the refresh of said snap.

# Ubuntu 14.04's special version of systemd doesn't have StartTransientUnit API.
systems: [-ubuntu-14.04-*]

environment:
    CONFINEMENT/classic: classic
    CONFINEMENT/strict: strict

prepare: |
    # This feature depends on the release-app-awareness feature
    snap set core experimental.refresh-app-awareness=true
    sed -e "s/@CONFINEMENT@/$CONFINEMENT/g" <test-snapd-refresh.v1/meta/snap.yaml.in >test-snapd-refresh.v1/meta/snap.yaml
    sed -e "s/@CONFINEMENT@/$CONFINEMENT/g" <test-snapd-refresh.v2/meta/snap.yaml.in >test-snapd-refresh.v2/meta/snap.yaml
    snap pack test-snapd-refresh.v1
    snap pack test-snapd-refresh.v2
    tests.session -u test prepare

restore: |
    snap remove --purge test-snapd-refresh
    rm -f test-snapd-refresh-{1,2}_all.snap
    rm -f test-snapd-refresh.*/meta/snap.yaml
    snap unset core experimental.refresh-app-awareness

    # Stop the dbus.service of the user session of the root user. This test
    # runs in several configurations, not all of which have this capability.
    # Where supported the test code below causes socket activation, through the
    # refresh-app-awareness application tracking mechanism built into snap
    # run. This session-level dbus daemon is detected as spurious by the
    # invariant checker.
    systemctl --user stop dbus.service || true
    tests.session -u test restore

execute: |
    if ! snap debug sandbox-features --required "confinement-options:$CONFINEMENT"; then
        echo "SKIP: unsupported confinement variant"
        exit 0
    fi
    # Install v1 and see that it runs as expected.
    case "$CONFINEMENT" in
        classic)
            snap install --dangerous --classic test-snapd-refresh_1_all.snap
            ;;
        strict)
            snap install --dangerous test-snapd-refresh_1_all.snap
            ;;
    esac
    test-snapd-refresh.version | MATCH v1

    # We can run "snap run" as a test user, which does not have the permission
    # to create the run inhibition lock file.
    tests.session -u test exec snap run test-snapd-refresh.version | MATCH v1

    # Run a sleeper app to keep the snap busy. The purpose of the stamp file is
    # to allow us to synchronize with the concurrently running program.
    #shellcheck disable=SC2016
    test-snapd-refresh.sh -c 'touch $SNAP_DATA/stamp && exec sleep 1h' &
    pid=$!
    trap 'kill '"$pid"' || true' EXIT

    # While the sleeper app is running check that we can still run other
    # processes. This checks if we can spawn a distinct scope.
    test-snapd-refresh.version | MATCH v1

    # Ensure that snap-confine has finished its task and that the snap process
    # is active. Note that we don't want to wait forever either.
    retry -n 30 --wait 0.1 test -e /var/snap/test-snapd-refresh/current/stamp

    # Try to install v2, it should fail because v1 is running. Snapd is kind
    # enough to tell us what is preventing the install from working.
    # The error message is automatically wrapped so unwrap it here.
    unwrap_msg() {
        tr '\n' ' ' | sed -e 's/ \+/ /g'
    }
    case "$CONFINEMENT" in
        classic)
            not snap install --dangerous --classic test-snapd-refresh_2_all.snap >install.log 2>&1
            ;;
        strict)
            not snap install --dangerous test-snapd-refresh_2_all.snap >install.log 2>&1
            ;;
    esac
    unwrap_msg < install.log | MATCH 'error: cannot install snap file: snap "test-snapd-refresh" has running apps +\(sh\)'
    test-snapd-refresh.version | MATCH v1

    # Kill the app process running from v1.
    kill "$pid"
    wait "$pid" || true  # wait returns the exit code and we kill the process
    # Try to install v2 again, it should now work.
    case "$CONFINEMENT" in
        classic)
            snap install --dangerous --classic test-snapd-refresh_2_all.snap
            ;;
        strict)
            snap install --dangerous test-snapd-refresh_2_all.snap
            ;;
    esac
    test-snapd-refresh.version | MATCH v2

    # We can run "snap run" as a test user, which does not have the permission
    # to open the run inhibition lock file for writing.
    tests.session -u test exec snap run test-snapd-refresh.version | MATCH v2
