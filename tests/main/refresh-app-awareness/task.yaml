summary: Ensure that foreground applications block app refresh.
# fedora-31: uses cgroupv2, which we don't support
systems: [ -fedora-31-*]
details: |
    When the refresh-app-awareness feature is enabled running snap processes,
    mainly foreground applications, will block the refresh of said snap.
prepare: |
    # This feature depends on the release-app-awareness feature
    snap set core experimental.refresh-app-awareness=true
    sed -e "s/@CONFINEMENT@/$CONFINEMENT/g" <test-snapd-refresh.v1/meta/snap.yaml.in >test-snapd-refresh.v1/meta/snap.yaml
    sed -e "s/@CONFINEMENT@/$CONFINEMENT/g" <test-snapd-refresh.v2/meta/snap.yaml.in >test-snapd-refresh.v2/meta/snap.yaml
    snap pack test-snapd-refresh.v1
    snap pack test-snapd-refresh.v2
environment:
    CONFINEMENT/classic: classic
    CONFINEMENT/strict: strict
restore: |
    snap remove --purge test-snapd-refresh
    rm -f test-snapd-refresh-{1,2}_all.snap
    rm -f test-snapd-refresh.*/meta/snap.yaml
    rmdir /sys/fs/cgroup/pids/snap.test-snapd-refresh.sh || true
    rmdir /sys/fs/cgroup/pids/snap.test-snapd-refresh.version || true
    # TODO: There is currently no way to unset configuration options.
    # Once this is fixed please uncomment this line:
    # snap unset core experimental.refresh-app-awareness
    rm -f install.log
execute: |
    if ! snap debug sandbox-features --required "confinement-options:$CONFINEMENT"; then
        echo "SKIP: unsupported confinement variant"
        exit 0
    fi
    # Install v1 and see that it runs as expected.
    case "$CONFINEMENT" in
        classic)
            snap install --dangerous --classic test-snapd-refresh_1_all.snap
            ;;
        strict)
            snap install --dangerous test-snapd-refresh_1_all.snap
            ;;
    esac
    test-snapd-refresh.version | MATCH v1

    # Run a sleeper app to keep the snap busy. The purpose of the stamp file is
    # to allow us to synchronize with the concurrently running program.
    #shellcheck disable=SC2016
    test-snapd-refresh.sh -c 'touch $SNAP_DATA/stamp && exec sleep 1h' &
    pid=$!
    trap 'kill '"$pid"' || true' EXIT

    # Ensure that snap-confine has finished its task and that the snap process
    # is active. Note that we don't want to wait forever either.
    retry-tool -n 30 --wait 0.1 test -e /var/snap/test-snapd-refresh/current/stamp

    # Try to install v2, it should fail because v1 is running. Snapd is kind
    # enough to tell us what is preventing the install from working.
    # The error message is automatically wrapped so unwrap it here.
    unwrap_msg() {
        tr '\n' ' ' | sed -e 's/ \+/ /g'
    }
    case "$CONFINEMENT" in
        classic)
            not snap install --dangerous --classic test-snapd-refresh_2_all.snap >install.log 2>&1
            ;;
        strict)
            not snap install --dangerous test-snapd-refresh_2_all.snap >install.log 2>&1
            ;;
    esac
    unwrap_msg < install.log | MATCH 'error: cannot install snap file: snap "test-snapd-refresh" has running apps +\(sh\)'
    test-snapd-refresh.version | MATCH v1

    # Kill the app process running from v1.
    kill "$pid"
    wait "$pid" || true  # wait returns the exit code and we kill the process
    # Try to install v2 again, it should now work.
    case "$CONFINEMENT" in
        classic)
            snap install --dangerous --classic test-snapd-refresh_2_all.snap
            ;;
        strict)
            snap install --dangerous test-snapd-refresh_2_all.snap
            ;;
    esac
    test-snapd-refresh.version | MATCH v2
