summary: Ensure snapd builds as a snap

details: |
    Ensure snapd builds as a snap

# TODO: we don't need to build the snapd snap in this test on as many systems
# when we have a way to dynamically download the snapd snap that was built for a
# particular PR from github actions, in which case we can just download that and
# install it here to test the things that we need to test about the snapd snap

# effectively we can only build the snap using LXD + snapcraft on ubuntu systems
# due to various bugs with other distros and snapcraft and/or LXD
systems:
    # snapcraft is a classic snap, can't run on ubuntu-core
    - -ubuntu-core*
    # LXD doesn't work properly on amazon linux, fedora 31, opensuse, or debian
    # 9 to build the snap, it complains about fuse.snapfuse getting EPERM when
    # snaps are installed inside the LXD container that snapcraft creates
    - -amazon-linux*
    - -debian-*
    - -fedora-*
    - -opensuse-*
    # additionally on fedora 32 and 33, and arch linux which are all cgroupsv2
    # now, LXD does not work either, with the service failing to start up at all
    # when we install LXD
    - -arch-*
    # snapcraft does not support running on centos 7 due to errors with the
    # locale, see https://bugs.launchpad.net/snapcraft/+bug/1922140
    # a separate error occurs on centos 8, see https://bugs.launchpad.net/snapcraft/+bug/1922981
    - -centos-*
    # ubuntu-18.04-32: i386 is not supported by lxd
    # TODO: enable i386 by using lxd 3.0, currently snapcraft is failing to get the
    #       lxd image when it is trying to build snapd
    - -ubuntu-18.04-32

# Start early as it takes a long time.
priority: 100
kill-timeout: 35m

environment:
    # the destructive build mode runs only on xenial, but we also run lxd on
    # xenial to make sure it builds there too
    SNAPCRAFT_BUILD_ENVIRONMENT/destructive: host
    SNAPCRAFT_BUILD_ENVIRONMENT/lxd: lxd
    CONSUMER_SNAP: test-snapd-policy-app-consumer

prepare: |
    # shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB/systems.sh"

    # only run the destructive mode variant on xenial
    if ! os.query is-xenial && [ "$SNAPCRAFT_BUILD_ENVIRONMENT" = "host" ]; then
        echo "Skipping destructive mode build on non-xenial"
        exit 0
    fi

    if is_cgroupv2 && [ "$SNAPCRAFT_BUILD_ENVIRONMENT" = "lxd" ]; then
        # snapd snap uses core build base (16.04) which cannot be booted
        # properly on a host using unified hierarchy
        echo "Skipping LXD build with unified cgroup hierarchy"
        exit 0
    fi

    if os.query is-fedora || os.query is-arch-linux || os.query is-centos; then
        # in order to install classic snaps, we need to setup the /snap 
        # symlink on these distros
        SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
        ln -sf "$SNAP_MOUNT_DIR" /snap
        tests.cleanup defer rm -f /snap
    fi

    echo "Install snapcraft from 4.x/candidate"
    snap install snapcraft --channel=4.x/candidate --classic
    tests.cleanup defer snap remove --purge snapcraft

    if [ "$SNAPCRAFT_BUILD_ENVIRONMENT" = "lxd" ]; then
        echo "Remove any installed debs (some images carry them) to ensure we test the snap"
        # apt -v to test if apt is usable
        if command -v apt && apt -v; then
            # meh trusty's apt doesn't support -y, so use apt-get
            apt-get autoremove -y lxd
            if ! os.query is-debian sid; then
                # no lxd-client on debian sid
                apt-get autoremove -y lxd-client
            fi
        fi

        # load the fuse kernel module before installing lxd
        modprobe fuse

        echo "Install lxd"
        "$TESTSTOOLS"/lxd-state prepare-snap

        echo "Switch the core snap back due to spread system prepare shenanigans"
        # When we run spread, we will repack the core snap that is installed on
        # the system to match the binaries that we built on this system so that
        # we keep executing the stuff from the branch, even if re-exec is 
        # enabled unconditionally for all spread tests. This presents a problem
        # for snapcraft, which downloads the current snap file from snapd 
        # directly using the /v2/snaps/{name}/file endpoint, which will just 
        # send over the modified file without indicating at all that the current
        # file is modified from the installed revision (indeed snapd reports to
        # snapcraft that it is running the specific edge revision from the 
        # store, and not x1 as it would in devmode for example which snapcraft
        # correctly handles).
        # As such, we need to switch the modified core snap on the system back 
        # with the original core snap on the system that is unmodified and will
        # match the expected assertions that snapcraft calculates

        # the easy way is to trick snapd is to just mount back the original file
        # on top of the repacked one, then snapd will just serve the correct
        # file over HTTP to snapcraft when it asks for it

        # When the SRU validation tests are executed, the core snap is not repacked
        # and the var MODIFY_CORE_SNAP_FOR_REEXEC is 0
        if [ "$MODIFY_CORE_SNAP_FOR_REEXEC" = 1 ]; then
            CORE_SNAP_REV=$(snap list core | grep -v Name | awk '{print $3}')
            CORE_SNAP="/var/lib/snapd/snaps/core_${CORE_SNAP_REV}.snap"
            ORIG_CORE_SNAP=${CORE_SNAP}.orig

            mount --bind "$ORIG_CORE_SNAP" "$CORE_SNAP"
            tests.cleanup defer umount "$CORE_SNAP"
        fi
    fi

debug: |
    # get the snapd sandbox features
    snap debug sandbox-features

    # get the full journal to see any out-of-memory errors
    # shellcheck disable=SC2119
    "$TESTSTOOLS"/journal-state get-log

execute: |
    # shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB/systems.sh"

    # only run the destructive mode variant on xenial
    if ! os.query is-xenial && [ "$SNAPCRAFT_BUILD_ENVIRONMENT" = "host" ]; then
        echo "Skipping destructive mode build on non-xenial"
        exit 0
    fi

    if is_cgroupv2 && [ "$SNAPCRAFT_BUILD_ENVIRONMENT" = "lxd" ]; then
        # snapd snap uses core build base (16.04) which cannot be booted
        # properly on a host using unified hierarchy
        echo "Skipping LXD build with unified cgroup hierarchy"
        exit 0
    fi

    if [ "$SPREAD_REBOOT" != "0" ]; then
      if os.query is-trusty; then
        # seems we have to kick trusty along
        systemctl restart snapd
      fi
      snap list | MATCH snapd
      systemctl status snapd.service
      if ! os.query is-trusty && ! os.query is-xenial; then
        systemctl status snapd.apparmor.service
      fi
      if os.query is-ubuntu; then
        systemctl status apparmor.service
      fi
      cat /var/lib/snapd/system-key
      echo "Rebooted successfully"

      exit 0
    fi
    # shellcheck disable=SC2164
    pushd "$PROJECT_PATH"

    echo "Ensure we use the correct version when host is 14.04"
    if os.query is-trusty; then
      # prepare-restore.sh will only have updated
      # packaging/ubuntu-14.04/changelog so make sure this is also done for
      # the ubuntu-16.04 packaging as well as this is what will be used to
      # build the snapd snap

      # Use fake version to ensure we are always bigger than anything else
      dch --changelog packaging/ubuntu-16.04/changelog --newversion "1337.$(dpkg-parsechangelog --show-field Version)" "testing build"
    fi

    echo "Build the snap"
    snap run snapcraft snap --output=snapd_spread-test.snap
    popd

    mv "$PROJECT_PATH/snapd_spread-test.snap" "$PWD/snapd_spread-test.snap"

    # meh it doesn't work well to use quotes and "&&" in the arguments to sh -c
    # with defer, so just put what we want to run in a script and execute that
    cat >> snapcraft-cleanup.sh <<EOF
    #!/bin/sh
    cd $PROJECT_PATH
    snap run snapcraft clean
    EOF
    chmod +x snapcraft-cleanup.sh
    tests.cleanup defer sh -c "$PWD/snapcraft-cleanup.sh"

    echo "Unsquash the snapd snap"
    unsquashfs snapd_spread-test.snap

    echo "Ensure we have xdelta3"
    test -f squashfs-root/usr/bin/xdelta3

    echo "Ensure we have mksquashfs (and the dependencies)"
    test -f squashfs-root/usr/bin/mksquashfs
    find squashfs-root | MATCH liblzma.so.5

    echo "Ensure we have libc"
    find squashfs-root | MATCH libc.so
    echo "Ensure we have ld.so.conf"
    test -f squashfs-root/etc/ld.so.conf

    echo "Ensure we have preseed.json"
    test -f squashfs-root/usr/lib/snapd/preseed.json

    echo "Check /usr/lib/snapd/info"
    test -f squashfs-root/usr/lib/snapd/info
    MATCH SNAPD_ASSERTS_FORMATS < squashfs-root/usr/lib/snapd/info

    unsquashfs -ll snapd_spread-test.snap | MATCH libc.so

    echo "Ensure we have apparmor_parser"
    unsquashfs -ll snapd_spread-test.snap | MATCH usr/lib/snapd/apparmor_parser

    echo "Ensure we can install the snapd snap"
    snap install --dangerous snapd_spread-test.snap
    cat >> snapd-cleanup.sh <<EOF
    #!/bin/sh
    if [ $(find /snap/snapd/ -maxdepth 1 -type d 2>/dev/null | wc -l) -gt 2 ]; then
      snap revert snapd
    fi
    EOF
    chmod +x snapd-cleanup.sh
    tests.cleanup defer sh -c "$PWD/snapd-cleanup.sh"

    echo "Ensure we restarted into the snapd snap"
    "$TESTSTOOLS"/journal-state match-log  'restarting into "/snap/snapd/'

    # see LP:2024637
    if grep -q /var/lib/snapd/apparmor/ /lib/apparmor/functions; then
       echo "SKIP: cannot test builtin apparmor parser until /lib/apparmor/functions stops loading the snapd profiles"
       exit 0
    fi

    echo "Ensure sandbox-features shows the internal apparmor_parser"
    snap debug sandbox-features --required apparmor:parser:snapd-internal

    echo "Ensure snap-confine apparmor profile points to snap-confine.internal"
    for profile in /var/lib/snapd/apparmor/profiles/snap-confine.*; do
        MATCH '#include "/var/lib/snapd/apparmor/snap-confine.internal"' < "$profile"
    done

    echo "Ensure we support posix mqueue and userns in the internal apparmor_parser"
    snap debug sandbox-features --required apparmor:parser:mqueue
    snap debug sandbox-features --required apparmor:parser:userns
    
    echo "Then we should be able to compile policy using the internal apparmor_parser"
    /snap/snapd/current/usr/lib/snapd/apparmor_parser \
      --config-file /snap/snapd/current/usr/lib/snapd/apparmor/parser.conf \
      -b /snap/snapd/current/usr/lib/snapd/apparmor.d \
      --policy-features /snap/snapd/current/usr/lib/snapd/apparmor.d/abi/3.0 \
      -r /var/lib/snapd/apparmor/profiles/snap.snapcraft.snapcraft

    echo "Then we should be able to successfully install a snap"
    snap install hello-world
    tests.cleanup defer snap remove --purge hello-world

    echo "Then hello-world.evil should fail due to snap confinement"
    if hello-world.evil; then
        echo "hello-world.evil should fail due to snap confinement"
        exit 1
    fi

    echo "Then the profile should support include-if-exists"
    MATCH "#include if exists \"/var/lib/snapd/apparmor/snap-tuning\"" < /var/lib/snapd/apparmor/profiles/snap.hello-world.evil

    # Replicate the tests from tests/main/interfaces-many-core-provided so
    # we can exercise the vendored appamor_parser etc within the snapd snap

    # We remove the shared-memory plug and interface in trusty because it fails with the
    # following error since adding private /dev/shm support to shared-memory interface:
    # shared-memory plug with "private: true" cannot be connected if "/dev/shm" is a symlink)
    if os.query is-trusty; then
        cp -r "$TESTSLIB/snaps/$CONSUMER_SNAP" .
        sed -e '/shared-memory:/,+2d' -i "$CONSUMER_SNAP"/meta/snap.yaml
    fi

    echo "Given a snap is installed"
    "$TESTSTOOLS"/snaps-state install-local "$CONSUMER_SNAP"
    tests.cleanup defer snap remove --purge "$CONSUMER_SNAP"

    # If possible, prepare a session for the test user. On many systems this
    # will allow running all tests as the unprivileged user. This shields us
    # from accidentally triggering any additional processes from run in the
    # session of the root user and stay behind after this test terminates.
    if tests.session has-session-systemd-and-dbus; then
        tests.session -u test prepare
        tests.cleanup defer tests.session -u test restore
    fi

    echo "For each core-provided slot"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    for plugcmd in "$SNAP_MOUNT_DIR"/bin/"$CONSUMER_SNAP".* ; do

        # Only connect 1/8 of the interfaces on xenial - the Xenial GA
        # kernel has a bad memory leak (LP: #1939915) triggered by
        # reloading apparmor profiles too much and the test fails
        # (kill-timeout) trying either to remove interfaces or removing the
        # snap whilst waiting for apparmor_parser to finish, so avoid this
        # by only touching some of the interfaces overall - there also
        # seems to be another smaller leak on Bionic etc too so only do
        # one third of the interfaces on other systems
        if os.query is-xenial && [ "$((RANDOM % 8))" != 0 ] || [ "$((RANDOM % 3))" != 0 ]; then
            echo "skipping plug: $plugcmd"
            continue
        fi
        plugcmd_bn=$(basename "$plugcmd")
        plug_iface=$(echo "$plugcmd_bn" | tr '.' ':')
        #shellcheck disable=SC2001
        slot_iface=$(echo "$plug_iface" | sed "s/$CONSUMER_SNAP//")

        # we test browser-support two different ways, so account for that
        if [ "$plug_iface" = "$CONSUMER_SNAP:browser-sandbox" ]; then
            slot_iface=":browser-support"
        fi

        CONNECTED_PATTERN="$slot_iface +.*$CONSUMER_SNAP"
        DISCONNECTED_PATTERN="$slot_iface +-"
        if [ "$SNAPCRAFT_BUILD_ENVIRONMENT" = "lxd" ]; then
            # with lxd snap installed these slot will be connected to the lxd
            # snap already
            if [ "$slot_iface" = ":lxd-support" ] || [ "$slot_iface" = ":system-observe" ]; then
                DISCONNECTED_PATTERN="$slot_iface +lxd"
            fi
        fi
        # Skip any interfaces that core doesn't ship
        if ! snap interfaces | grep -E -q "$slot_iface +"; then
            echo "$slot_iface not present, skipping"
            continue
        fi

        if [ "$plug_iface" = "$CONSUMER_SNAP:mount-control" ] && os.query is-trusty ; then
            # systemd version is too old, skipping
            snap connect "$plug_iface" "$slot_iface" 2>&1 | MATCH "systemd version 204 is too old \\(expected at least 209\\)"
            continue
        fi

        echo "When slot $slot_iface is connected"
        if snap interfaces | grep -E -q "$DISCONNECTED_PATTERN"; then
            if [ "$SNAPCRAFT_BUILD_ENVIRONMENT" = "lxd" ]; then
                # we have the lxd snap installed so it provides the lxd slot -
                # connect to that explicitly
                if [ "$slot_iface" = ":lxd" ]; then
                    slot_iface="lxd:lxd"
                fi
            fi
            if [ "$slot_iface" = ":broadcom-asic-control" ] || [ "$slot_iface" = ":firewall-control" ] || [ "$slot_iface" = ":kubernetes-support" ] || [ "$slot_iface" = ":openvswitch-support" ] || [ "$slot_iface" = ":ppp" ]; then
                # TODO: when the kmod backend no longer fails on missing
                # modules, we can remove this
                snap connect "$plug_iface" "$slot_iface" || true
            else
                snap connect "$plug_iface" "$slot_iface"
            fi
        fi
        snap interfaces | MATCH "$CONNECTED_PATTERN"

        echo "Then $plugcmd should succeed"
        if tests.session has-session-systemd-and-dbus; then
            tests.session -u test exec "$plugcmd" | MATCH PASS
        else
            # If we cannot run the plug command as the test user, in the
            # relative safety of the user session which gets torn down, then
            # run the test directly EXCEPT when testing the desktop interface.
            #
            # The desktop interface causes, at minimum, XDG document portal to
            # activate in the root users's session, which is not cleaned up.
            # Since that interface will only be used in a real session, leaving
            # it out is acceptable.
            if [ "$plugcmd" != "${CONSUMER_SNAP}.desktop" ]; then
                "$plugcmd" | MATCH PASS
            else
                echo "skipping $plugcmd on an unsupported system"
            fi
        fi

        echo "Finally disconnect the interface"
        if snap interfaces | grep -E -q "$CONNECTED_PATTERN"; then
            if [ "$plug_iface" = "$CONSUMER_SNAP:browser-sandbox" ]; then
                snap disconnect "$CONSUMER_SNAP:browser-support" "$slot_iface"
            else
                snap disconnect "$plug_iface" "$slot_iface"
            fi
        fi
    done

    # also check that snapd-apparmor service works
    if ! os.query is-trusty && ! os.query is-xenial; then
      systemctl status snapd.apparmor.service
    fi

    # reboot to ensure snapd.apparmor still works then too
    if [ "$SPREAD_REBOOT" = "0" ]; then
        # downgrade the snapd deb from the distro package to test that we can
        # still handle the generated apparmor profiles etc from the snapd snap
        echo "Downgrading snapd to distro packaged version..."
        # this fails on ubuntu-16.04 and 14.04 since the distro installed
        # version of snapd comes from esm.ubuntu.com but the spread instances do
        # not have credentials for esm.ubuntu.com
        if ! os.query is-trusty && ! os.query is-xenial; then
            apt install -y --allow-downgrades "snapd/$(lsb_release -sc)"
            tests.cleanup defer apt install -y "$PROJECT_PATH/../"snapd_1337.*_"$(dpkg-architecture -qDEB_HOST_ARCH)".deb

            # check snapd.apparmor is still working after downgrade
            if ! os.query is-trusty && ! os.query is-xenial; then
                systemctl status snapd.apparmor.service
            fi
            echo "Rebooting to re-generate system-key..."
            REBOOT
        fi
    fi
