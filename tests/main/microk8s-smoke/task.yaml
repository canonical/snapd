summary: Smoke test for microk8s

details: |
    Verify the basic functionalities for the microk8s snap. Check that
    when the snap is installed, the  nodes and services can be retrieved,
    and nginx service can be deployed and configured. Also check there
    is not any denials during this process.

backends:
  - -external

systems:
  - -amazon-linux-2-*    # fails to start service daemon-containerd
  - -amazon-linux-2023-* # fails to start service daemon-containerd
  - -centos-7-*          # doesn't have libseccomp >= 2.4
  - -centos-8-*          # fails to start service daemon-containerd
  - -centos-9-*          # fails to start service daemon-containerd
  - -fedora-38-*         # fails to start service daemon-containerd
  - -fedora-39-*      # fails to start service daemon-containerd
  - -ubuntu-14.04-*      # doesn't have libseccomp >= 2.4
  - -ubuntu-*-32         # no microk8s snap for 32 bit systems
  - -arch-linux-*        # XXX: no curl to the pod for unknown reasons
  - -ubuntu-*-arm*       # not available on arm

environment:
    CHANNEL/edge: 1.25-strict/edge
    # apparmor profile of microk8s can make snapd exceed its spread memory limit
    SNAPD_NO_MEMORY_LIMIT: 1

prepare: |
    # ensure curl is available (needed for Ubuntu Core)
    if ! command -v curl; then
        snap install --devmode --edge test-snapd-curl
        snap alias test-snapd-curl.curl curl
        tests.cleanup defer snap remove --purge test-snapd-curl
    fi

    # The default timeout for the configure hook is 5min - however in the
    # testsuite this is lowered to 30 seconds. We need to undo this for the
    # microk8s spread test because it really take a bit to get configured.
    cp /etc/systemd/system/snapd.service.d/local.conf /etc/systemd/system/snapd.service.d/local.conf.bak
    sed 's/SNAPD_CONFIGURE_HOOK_TIMEOUT=.*s/SNAPD_CONFIGURE_HOOK_TIMEOUT=180s/g' -i /etc/systemd/system/snapd.service.d/local.conf
    tests.cleanup defer mv /etc/systemd/system/snapd.service.d/local.conf.bak /etc/systemd/system/snapd.service.d/local.conf
    systemctl daemon-reload
    tests.cleanup defer systemctl daemon-reload
    systemctl restart snapd.socket
    tests.cleanup defer systemctl restart snapd.socket

restore: |
    # microk8s does not clean up services/pods/nodes nor additional services
    # during remove
    microk8s kubectl delete pods --all
    microk8s kubectl delete nodes --all
    microk8s stop
    # now we're ready for remove
    snap remove --purge microk8s

    # TODO: remove handling of snap_daemon user once microk8s is updated not
    # to use it
    for user in snap_microk8s snap_daemon
    do
        userdel -f "$user" || userdel -f --extrausers "$user" || true
        groupdel "$user" || groupdel --extrausers "$user" || true
    done

execute: |
    snap install --channel="$CHANNEL" microk8s
    microk8s status --wait-ready
    # XXX: enable dashboard etc? doing this is slow :/
    #microk8s enable dashboard dns registry istio
    microk8s kubectl get nodes | MATCH Ready
    microk8s kubectl get services | MATCH kubernetes

    echo "Deploy and expose an nginx service"
    microk8s kubectl run nginx --image=nginx
    retry -n 120 sh -c "microk8s kubectl get pods | MATCH Running"

    microk8s kubectl expose pod/nginx --name nginx-np --type NodePort --target-port 80 --port 80
    # while the above command exposes the service on port 80, that's internal
    # to the pod; in order to have the pod visible outside, we also need to
    # patch the configuration and hardcode a fixed port number.
    microk8s kubectl patch svc nginx-np --patch '{"spec":{"ports":[{"port":80,"nodePort":31313}]}}'

    echo "Test if nginx can be connected"
    retry -n 15 sh -c "curl --max-time 3 'http://localhost:31313/' | MATCH 'Welcome to nginx'"

    echo "Running a microk8s causes no DENIED messages"
    dmesg | not grep DENIED
