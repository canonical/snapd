summary: Check that snap-mgmt.sh works

# slow in autopkgtest (>1m)
backends: [-autopkgtest]

# purging everything on core devices will not work
systems: [-ubuntu-core-*]

prepare: |
    # TODO: unify this with tests/main/postrm-purge/task.yaml

    # note: no need to unset these since this spread test purges snapd totally
    # and snapd won't be around to respond, much less remove any state since
    # the state should be removed by the test
    snap set system experimental.user-daemons=true
    snap set system experimental.quota-groups=true

    # Install a number of snaps that contain various features that have
    # representation in the file system.
    for name in test-snapd-service test-snapd-timer-service socket-activation \
            test-snapd-user-service test-snapd-user-service-sockets \
            test-snapd-user-timer-service test-snapd-tools \
            test-snapd-control-consumer test-snapd-auto-aliases \
            test-snapd-kvm ; do
        if echo "$name" | grep -q user && os.query is-trusty; then
            # None of the "user" snaps work on 14.04
            continue
        fi
        "$TESTSTOOLS"/snaps-state install-local "$name"
        snap list | MATCH test-snapd-service
    done

    # kvm interface needs manual connection
    snap connect test-snapd-kvm:kvm

    snap install --edge test-snapd-dbus-provider
    snap list | MATCH test-snapd-dbus-provider

    if ! os.query is-trusty; then
        snap install --edge test-snapd-dbus-service
        snap list | MATCH test-snapd-dbus-service
    fi

    if ! os.query is-trusty && ! os.query is-amazon-linux && ! os.query is-centos-7 && ! os.query is-xenial; then
        # create a quota with a service in it
        snap set-quota group1 test-snapd-service --memory=100MB
    fi

    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    before=$(find "${SNAP_MOUNT_DIR}" -type d | wc -l)
    if [ "$before" -lt 2 ]; then
        echo "${SNAP_MOUNT_DIR} empty - test setup broken"
        exit 1
    fi

    echo "test service is known to systemd and enabled"
    systemctl list-unit-files --type service --no-legend | MATCH 'snap.test-snapd-service\..*\.service\s+enabled'

    # expecting to find various files that snap installation produced
    test "$(find /etc/udev/rules.d -name '*-snap.*.rules' | wc -l)" -gt 0
    test "$(find /etc/dbus-1/system.d -name 'snap.*.conf' | wc -l)" -gt 0
    test "$(find /etc/modules-load.d/ -name 'snap.*.conf' | wc -l)" -gt 0
    test "$(find /etc/systemd/system -name 'snap.*.service' | wc -l)" -gt 0
    test "$(find /etc/systemd/system -name 'snap.*.timer' | wc -l)" -gt 0
    test "$(find /etc/systemd/system -name 'snap.*.socket' | wc -l)" -gt 0
    if ! os.query is-trusty; then
        test "$(find /etc/systemd/user -name 'snap.*.service' | wc -l)" -gt 0
        test "$(find /etc/systemd/user -name 'snap.*.timer' | wc -l)" -gt 0
        test "$(find /etc/systemd/user -name 'snap.*.socket' | wc -l)" -gt 0
        test "$(find /var/lib/snapd/dbus-1/services -name '*.service' | wc -l)" -gt 0
        test "$(find /var/lib/snapd/dbus-1/system-services -name '*.service' | wc -l)" -gt 0
    fi
    if ! os.query is-trusty && ! os.query is-amazon-linux && ! os.query is-centos-7 && ! os.query is-xenial; then
        test "$(find /etc/systemd/system -name 'snap.*.slice' | wc -l)" -gt 0
    fi

execute: |
    echo "Stop snapd before purging"
    systemctl stop snapd.service snapd.socket

    echo "A purge will really purge things"
    snapd.tool exec snap-mgmt --purge

    echo "Data directories are empty"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    emptydirs="${SNAP_MOUNT_DIR} \
               /var/snap \
               /var/lib/snapd/dbus-1/services/ \
               /var/lib/snapd/dbus-1/system-services/ \
               /var/lib/snapd/desktop/applications/ \
               /var/lib/snapd/seccomp/bpf/ \
               /var/lib/snapd/device/ \
               /var/lib/snapd/assertions/ \
               /var/lib/snapd/cookie/ \
               /var/lib/snapd/cache/ \
               "
    for d in $emptydirs ; do
        n=$(find "$d"  | wc -l)
        if [ "$n" -gt 1 ]; then
            echo "$d not empty after snap-mgmt.sh purge"
            ls -lR "$d"
            exit 1
        fi
    done

    echo "State file is gone"
    not test -f /var/lib/snapd/state.json
    echo "And so is the system key"
    not test -f /var/lib/snapd/system-key

    echo "Preserved namespaces directory is not mounted"
    NOMATCH "/run/snapd/ns" < /proc/mounts

    systemctl daemon-reload
    echo "Snap *.service files are removed"
    systemctl list-unit-files --type service | NOMATCH '^snap.test-snapd-service.*\.service'

    echo "Snap quota group slice files are removed"
    systemctl list-unit-files --type slice | NOMATCH '^snap.group.slice'

    echo "No dangling service symlinks are left behind"
    test -z "$(find /etc/systemd/system/multi-user.target.wants/ -name 'snap.test-snapd-service.*')"
    test -z "$(find /etc/systemd/system/sockets.target.wants/ -name 'snap.*')"
    test -z "$(find /etc/systemd/system/timers.target.wants/ -name 'snap.*')"
    if ! os.query is-trusty; then
        test -z "$(find /etc/systemd/user/default.target.wants/ -name 'snap.*')"
        test -z "$(find /etc/systemd/user/sockets.target.wants/ -name 'snap.*')"
        test -z "$(find /etc/systemd/user/timers.target.wants/ -name 'snap.*')"
    fi

    test "$(find /etc/udev/rules.d -name '*-snap.*.rules' | wc -l)" -eq 0
    test "$(find /etc/dbus-1/system.d -name 'snap.*.conf' | wc -l)" -eq 0
    test "$(find /etc/modules-load.d/ -name 'snap.*.conf' | wc -l)" -eq 0
    test "$(find /etc/systemd/system -name 'snap.*.service' -a ! -name "snap.mount.service" | wc -l)" -eq 0
    test "$(find /etc/systemd/system -name 'snap.*.timer' | wc -l)" -eq 0
    test "$(find /etc/systemd/system -name 'snap.*.socket' | wc -l)" -eq 0
    if ! os.query is-trusty; then
        test "$(find /etc/systemd/user -name 'snap.*.service' | wc -l)" -eq 0
        test "$(find /etc/systemd/user -name 'snap.*.timer' | wc -l)" -eq 0
        test "$(find /etc/systemd/user -name 'snap.*.socket' | wc -l)" -eq 0
    fi
