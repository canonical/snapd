summary: Check that enable/disable works

prepare: |
    echo "Install test-snapd-sh and ensure it runs"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh
    test-snapd-sh.sh -c 'echo Hello' | MATCH Hello

execute: |
    echo "Disable test-snapd-sh and ensure it is listed as disabled"
    snap disable test-snapd-sh | MATCH disabled

    echo "Ensure the test-snapd-sh command is no longer there"
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    if ls "$SNAP_MOUNT_DIR"/bin/test-snapd-sh*; then
        echo "test-snapd-sh binaries are not disabled"
        exit 1
    fi

    if [ "$(snap debug confinement)" = strict ]; then
        echo "Ensure the test-snapd-sh security profiles are no longer there"
        if ls /var/lib/snapd/apparmor/profiles/snap.test-snapd-sh*; then
            echo "test-snapd-sh securiry profiles are not disabled"
            exit 1
        fi
    fi

    echo "Enable test-snapd-sh again and ensure it is no longer listed as disabled"
    snap enable test-snapd-sh | MATCH enabled

    if [ "$(snap debug confinement)" = strict ]; then
        echo "Ensure the test-snapd-sh security profiles are present"
        if ! ls /var/lib/snapd/apparmor/profiles/snap.test-snapd-sh*; then
            echo "test-snapd-sh securiry profiles are not present"
            exit 1
        fi
    fi

    echo "Ensure test-snapd-sh runs normally after it was enabled"
    test-snapd-sh.sh -c 'echo Hello' |MATCH Hello

    echo "Ensure the important snaps can not be disabled"
    #shellcheck source=tests/lib/names.sh
    . "$TESTSLIB"/names.sh
    for sn in core $kernel_name $gadget_name; do
        if snap disable "$sn"; then
            echo "It should not be possible to disable $sn"
            exit 1
        fi
    done
