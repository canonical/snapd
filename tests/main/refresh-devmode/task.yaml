summary: Check that the refresh command works.
details: |
    These tests exercise the refresh command using different store backends.
    The concrete store to be used is controlled with the STORE_TYPE variant,
    the defined values are fake, for a local store, or remote, for the currently
    configured remote store.
    When executing against the remote stores the tests rely in the existence of
    a given snap with an updatable version (version string like 2.0+fake1) in the
    edge channel.

environment:
    SNAP_NAME: test-snapd-tools
    SNAP_VERSION_PATTERN: \d+\.\d+\+fake1
    BLOB_DIR: $(pwd)/fake-store-blobdir
    STORE_TYPE/fake: fake
    STORE_TYPE/remote: ${REMOTE_STORE}

prepare: |
    if [ "$STORE_TYPE" = "fake" ]; then
        if [[ "$SPREAD_SYSTEM" == ubuntu-core-16-* ]]; then
            exit
        fi
        if [ "$TRUST_TEST_KEYS" = "false" ]; then
            echo "This test needs test keys to be trusted"
            exit
        fi
    fi

    echo "Given a snap is installed"
    snap install --devmode test-snapd-tools

    if [ "$STORE_TYPE" = "fake" ]; then
        . $TESTSLIB/store.sh
        setup_fake_store $BLOB_DIR

        echo "And a new version of that snap put in the controlled store"
        . $TESTSLIB/store.sh
        init_fake_refreshes test-snapd-tools $BLOB_DIR
    fi

restore: |
    if [ "$STORE_TYPE" = "fake" ]; then
        if [[ "$SPREAD_SYSTEM" == ubuntu-core-16-* ]]; then
            exit
        fi
        if [ "$TRUST_TEST_KEYS" = "false" ]; then
            echo "This test needs test keys to be trusted"
            exit
        fi
        . $TESTSLIB/store.sh
        teardown_fake_store $BLOB_DIR
    fi

execute: |
    if [ "$STORE_TYPE" = "fake" ]; then
        if [[ "$SPREAD_SYSTEM" == ubuntu-core-16-* ]]; then
            exit
        fi
        if [ "$TRUST_TEST_KEYS" = "false" ]; then
            echo "This test needs test keys to be trusted"
            exit
        fi
    fi

    # FIXME: currently the --list from channel doesn't work
    # echo "Then the new version is available for the snap to be refreshed"
    # expected="$SNAP_NAME +$SNAP_VERSION_PATTERN"
    # snap refresh --list | grep -Pzq "$expected"
    #
    # echo "================================="

    echo "When the snap is refreshed"
    snap refresh --devmode --channel=edge $SNAP_NAME

    echo "Then the new version is listed"
    expected="$SNAP_NAME +$SNAP_VERSION_PATTERN .*devmode"
    snap list | grep -Pzq "$expected"
