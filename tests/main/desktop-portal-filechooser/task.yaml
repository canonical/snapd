summary: the desktop portal file choosers provide access to files

details: |
    The xdg-desktop-portal file chooser interface provides a way for a
    confined application to request access to any file the user can
    read/write.

    The choice of which file is handled via an out-of-process file
    chooser running outside of confinement, and the file itself is
    then made available to the sandbox via the xdg-document-portal
    FUSE file system.

    This test substitutes in a replacement for the file chooser UI,
    but otherwise uses the real xdg-desktop-portal and
    xdg-document-portal services.

# Only enable the test on systems we know portals to function on.
# Expand as needed.
# ubuntu-18.04-*: Ships xdg-desktop-portal 0.11
systems: [ubuntu-18.04-64, ubuntu-2*]

prepare: |
    #shellcheck source=tests/lib/desktop-portal.sh
    . "$TESTSLIB"/desktop-portal.sh
    setup_portals
    tests.session -u test prepare

restore: |
    tests.session -u test restore
    #shellcheck source=tests/lib/desktop-portal.sh
    . "$TESTSLIB"/desktop-portal.sh
    teardown_portals
    rm -f /tmp/file-to-read.txt
    rm -f /tmp/file-to-write.txt

debug: |
    #shellcheck source=tests/lib/desktop-portal.sh
    . "$TESTSLIB"/desktop-portal.sh

    ls -la "/run/user/$(id -u test)" || true
    #shellcheck disable=SC2009
    ps -ef | grep xdg || true

execute: |
    echo "Install the portals test client"
    snap install --edge test-snapd-portal-client

    echo "The confined application can run open files via the portal"
    echo "from-host-system" > /tmp/file-to-read.txt
    # file ownership is exposed through the document portal, and our
    # AppArmor policy uses the @owner restriction.
    chown test:test /tmp/file-to-read.txt
    tests.session -u test exec test-snapd-portal-client open-file | MATCH "from-host-system"

    echo "The confined application can write files via the portal"
    [ ! -f /tmp/file-to-write.txt ]

    # TODO: workaround for testing on 18.04
    # The python code does open(path, 'w'), which attempts to truncate the
    # file if it exists. Then in fuse handlers inside document-portal, the
    # code path for when the inode exists and the caller requested O_TRUNC,
    # returns -ENOSYS, resulting in OSError:
    # [Errno 38] Function not implemented on the Python side
    # Creating the file beforehand prevents that.
    touch /tmp/file-to-write.txt
    chown test:test /tmp/file-to-write.txt

    tests.session -u test exec test-snapd-portal-client save-file "from-sandbox"

    # TODO: another workaround for testing on 18.04
    # Retry checking until the file contains the written text. In particular on
    # 18.04, xdg-desktop-portal 0.11 (perhaps still the same for later
    # versions), the writes were implemented such that the client writes to a
    # fuse filesystem entry, while the portal forwards the writes to the actual
    # backing file. It was observed that, even after client does close and the
    # corresponding *fuse_release() code completes on the portal side, the
    # contents are not visible in the destination file.
    retry -n 5 test -s /tmp/file-to-write.txt
    MATCH "from-sandbox" < /tmp/file-to-write.txt
