summary: Regression test for https://bugs.launchpad.net/snapd/+bug/1803542

details: |
    Snap applications execute in a different mount namespace that is specific to
    a given snap but shared between various processes of that snap, even if they
    have no parent-child relationship. This is done by preserving prepared mount
    namespaces in a special bind-mounted files under /var/lib/snapd/ns.

    The mount namespace is unique in the fact that is has strong relationship to
    other namespaces. A mount event (mount, umount or option change) can
    propagate between namespaces according to complex propagation rules.
    Propagation may be bidirectional, unidirectional or disabled. Propagation
    settings are also a property of a specific relation of two mount namespaces,
    so the effective rules are even more complex.

    If the directory /var/lib/snapd/ns is, for whatever reason, not privately
    shared, snap-confine will misbehave. The test checks ensures that various
    scenarios, where that directory is or is not a mount point, and according to
    different sharing scenarios.

environment:
    VARIANT/absent: absent
    VARIANT/present: present
    VARIANT/shared: shared
    VARIANT/private: private

prepare: |
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh
    # Ensure that every snap namespace is discarded.
    for name in $(snap list | awk '!/Name/ {print $1}'); do
        snapd.tool exec snap-discard-ns "$name"
    done
    # In case it has been mounted multiple times
    retries=10
    while findmnt --noheadings /run/snapd/ns >/dev/null; do
        umount /run/snapd/ns
        if [ "$((--retries))" -le 0 ]; then
            break
        fi
    done
    not findmnt --noheadings /run/snapd/ns

debug: |
    cat /proc/self/mountinfo

execute: |
    case "$VARIANT" in
       absent)
            test -d /run/snapd/ns && rmdir /run/snapd/ns
            ;;
       present)
            mkdir -p /run/snapd/ns
            ;;
       shared)
            mkdir -p /run/snapd/ns
            mount --bind /run/snapd/ns /run/snapd/ns
            mount --make-shared /run/snapd/ns
            # verify mount tags to ensure the mount point has shared propagation (format shared:<nnnn>)
            test "$(grep '/snapd/ns /run/snapd/ns' < /proc/self/mountinfo | awk '{print $7}' | cut -d : -f 1)" = shared
            ;;
        private)
            mkdir -p /run/snapd/ns
            mount --bind /run/snapd/ns /run/snapd/ns
            mount --make-private /run/snapd/ns
            # verify mount tags to ensure the mount point has private propagation (no mount tags set)
            test "$(grep '/snapd/ns /run/snapd/ns' < /proc/self/mountinfo | awk '{print $7}')" = -
            ;;
        *)
            echo "unknown variant: $VARIANT"
            exit 1
            ;;
    esac
    # We can run snap-confine and it will do the right thing.
    test-snapd-sh.sh -c /bin/true
    # verify that no mount tags are set, private propagation does not set any
    test "$(grep '/snapd/ns /run/snapd/ns' < /proc/self/mountinfo | awk '{print $7}')" = -
