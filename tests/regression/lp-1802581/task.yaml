summary: Regression test for LP 1802581

details: |
    When using the snapd GPIO interface the slot side needs to export the GPIO
    pint so that a file appears under /sys/class/gpio/gpioNNN. That file is a
    symbolic link to a special, platform specific device path. The symbolic
    link needs to be evaluated so that apparmor rules for the plug side can be
    constructed.

    A customer has reported that when a snap is disabled and then re-enabled
    the GPIO pin is not exported and apparmor backend cannot setup security
    of the snap being enabled.

    A similar issue has occurred once in the past where the order in which
    security backends operated was not deterministic. We fixed the issue by
    applying a fixed order so that the systemd backend, responsible for
    exporting the pin, would always run before the apparmor backend, which
    could now rely on the pin being exposed to userspace.

# TODO:UC20: enable for UC20? requires changes to UC20 spread built-image
systems: [ubuntu-core-1*-64]

prepare: |
    # Core image that were created using spread will have a fake "gpio-pin".
    # Other (e.g. official) images will not have that and there we can't use
    # this test.
    if ! snap interfaces|grep -q gpio-pin; then
        echo "SKIP: this tests needs a fake 'gpio-pin' interface"
        exit 0
    fi

    # shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB/systemd.sh"
    echo "Create/enable fake gpio"
    systemd_create_and_start_unit fake-gpio "$TESTSLIB/fakegpio/fake-gpio.py"  '[Unit]\nBefore=snap.core.interface.gpio-100.service\n[Service]\nType=notify'

restore: |
    # Core image that were created using spread will have a fake "gpio-pin".
    # Other (e.g. official) images will not have that and there we can't use
    # this test.
    if ! snap interfaces|grep -q gpio-pin; then
        echo "SKIP: this tests needs a fake 'gpio-pin' interface"
        exit 0
    fi

    # shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB/systemd.sh"
    systemd_stop_and_remove_unit fake-gpio
    # for good measure, fake-gpio.py does this umount already on exit
    umount /sys/class/gpio || true

debug: |
    "$TESTSTOOLS"/journal-state get-log -u fake-gpio.service

execute: |
    # Core image that were created using spread will have a fake "gpio-pin".
    # Other (e.g. official) images will not have that and there we can't use
    # this test.
    if ! snap interfaces|grep -q gpio-pin; then
        echo "SKIP: this tests needs a fake 'gpio-pin' interface"
        exit 0
    fi

    echo "Install a snap that uses the gpio consumer"
    "$TESTSTOOLS"/snaps-state install-local gpio-consumer

    echo "And connect the gpio pin"
    snap connect gpio-consumer:gpio :gpio-pin
    snap interfaces | MATCH ":gpio-pin.*gpio-consumer:gpio"

    # LP-1802581
    echo "Now disable and enable the snap to ensure lp: #1802581 is fixed"
    snap disable gpio-consumer
    snap enable gpio-consumer

    echo "Check that the connection is still here after enable"
    snap interfaces | MATCH ":gpio-pin.*gpio-consumer:gpio"

    echo "Ensure that our mock service is full functional"
    systemctl status fake-gpio.service | MATCH "Active: active"
