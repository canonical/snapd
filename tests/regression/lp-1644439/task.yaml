summary: Regression test for https://bugs.launchpad.net/snap-confine/+bug/1644439

details: |
    snap-confine uses privately-shared /run/snapd/ns to store bind-mounted
    mount namespaces of each snap. In the case that snap-confine is invoked
    from the mount namespace it typically constructs, the said directory does
    not contain mount entries for preserved namespaces as those are only
    visible in the main, outer namespace. In order to operate in such an
    environment snap-confine must first re-associate its own process with
    another namespace in which the /run/snapd/ns directory is visible.
    The most obvious candidate is pid one, which definitely doesn't run in a
    snap-specific namespace, has a predictable PID and is long lived.

# This test fails on Ubuntu 18.04 and later because snap-confine, along all of
# snapd is built in a distribution from the future (ubuntu 18.04 for example)
# and the injected into a ubuntu 16.04-based chroot. This cannot work in
# general. We discussed this in the past and we'd have to change how we do our
# CI so that we can always build each branch against ubuntu 16.04 container and
# only then repackage and test on a given distribution.
systems: [ubuntu-14.04-64, ubuntu-16.04-64]

prepare: |
    echo "Having installed the test snap in devmode"
    "$TESTSTOOLS"/snaps-state install-local test-snapd-tools --devmode

debug: |
    # Kernel version is an important input in understing failures of this test
    uname -a

execute: |
    # Don't test on other architectures as (especially on arm) kernel versions
    # are not synchronized with x86 and this test is not architecture specific
    # to warrant the extra work to figure out which kernel revision got the fix
    # to apparmor that this test depends on.
    if os.query is-pc-amd64 && [ "$(uname -m)" != i686 ]; then
        echo "This test is only supported on x86_64 and i386"
        exit 0
    fi

    echo "We can now run a snap command from the namespace of a snap command and see it work"
    test-snapd-tools.cmd /bin/true
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    test-snapd-tools.cmd /bin/sh -c "SNAP_CONFINE_DEBUG=yes $SNAP_MOUNT_DIR/bin/test-snapd-tools.cmd /bin/true"
    echo "We can now discard the namespace and repeat the test as a non-root user"
    /usr/lib/snapd/snap-discard-ns test-snapd-tools
    su -l -c 'test-snapd-tools.cmd /bin/true' test
    su -l -c "test-snapd-tools.cmd /bin/sh -c \"SNAP_CONFINE_DEBUG=yes $SNAP_MOUNT_DIR/bin/test-snapd-tools.cmd /bin/true\"" test
