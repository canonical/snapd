summary: system key is not written if security setup fails

details: |
    When snapd is started up and the system key needs regeneration errors from
    establishing the new security profiles should not stop snapd from running
    but should prevent snapd from writing the system key.

prepare: |
    "$TESTSTOOLS"/snaps-state install-local network-consumer

    version_info="$(sed -n '2 s/# //p' < /var/lib/snapd/seccomp/bpf/snap.network-consumer.network-consumer.src)"
    test -n "$version_info"
    cat <<EOF > bad-snap-seccomp
    #!/bin/sh
    if [ "\$1" = "version-info" ]; then
       echo "$version_info"
       exit 0
    fi
    exit 1
    EOF
    chmod +x bad-snap-seccomp

    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    LIBEXEC_DIR="$(os.paths libexec-dir)"

    mount --bind "$PWD/bad-snap-seccomp" "$LIBEXEC_DIR/snapd/snap-seccomp"
    test -d "$SNAP_MOUNT_DIR/core" && mount --bind "$PWD/bad-snap-seccomp" "$SNAP_MOUNT_DIR/core/current/usr/lib/snapd/snap-seccomp"
    test -d "$SNAP_MOUNT_DIR/snapd" && mount --bind "$PWD/bad-snap-seccomp" "$SNAP_MOUNT_DIR/snapd/current/usr/lib/snapd/snap-seccomp"
    "$TESTSTOOLS"/fs-state mock-file /var/lib/snapd/system-key
    echo '# trigger rebuild' >> /var/lib/snapd/seccomp/bpf/snap.network-consumer.network-consumer.src
    echo '{}' > /var/lib/snapd/system-key

restore: |
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    LIBEXEC_DIR="$(os.paths libexec-dir)"

    umount "$LIBEXEC_DIR/snapd/snap-seccomp" || true
    test -d "$SNAP_MOUNT_DIR/core" && ( umount "$SNAP_MOUNT_DIR/core/current/usr/lib/snapd/snap-seccomp" || true )
    test -d "$SNAP_MOUNT_DIR/snapd" && ( umount "$SNAP_MOUNT_DIR/snapd/current/usr/lib/snapd/snap-seccomp" || true )
    "$TESTSTOOLS"/fs-state restore-file /var/lib/snapd/system-key

    # XXX: When this test is sequenced immediately before a test in the main
    # suite something in this test or in the suite prepare/restore logic is
    # wrong and we leave the system in a state where "snap run" hangs, waiting
    # for the system key to match. It might be related to the fact that prepare
    # restores and restore prepares (really) and we archive and preserve a
    # broken state somehow.

execute: |
    systemctl stop snapd.socket snapd.service
    systemctl start snapd.socket snapd.service
    retry -n10 sh -c "journalctl -u snapd | MATCH 'cannot regenerate seccomp profiles'"
    retry -n10 sh -c "journalctl -u snapd | MATCH 'cannot compile /var/lib/snapd/seccomp/bpf/snap.network-consumer.network-consumer.src: exit status 1'"
    snap list | MATCH "(core|snapd)"
    test ! -e /var/lib/snapd/system-key
