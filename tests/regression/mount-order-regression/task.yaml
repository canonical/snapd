summary: Regression test for snap-update-ns mount order

details: |
    A refactoring of snap-update-ns caused some snaps to fail to start.
    We check that a typical GNOME snap using the content interface and layouts
    has its filesystem laid out as expected.

systems:
  # there is no gnome-3-38-2004 for i386
  - -ubuntu-18.04-32
  - -ubuntu-core-16-32
  - -ubuntu-core-18-32

prepare: |
    if os.query is-arm64; then
        SNAP_NAME=test-content-layout-consumer-arm64
    elif os.query is-armhf; then
        SNAP_NAME=test-content-layout-consumer-armhf
    else
        SNAP_NAME=test-content-layout-consumer-amd64
    fi

    # Create mount points for the content interface (we would like to have them
    # in the repository, but git does not allow storing empty directories)
    mkdir -p "$SNAP_NAME/gnome-platform"
    mkdir -p "$SNAP_NAME/data-dir/themes"
    mkdir -p "$SNAP_NAME/data-dir/icons"
    mkdir -p "$SNAP_NAME/data-dir/sounds"

    "$TESTSTOOLS"/snaps-state install-local "$SNAP_NAME"

execute: |
    check_non_empty() {
        local DIR="$1"
        echo "Checking $DIR"
        test "$("$SNAP_NAME.cmd" ls -1 "$DIR" 2> /dev/null | wc -l)" -gt 0
    }

    if os.query is-arm64; then
        SNAP_NAME=test-content-layout-consumer-arm64
        LINUX_GNU_NAME=aarch64-linux-gnu
    elif os.query is-armhf; then
        SNAP_NAME=test-content-layout-consumer-armhf
        LINUX_GNU_NAME=arm-linux-gnueabihf
    else
        SNAP_NAME=test-content-layout-consumer-amd64
        LINUX_GNU_NAME=x86_64-linux-gnu
    fi

    # Check a handful of directories that should have been bind-mounted from
    # the content snap (all those starting with "$SNAP/"), plus the directories
    # that have been added via the layouts.
    SNAP="/snap/$SNAP_NAME/current"
    while read -r DIR
    do
        check_non_empty "$DIR"
    done <<-EOF
    $SNAP/gnome-platform/etc/X11/Xsession.d
    $SNAP/gnome-platform/lib/udev/rules.d
    $SNAP/gnome-platform/lib/$LINUX_GNU_NAME
    $SNAP/gnome-platform/usr/lib/python3/dist-packages/gi/overrides
    $SNAP/gnome-platform/usr/lib/systemd/user
    $SNAP/gnome-platform/usr/lib/$LINUX_GNU_NAME/gtk-3.0/3.0.0/immodules
    $SNAP/gnome-platform/usr/lib/$LINUX_GNU_NAME/webkit2gtk-4.0
    $SNAP/gnome-platform/usr/lib/$LINUX_GNU_NAME/webkit2gtk-4.0/injected-bundle
    $SNAP/gnome-platform/usr/share/X11/locale/C
    $SNAP/gnome-platform/usr/share/glib-2.0/schemas
    $SNAP/gnome-platform/usr/share/gnome-control-center
    $SNAP/gnome-platform/usr/share/icons/Adwaita/16x16/actions
    $SNAP/gnome-platform/usr/share/xml/iso-codes
    $SNAP/data-dir/themes/Yaru/gtk-3.0
    $SNAP/data-dir/icons
    $SNAP/data-dir/sounds
    EOF

    if os.query is-pc-amd64; then
        check_non_empty /usr/lib/$LINUX_GNU_NAME/webkit2gtk-4.0
        check_non_empty /usr/lib/$LINUX_GNU_NAME/webkit2gtk-4.0/injected-bundle
        check_non_empty /usr/share/xml/iso-codes
    fi

    # We already know that /lib/$LINUX_GNU_NAME is not empty, since it comes
    # from the base snap; so, here we check the existence of a specific file we
    # bind-mounted using the layout directive.
    if os.query is-arm64; then
        $SNAP_NAME.cmd test -f /lib/$LINUX_GNU_NAME/libSegFault.so
    elif os.query is-armhf; then
        $SNAP_NAME.cmd test -f /lib/$LINUX_GNU_NAME/libSegFault.so
    else
        $SNAP_NAME.cmd test -f /lib/$LINUX_GNU_NAME/bindtextdomain.so
    fi
