summary: regression test for LP:#1849845

details: |
  This test verifies that apparmor permissions for de-conflicted overlapping
  mount entries resulting from connecting two content slots to one plug in
  direct mode (as opposed to spool mode) doesn't fail because of missing
  permissions to create and mount the package-assets-2 directory.

prepare: |
  snap pack test-snapd-app
  snap pack test-snapd-assets-foo
  snap pack test-snapd-assets-bar

  snap install --dangerous test-snapd-app_1_all.snap
  snap install --dangerous test-snapd-assets-foo_1_all.snap
  snap install --dangerous test-snapd-assets-bar_1_all.snap

  snap connect test-snapd-app:package-assets test-snapd-assets-foo:package-assets
  snap connect test-snapd-app:package-assets test-snapd-assets-bar:package-assets

restore: |
  snap remove --purge test-snapd-app
  snap remove --purge test-snapd-assets-foo
  snap remove --purge test-snapd-assets-bar

  rm -f test-snapd-app_1_all.snap
  rm -f test-snapd-assets-foo_1_all.snap
  rm -f test-snapd-assets-bar_1_all.snap

execute: |
  # The directories are present
  #shellcheck disable=SC2016
  test-snapd-app.sh -c 'test -d $SNAP_DATA/package-assets'
  #shellcheck disable=SC2016
  test-snapd-app.sh -c 'test -d $SNAP_DATA/package-assets-2'
  # The files are visible
  #shellcheck disable=SC2016
  test-snapd-app.sh -c 'test -f $SNAP_DATA/package-assets/asset.txt'
  #shellcheck disable=SC2016
  test-snapd-app.sh -c 'test -f $SNAP_DATA/package-assets-2/asset.txt'
  # The content is as expected although we cannot rely on the order.
  #shellcheck disable=SC2016
  if [ "$(test-snapd-app.sh -c 'cat $SNAP_DATA/package-assets/asset.txt')" = A ]; then
    #shellcheck disable=SC2016
    test "$(test-snapd-app.sh -c 'cat $SNAP_DATA/package-assets-2/asset.txt')" = B
  elif [ "$(test-snapd-app.sh -c 'cat $SNAP_DATA/package-assets/asset.txt')" = B ]; then
    #shellcheck disable=SC2016
    test "$(test-snapd-app.sh -c 'cat $SNAP_DATA/package-assets-2/asset.txt')" = A
  else
    false
  fi
