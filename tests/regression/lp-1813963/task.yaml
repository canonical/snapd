summary: "regression test for LP: #1813963"

backends: [-external]

systems: [ubuntu-16.04-64, ubuntu-18.04-64]

prepare: |
    # Install the versatile test snap.
    "$TESTSTOOLS"/snaps-state install-local test-snapd-sh
    # Discard the mount namespace in case the snap has any hooks. We rely on
    # the mount namespace to be absent and about to be constructed in the test
    # below.
    snapd.tool exec snap-discard-ns test-snapd-sh

    # Install a simple service snap. This snap has a single service that just
    # runs for an hour and quits. The point is that it is just one service
    # without anything special about it.
    #
    # For the purpose of the test we want the service to be off.
    "$TESTSTOOLS"/snaps-state install-local test-snapd-simple-service
    systemctl stop snap.test-snapd-simple-service.test-snapd-simple-service.service
    snapd.tool exec snap-discard-ns test-snapd-simple-service

    # Nothing should have been denied yet.
    test "$(dmesg | grep -c DENIED)" -eq 0

    systemctl stop snapd.service
    echo "snapd has been stopped" | systemd-cat

    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    LIBEXEC_DIR="$(os.paths libexec-dir)"

    # Replace snap-update-ns with a fake version that waits for the given
    # amount of time before doing its real work. Since snap-update-ns doesn't
    # have access to real environment craft the script with appropriate paths
    # baked-in from the outside.
    cp "$LIBEXEC_DIR/snapd/snap-update-ns" ./real-snap-update-ns

    # We could install our own go here via `snap install go --classic`
    # but instead we just run this on systems (via systems above) that
    # already have go. Doing this as a shell script is tricky and requires
    # modifying sc_call_snapd_tool_with_apparmor() so that ~FDCLOEXEC is
    # cleaned which is not what we want.
    cat >fake-snap-update-ns.go <<EOF
    package main
    import "time"
    func main() { time.Sleep(31*time.Second) }
    EOF
    go build fake-snap-update-ns.go

    # Replace snap-update-ns in all the places it might exist in.
    mount --bind ./fake-snap-update-ns "$LIBEXEC_DIR/snapd/snap-update-ns"
    if [ -e "$SNAP_MOUNT_DIR/core/current/" ]; then
        mount --bind ./fake-snap-update-ns "$SNAP_MOUNT_DIR/core/current/usr/lib/snapd/snap-update-ns"
    fi
    if [ -e "$SNAP_MOUNT_DIR/snapd/current/" ]; then
        mount --bind ./fake-snap-update-ns "$SNAP_MOUNT_DIR/snapd/current/usr/lib/snapd/snap-update-ns"
    fi
    echo "snap-update-ns has been replaced" | systemd-cat

restore: |
    SNAP_MOUNT_DIR="$(os.paths snap-mount-dir)"
    LIBEXEC_DIR="$(os.paths libexec-dir)"

    umount "$LIBEXEC_DIR/snapd/snap-update-ns" || true
    if [ -e "$SNAP_MOUNT_DIR/core/current/" ]; then
        umount "$SNAP_MOUNT_DIR/core/current/usr/lib/snapd/snap-update-ns" || true
    fi
    if [ -e "$SNAP_MOUNT_DIR/snapd/current/" ]; then
        umount "$SNAP_MOUNT_DIR/snapd/current/usr/lib/snapd/snap-update-ns" || true
    fi
    echo "snap-update-ns has been restored" | systemd-cat

    systemctl start snapd.service
    echo "snapd has been started" | systemd-cat

    snap remove --purge test-snapd-sh
    snap remove --purge test-snapd-simple-service
    echo "snaps have been removed" | systemd-cat

debug: |
    echo "Status of the test service"
    systemctl status snap.test-snapd-simple-service.test-snapd-simple-service.service || true
    echo "Apparmor denials"
    dmesg | grep DENIED || true


execute: |
    # When snap-update-ns is artificially slowed down so that snap-confine
    # starts to fail on timeout errors then the exit status from the
    # snap-confine process is the regular "failed" rather than "failed due to
    # signal SIGPIPE".
    set +e
    test-snapd-sh.sh -c /bin/true
    retcode=$?
    set -e
    test "$retcode" -eq 1

    # When we start our simple service it will fail. We anticipate this and
    # explicitly pass --wait that will otherwise wait forever.
    set +e
    systemctl start --wait snap.test-snapd-simple-service.test-snapd-simple-service.service
    retcode=$?
    set -e
    test "$retcode" -eq 1

    # Nothing should have been denied as a part of this test.
    test "$(dmesg | grep -c DENIED)" -eq 0
