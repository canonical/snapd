summary: Regression test for https://bugs.launchpad.net/snapd/+bug/1815869

details: |
    During snap application startup, on apparmor-capable systems, snap-confine
    executes with apparmor confinement. When a process is started, for example
    by the shell, with inherited file descriptor (either additional or re-opened
    0, 1 or 2), apparmor discovers what the descriptor is referring to, and
    ensures that the apparmor profile allows that sort of access. In other
    words, one cannot cheat apparmor by opening a descriptor and switching the
    process image (apparmor profile switch is effective when the exec system
    call is used) and somehow allowing the confined process to interact with the
    resource that the profile otherwise disallows.

    This affects the basic use case of running a snap application and
    redirecting one of the standard input/output streams to a location we do not
    expect snap-confine to access.

    Since the problem is entirely open-ended, as a special exception for
    commonly used programs, snap-confine is allowed to write to anything under
    /var/lib, as this is where Jenkins stores state directories in commonly used
    CI solutions.

    The test runs a python application, as a snap, inside LXD, to test the most
    conservative case of that problem (LXD sandbox is another factor), and one
    that matches the way we want to allow LXD + Jenkins + Snaps to work
    together.

systems: [ubuntu-18.04-64]

prepare: |
    # Ensure that we have the freshly-built snapd deb available
    test "$(find "$GOHOME" -name 'snapd_*.deb' | wc -l)" -ne 0

    # Install LXD snap and set it up.
    "$TESTSTOOLS"/lxd-state prepare-snap

    # Launch a bionic container.
    lxc launch --quiet ubuntu:bionic mycontainer

    # Set the proxy inside the container.
    if [ -n "${http_proxy:-}" ]; then
        lxc exec mycontainer -- sh -c "echo http_proxy=$http_proxy >> /etc/environment"
    fi
    if [ -n "${https_proxy:-}" ]; then
        lxc exec mycontainer -- sh -c "echo https_proxy=$https_proxy >> /etc/environment"
    fi

    # Install snapd we've built inside the container.
    lxc exec mycontainer -- apt autoremove --purge -y snapd ubuntu-core-launcher
    lxc exec mycontainer -- mkdir -p "$GOHOME"
    lxc file push --quiet "$GOHOME"/snapd_*.deb "mycontainer/$GOHOME/"
    lxc exec mycontainer -- apt install -y "$GOHOME"/snapd_*.deb

    # Wait until snapd inside container is ready.
    lxc exec mycontainer -- snap wait system seed.loaded

    # Install python0, a classic snap with python0 inside.
    lxc exec mycontainer -- snap install --classic python0

    # Make a directory outside of home, specifically in /var/lib for "logs"
    lxc exec mycontainer -- mkdir /var/lib/test
    lxc file push --quiet hello.py mycontainer/var/lib/test/hello.py

    # Copy our python script there.
    lxc exec mycontainer -- chown ubuntu:ubuntu /var/lib/test

restore: |
    # Remove the container we may have set up.
    lxc stop mycontainer --force || true
    lxc delete --force mycontainer || true

    snap remove --purge lxd
    "$TESTSTOOLS"/lxd-state undo-mount-changes

execute: |
    # Run python0 with a hello.py script and redirect the logs to /var/lib/test/hello.log
    # Run the script as a regular user for extra (lower) permissions.
    lxc exec mycontainer -- su -c "snap run python0 /var/lib/test/hello.py >/var/lib/test/hello.log" ubuntu

    # Ensure that the logging worked correctly.
    lxc exec mycontainer -- cat /var/lib/test/hello.log | MATCH 'Hello Python From Beyond'
