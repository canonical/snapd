summary: container management snaps should have special systemd unit directives
details: |
    Some special interfaces have additional systemd unit directives added to 
    their systemd units, specifically container management interfaces have the
    Delegate=true snippet added to prevent CVE-2020-27352.

prepare: |
    # build and install the strict test snap
    snap pack container-mgr-snap
    snap install --dangerous test-snapd-container-mgrs*.snap

    if os.query is-classic; then
        # then also check the classic snap too

        # create the classic test snap by just adding "confinement: classic" to the
        # snap.yaml of the strict snap

        cp -r container-mgr-snap classic-container-mgr-snap
        sed -i -e "s@name: test-snapd-container-mgrs@name: test-snapd-classic-container-mgrs@" \
            classic-container-mgr-snap/meta/snap.yaml
        echo "confinement: classic" >> classic-container-mgr-snap/meta/snap.yaml

        if os.query is-arch-linux || os.query is-fedora || os.query is-centos; then
            # need to enable /snap symlink to install classic snaps
            ln -s /var/lib/snapd/snap /snap
            # remove it when we are done
            tests.cleanup defer rm -rf /snap
        fi

        snap pack classic-container-mgr-snap
        snap install --dangerous --classic test-snapd-classic-container-mgrs*.snap
    fi

execute: |
    #shellcheck source=tests/lib/systems.sh
    . "$TESTSLIB"/systems.sh

    for confinement in classic strict; do
        echo "Check that all services exist in the $confinement snap"

        if [ "$confinement" = "classic" ]; then
            if os.query is-core; then
                # skip the classic snap version of the test on core systems
                echo "Skipping classic variant on Ubuntu Core"
                continue
            fi

            snapName="test-snapd-classic-container-mgrs"
        else
            snapName="test-snapd-container-mgrs"
        fi

        snap services | MATCH $snapName\.docker-support
        snap services | MATCH $snapName\.greengrass-support
        snap services | MATCH $snapName\.kubernetes-support
        snap services | MATCH $snapName\.lxd-support

        snap services | MATCH $snapName\.greengrass-no-cont
        snap services | MATCH $snapName\.greengrass-legacy-cont

        snap services | MATCH $snapName\.kubelet
        snap services | MATCH $snapName\.kubeproxy
        snap services | MATCH $snapName\.autobind-unix

        snap services | MATCH $snapName\.bare

        snap services | MATCH $snapName\.multiple-plugs

        echo "Check that the container services have Delegate=true in their service unit exactly once"

        for svc in docker-support greengrass-support kubernetes-support lxd-support greengrass-legacy-cont kubelet kubeproxy multiple-plugs; do

            serviceFile="/etc/systemd/system/snap.$snapName.$svc.service"

            MATCH "Delegate=true" < "$serviceFile"
            test "$(grep -c "Delegate=true" "$serviceFile")" = 1

            # connect and disconnect the interfaces to ensure that 
            # connection/disconnection does not effect the presence of Delegate=true

            if [ "$svc" = "multiple-plugs" ]; then
                snap connect "$snapName:docker-support"
                snap connect "$snapName:greengrass-support"
                snap connect "$snapName:kubernetes-support"
                snap connect "$snapName:lxd-support"
            else
                snap connect "$snapName:$svc"
            fi

            MATCH "Delegate=true" < "$serviceFile"
            test "$(grep -c "Delegate=true" "$serviceFile")" = 1

            if [ "$svc" = "multiple-plugs" ]; then
                snap disconnect "$snapName:docker-support"
                snap disconnect "$snapName:greengrass-support"
                snap disconnect "$snapName:kubernetes-support"
                snap disconnect "$snapName:lxd-support"
            else
                snap disconnect "$snapName:$svc"
            fi

            MATCH "Delegate=true" < "$serviceFile"
            test "$(grep -c "Delegate=true" "$serviceFile")" = 1
        done

        echo "Check that the non-container manager services do not have Delegate=true in their service units"

        for svc in bare "autobind-unix" "greengrass-no-cont"; do 
            serviceFile="/etc/systemd/system/snap.$snapName.$svc.service"
            NOMATCH "Delegate=true" < "$serviceFile"
        done
    done

    # only run this test on ubuntu since the docker snap is not guaranteed to 
    # work on non-ubuntu systems

    if ! os.query is-ubuntu; then
        echo "skipping docker test on non-ubuntu"
        exit 0
    fi

    snap install docker
    tests.cleanup defer snap remove docker

    echo "Test that docker container cgroups on ubuntu are not moved when systemctl daemon-reload is executed"

    # start a docker container - need to wait until dockerd comes alive
    retry -n10 --wait 1 sh -c 'docker run -d --name test ubuntu:18.04 sleep infinity'
    tests.cleanup defer docker kill test

    # make sure that docker top can see the process
    docker top test | MATCH "sleep infinity"

    # get the pid of that docker container
    containerPID=$(docker top test | grep "sleep infinity" | awk '{print $2}')

    if is_cgroupv2; then
        # with cgroup everything is under one unified hierarchy
        containerCgroupBefore=$(grep 0:: "/proc/$containerPID/cgroup")
    else
        containerCgroupBefore=$(grep devices "/proc/$containerPID/cgroup")
    fi

    # reload systemd 
    systemctl daemon-reload

    # check the container cgroup again
    if is_cgroupv2; then
        containerCgroupAfter=$(grep 0:: "/proc/$containerPID/cgroup")
    else
        containerCgroupAfter=$(grep devices "/proc/$containerPID/cgroup")
    fi

    if [ "$containerCgroupBefore" != "$containerCgroupAfter" ]; then
        echo "test broken, container was moved from cgroup \"$containerCgroupBefore\" to \"$containerCgroupAfter\""
        exit 1
    fi
