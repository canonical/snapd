summary: Check that a kernel refresh reseals

systems: [ubuntu-20.04-64]

execute: |
  # shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  # Wait for snapd to be seeded
  nested_exec sudo snap wait system seed.loaded

  SEALED_KEY_MTIME_1="$(nested_exec sudo stat --format="%Y" /run/mnt/ubuntu-seed/device/fde/ubuntu-data.sealed-key)"
  RESEAL_COUNT_1="$(nested_exec sudo cat /var/lib/snapd/device/fde/boot-chains | python3 -m json.tool | grep reseal-count|cut -f2 -d: | tr ',' ' ')"

  # Install new (unasserted) kernel and wait for reboot/change finishing
  boot_id="$( nested_get_boot_id )"
  REMOTE_CHG_ID=$(nested_exec sudo snap install --dangerous /var/lib/snapd/snaps/pc-kernel_*.snap --no-wait)
  nested_wait_for_reboot "${boot_id}"
  nested_exec sudo snap watch "${REMOTE_CHG_ID}"
  
  # ensure ubuntu-data.sealed-key mtime is newer
  SEALED_KEY_MTIME_2="$(nested_exec sudo stat --format="%Y" /run/mnt/ubuntu-seed/device/fde/ubuntu-data.sealed-key)"
  test "$SEALED_KEY_MTIME_2" -gt "$SEALED_KEY_MTIME_1"

  # check that we have boot chains
  nested_exec sudo test -e /var/lib/snapd/device/fde/boot-chains

  RESEAL_COUNT_2="$(nested_exec sudo cat /var/lib/snapd/device/fde/boot-chains | python3 -m json.tool | grep reseal-count|cut -f2 -d: | tr ',' ' ')"
  test "$RESEAL_COUNT_2" -gt "$RESEAL_COUNT_1"
