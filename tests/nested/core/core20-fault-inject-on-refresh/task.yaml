summary: Ensure that a fundamental snap can be refresh when a panic occurs during the process

details: |
    The test checks that if a fault is injected during a fundamental snap refresh,
    then the change continues an is completed with a predictable outcome.

systems: [ubuntu-2*]

environment: 
    TAG/base_panic_link_snap: link-snap
    FAULT/base_panic_link_snap: panic
    TAG/snapd_panic_link_snap: link-snap
    FAULT/snapd_panic_link_snap: panic
    TAG/kernel_panic_link_snap: link-snap
    FAULT/kernel_panic_link_snap: panic
    TAG/gadget_panic_link_snap: link-snap
    FAULT/gadget_panic_link_snap: panic
    TAG/kernel_panic_auto_connect: after-auto-connect
    FAULT/kernel_panic_auto_connect: panic
    TAG/base_panic_auto_connect: after-auto-connect
    FAULT/base_panic_auto_connect: panic
    TAG/gadget_panic_auto_connect: after-auto-connect
    FAULT/gadget_panic_auto_connect: panic
    TAG/kernel_panic_refresh_gadget_assets: refresh-gadget-assets
    FAULT/kernel_panic_refresh_gadget_assets: panic
    TAG/gadget_panic_refresh_gadget_assets: refresh-gadget-assets
    FAULT/gadget_panic_refresh_gadget_assets: panic

    TAG/base_reboot_link_snap: link-snap
    FAULT/base_reboot_link_snap: reboot
    TAG/snapd_reboot_link_snap: link-snap
    FAULT/snapd_reboot_link_snap: reboot
    TAG/kernel_reboot_link_snap: link-snap
    FAULT/kernel_reboot_link_snap: reboot
    TAG/gadget_reboot_link_snap: link-snap
    FAULT/gadget_reboot_link_snap: reboot
    TAG/kernel_reboot_auto_connect: after-auto-connect
    FAULT/kernel_reboot_auto_connect: reboot
    TAG/base_reboot_auto_connect: after-auto-connect
    FAULT/base_reboot_auto_connect: reboot
    TAG/gadget_reboot_auto_connect: after-auto-connect
    FAULT/gadget_reboot_auto_connect: reboot
    TAG/kernel_reboot_refresh_gadget_assets: refresh-gadget-assets
    FAULT/kernel_reboot_refresh_gadget_assets: reboot
    TAG/gadget_reboot_refresh_gadget_assets: refresh-gadget-assets
    FAULT/gadget_reboot_refresh_gadget_assets: reboot
    
    # TODO: Add the following scenarios in a different test
    # These should go in a remodel test
    #TAG/gadget_remodel_boot_assets: remodel-boot-assets
    #TAG/kernel_remodel_boot_assets: remodel-boot-assets

    # This needs a change in the gadget yaml like in cmdline-option test
    # TAG/gadget_update_command_line_gadget: update-command-line-gadget
    # TAG/gadget_update_config_bootloader: update-config-bootloader

    # For this scenario we need to refresh to a kernel with components
    # See this test nested/manual/kernel-modules-components
    # TAG/kernel_panic_prepare_kernel_components: prepare-kernel-components
    # FAULT/kernel_panic_prepare_kernel_components: panic

    # This scenario need to install a new snapd with --dangerous instead of
    # refresh from the store
    # TAG/snapd_panic_auto_connect: after-auto-connect
    # FAULT/snapd_panic_auto_connect: panic

prepare: |
    # automatically cleaned up in restore
    echo "Inject a $FAULT on $TAG"
    cat <<EOF > fault-inject.conf
    [Service]
    Environment=SNAPPY_TESTING=1
    Environment=SNAPD_FAULT_INJECT=$TAG:$FAULT
    EOF

    echo "Wait for the system to be seeded first"
    remote.exec "sudo snap wait system seed.loaded"

    remote.push fault-inject.conf
    remote.exec "sudo mkdir -p /etc/systemd/system/snapd.service.d"
    remote.exec "sudo cp -v fault-inject.conf /etc/systemd/system/snapd.service.d/"
    remote.exec "sudo systemctl daemon-reload"
    remote.exec "sudo systemctl restart snapd.service"

execute: |
    VERSION="$(tests.nested show version)"
    SNAP=
    CHANNEL=edge
    REBOOT=false
    SECOND_REBOOT=false

    if [ "$FAULT" = reboot ]; then
        REBOOT=true
    fi

    case "$SPREAD_VARIANT" in
        base_*)
            SNAP="core${VERSION}"
            if [ "$FAULT" = reboot ]; then
                SECOND_REBOOT=true
            else
                REBOOT=true
            fi
            ;;    
        gadget_*)
            SNAP=pc
            CHANNEL="$VERSION/$CHANNEL"
            ;;
        kernel_*)
            SNAP=pc-kernel
            CHANNEL="$VERSION/beta"
            if [ "$FAULT" = reboot ]; then
                SECOND_REBOOT=true
            else
                REBOOT=true
            fi
            ;;
        snapd_*)
            SNAP=snapd
            ;;
        *)
            echo "scenario no supported: $SPREAD_VARIANT"
            exit 1
            ;;
    esac
        
    # Get the initial snap revision
    INITIAL_REV="$(remote.exec snap list | grep -E "^$SNAP .*" | awk ' {print $3} ')"

    # Refresh and reboot before the process is completed
    boot_id="$(tests.nested boot-id)"
    change_id="$(remote.exec "sudo snap refresh --amend --channel $CHANNEL --no-wait $SNAP")"

    if [ "$REBOOT" = true ]; then
        remote.wait-for reboot "$boot_id"
        boot_id="$(tests.nested boot-id)"
    fi

    if [ "$SECOND_REBOOT" = true ]; then
        remote.wait-for reboot "$boot_id"
    fi

    echo "And snap refresh is completed"
    remote.exec "snap watch $change_id" || true
    # shellcheck disable=SC2016
    retry --wait 1 -n 60 --env "CHANGE_ID=$change_id" --env "SNAP=$SNAP" sh -c 'remote.exec snap changes | MATCH "${CHANGE_ID} .* (Done|Error) .*"'

    # Check if the fault was injected
    remote.exec "test -e /var/lib/snapd/faults/$TAG:$FAULT"

    if [ "$FAULT" = panic ]; then
        echo "Ensure the panic was injected and triggered stamp file is present"
        remote.exec "sudo journalctl -u snapd | grep -A 3 panic" > output
        MATCH "$TAG":$FAULT < output
        MATCH "osutil.injectFault" < output
    fi

    FINAL_STATUS="$(remote.exec snap changes | grep -E "^$change_id .*" | awk ' {print $2} ')"
    CURRENT_REV="$(remote.exec snap list | grep -E "^$SNAP .*" | awk ' {print $3} ')"

    if [ "$FINAL_STATUS" = Error ]; then
        echo "Ensure the change has steps with Error"
        remote.exec "snap change $change_id" | MATCH "^Error .*"
        echo "Ensure the change has steps Undone"
        remote.exec "snap change $change_id" | MATCH "^Undone .*"
        
        echo "Ensure the initial revision is the current one"
        test "$INITIAL_REV" = "$CURRENT_REV"
    else
        echo "Ensure the change has no steps with Error"
        remote.exec "snap change $change_id" | NOMATCH "^Error .*"

        echo "Ensure the initial revision is not the current one"
        test "$INITIAL_REV" != "$CURRENT_REV"
    fi
