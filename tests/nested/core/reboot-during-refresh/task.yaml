summary: Ensure that service and apparmor profiles work after a reboot

details: |
    The test checks that after a system reboot during a fundamental snap refresh can
    be handled and the change steps can be undone properly.

systems: [ubuntu-2*]

environment: 
    SNAP/base: core
    REFRESH_CHANNEL/base: edge
    INSTALL_CHANNEL/base: beta
    SNAP/snapd: snapd
    REFRESH_CHANNEL/snapd: edge
    INSTALL_CHANNEL/snapd: beta
    SNAP/kernel: pc-kernel
    REFRESH_CHANNEL/kernel: edge
    INSTALL_CHANNEL/kernel: beta
    SNAP/gadget: pc
    REFRESH_CHANNEL/gadget: edge
    INSTALL_CHANNEL/gadget: beta
    NESTED_REPACK_KERNEL_SNAP: false

prepare: |


execute: |
    VERSION="$(tests.nested show version)"
    if [ "$SPREAD_VARIANT" = base ]; then 
        SNAP="core${VERSION}"
    fi

    # Refresh and reboot before the process is completed
    boot_id="$(tests.nested boot-id)"
    remote.exec "sudo snap refresh --amend --$REFRESH_CHANNEL --no-wait $SNAP"
    retry --wait 0.5 -n 30 --env SNAP=$SNAP sh -c 'remote.exec snap changes | MATCH "Doing.*Refresh \"$SNAP\" snap"'
    remote.exec snap changes
    remote.exec "sudo reboot" || true
    remote.wait-for reboot "$boot_id"
    retry --wait 1 -n 30 --env SNAP=$SNAP sh -c 'remote.exec snap changes | MATCH "Done.*Refresh \"$SNAP\" snap"'

    if [ "$SPREAD_VARIANT" = kernel ]; then
        #shellcheck source=tests/lib/prepare.sh
        . "$TESTSLIB/prepare.sh"
        #shellcheck source=tests/lib/nested.sh
        . "$TESTSLIB/nested.sh"

        export NESTED_REPACK_KERNEL_SNAP=true
        nested_prepare_kernel
        KERNEL_SNAP="$(ls "$(tests.nested get assets-path)"/pc-kernel*.snap)"
        mv "$KERNEL_SNAP" new-pc-kernel.snap
        remote.push new-pc-kernel.snap
    else
        snap download "$SNAP" --"$INSTALL_CHANNEL" --basename=new-"$SNAP"
        remote.push new-"$SNAP".snap        
    fi

    # Install and reboot before the process is completed
    boot_id="$(tests.nested boot-id)"
    remote.exec "sudo snap install --dangerous --no-wait new-${SNAP}.snap"
    retry --wait 0.5 -n 30 --env SNAP=$SNAP sh -c 'remote.exec snap changes | MATCH "Doing.*Install \"$SNAP\" snap.*"'
    remote.exec snap changes
    remote.exec "sudo reboot" || true
    remote.wait-for reboot "$boot_id"

    retry --wait 1 -n 60 --env SNAP=$SNAP sh -c 'remote.exec snap changes | MATCH "Done.*Install \"$SNAP\" snap.*"'
