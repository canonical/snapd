summary: Ensure that snapd snap can be installed when a panic/reboot occurs during the process

details: |
    The test checks that if a fault is injected during the snapd snap install,
    then the change continues an is completed with a predictable outcome.

systems: [ubuntu-2*]

environment: 
    TAG/snapd_panic_auto_connect: after-auto-connect
    FAULT/snapd_panic_auto_connect: panic
    TAG/snapd_reboot_auto_connect: after-auto-connect
    FAULT/snapd_reboot_auto_connect: reboot
    STATUS: Done

prepare: |
    # automatically cleaned up in restore
    echo "Inject a $FAULT on $TAG"
    cat <<EOF > fault-inject.conf
    [Service]
    Environment=SNAPPY_TESTING=1
    Environment=SNAPD_FAULT_INJECT=$TAG:$FAULT
    EOF

    echo "Wait for the system to be seeded first"
    remote.exec "sudo snap wait system seed.loaded"

    remote.push fault-inject.conf
    remote.exec "sudo mkdir -p /etc/systemd/system/snapd.service.d"
    remote.exec "sudo cp -v fault-inject.conf /etc/systemd/system/snapd.service.d/"
    remote.exec "sudo systemctl daemon-reload"
    remote.exec "sudo systemctl restart snapd.service"

    cp "$(ls /tmp/work-dir/snapd_snap/snapd_*.snap)" snapd.snap

execute: |
    SNAP=snapd
    REBOOT=false

    if [ "$FAULT" = reboot ]; then
        REBOOT=true
    fi

    # Get the initial snap revision
    INITIAL_REV="$(remote.exec snap list | grep -E "^$SNAP .*" | awk ' {print $3} ')"

    # Refresh and reboot before the process is completed
    boot_id="$(tests.nested boot-id)"
    remote.push "$PWD/${SNAP}.snap"
    change_id="$(remote.exec "sudo snap install --dangerous --no-wait ${SNAP}.snap")"

    if [ "$REBOOT" = true ]; then
        remote.wait-for reboot "$boot_id"
        boot_id="$(tests.nested boot-id)"
    fi

    echo "And snap refresh is completed"
    remote.exec "snap watch $change_id" || true
    # shellcheck disable=SC2016
    retry --wait 1 -n 60 --env "CHANGE_ID=$change_id" --env "SNAP=$SNAP" sh -c 'remote.exec snap changes | MATCH "${CHANGE_ID} .* (Done|Error) .*"'

    # Check if the fault was injected
    remote.exec "test -e /var/lib/snapd/faults/$TAG:$FAULT"

    if [ "$FAULT" = panic ]; then
        echo "Ensure the panic was injected and triggered stamp file is present"
        remote.exec "sudo journalctl -u snapd | grep -A 3 panic" > output
        MATCH "$TAG":$FAULT < output
        MATCH "osutil.injectFault" < output
    fi

    FINAL_STATUS="$(remote.exec snap changes | grep -E "^$change_id .*" | awk ' {print $2} ')"
    CURRENT_REV="$(remote.exec snap list | grep -E "^$SNAP .*" | awk ' {print $3} ')"

    echo "Ensure the change has no steps with Error"
    [ "$FINAL_STATUS" = Done ]
    remote.exec "snap change $change_id" | NOMATCH "^Error .*"
    echo "Ensure the initial revision is not the current one"
    test "$INITIAL_REV" != "$CURRENT_REV"
