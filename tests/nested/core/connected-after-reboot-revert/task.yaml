summary: Check that a after a revert of a boot snap connections are restored

details: |
  This test checks that after a revert that involved a boot snap (so we had
  two reboots, one for installing and one for reverting) in a transactional
  update, we still have connections to the base snap. This could happen in
  the past if one of the updated snaps was snapd.

systems: [ubuntu-*]

execute: |
  echo "Build kernel with failing post-refresh hook"
  VERSION="$(tests.nested show version)"
  unsquashfs -d pc-kernel "$(tests.nested get extra-snaps-path)"/pc-kernel.snap
  HOOKS_D=pc-kernel/meta/hooks/
  POST_REFRESH_P=$HOOKS_D/post-refresh
  mkdir -p "$HOOKS_D"
  cat > "$POST_REFRESH_P" << EOF
  \#!/bin/bash -ex
  exit 1
  EOF
  chmod +x "$POST_REFRESH_P"
  snap pack pc-kernel/ --filename=pc-kernel_badhook.snap

  echo "Wait for the system to be seeded first"
  remote.exec "sudo snap wait system seed.loaded"

  echo "Install kernel with failing post-refresh hook"
  remote.push pc-kernel_badhook.snap

  # install bluez
  BLUEZ_CHANNEL=$VERSION
  if [ "$VERSION" -eq 16 ] || [ "$VERSION" -eq 18 ]; then
      BLUEZ_CHANNEL=latest
  fi
  echo "Install bluez snap and make sure connections to the base are performed"
  remote.exec "sudo snap install --channel=\"$BLUEZ_CHANNEL\" bluez"
  remote.exec "snap connections bluez" | MATCH 'uhid  *bluez:uhid  *:uhid'

  if [ "$VERSION" -eq 16 ]; then
      snapd_snap=$(remote.exec find /var/lib/snapd/snaps/ -name 'core_*.snap')
  else
      snapd_snap=$(remote.exec find /var/lib/snapd/snaps/ -name 'snapd_*.snap')
  fi

  boot_id="$(tests.nested boot-id)"

  chg_id=$(remote.exec "sudo snap install \
                             --dangerous --transaction=all-snaps --no-wait \
                             ./pc-kernel_badhook.snap \"$snapd_snap\"")

  echo "Wait for reboot"
  remote.wait-for reboot "$boot_id"

  # For UC16 we get two reboots on install, as both core and kernel are being updated
  if [ "$VERSION" -eq 16 ]; then
      boot_id="$(tests.nested boot-id)"
      echo "Wait for second reboot for UC16"
      remote.wait-for reboot "$boot_id"
      boot_id="$(tests.nested boot-id)"
      echo "Wait for third reboot for UC16"
      remote.wait-for reboot "$boot_id"
  fi

  boot_id="$(tests.nested boot-id)"
  echo "Wait for reboot after post-refresh hook failure"
  remote.wait-for reboot "$boot_id"

  boot_id="$(tests.nested boot-id)"
  # wait for change to finish with error
  not remote.exec sudo snap watch "$chg_id"
  # make sure that no additional reboots have happened while the change finished
  test "$boot_id" = "$(tests.nested boot-id)"

  echo "Check that connections to the base are kept"
  remote.exec "snap connections bluez" | MATCH 'uhid  *bluez:uhid  *:uhid'

  echo "Check that change finished with failure and that the old snap is being used"
  remote.exec "snap info pc-kernel | MATCH 'installed:.*\(x1\)'"
  remote.exec "snap changes | MATCH \"^$chg_id.*Error\""
  if [ "$VERSION" -ge 20 ]; then
      # shellcheck disable=SC2016
      remote.exec 'test $(readlink /run/mnt/ubuntu-boot/EFI/ubuntu/kernel.efi) = pc-kernel_x1.snap/kernel.efi'
      remote.exec 'cat /run/mnt/ubuntu-boot/EFI/ubuntu/grubenv | MATCH "^kernel_status=$"'
      echo "Check that modeenv has only the old kernel"
      remote.exec 'cat /var/lib/snapd/modeenv | MATCH "^current_kernels=pc-kernel_x1.snap$"'
  else
      remote.exec 'cat /boot/grub/grubenv | MATCH "^snap_kernel=pc-kernel_x1.snap$"'
      remote.exec 'cat /boot/grub/grubenv | MATCH "^snap_mode=$"'
      remote.exec 'cat /boot/grub/grubenv | MATCH "^snap_try_kernel=$"'
      remote.exec 'cat /proc/cmdline | MATCH snap_kernel=pc-kernel_x1.snap'
  fi
