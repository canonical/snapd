summary: Check that a kernel refresh reseals

systems: [ubuntu-20.04-64]

prepare: |
  # we cannot use the kernel from store as it may have a version of
  # snap-bootstrap that will not be able to unseal the keys and unlock the
  # encrypted volumes, instead use the kernel we repacked when building the UC20
  # image
  KERNEL_SNAP="$(ls "$(tests.nested get assets-path)"/pc-kernel_*.snap)"
  unsquashfs -d pc-kernel "$KERNEL_SNAP"
  # ensure we really have the header we expect
  grep -q -a "This program cannot be run in DOS mode" pc-kernel/kernel.efi
  # modify the kernel so that the hash changes
  sed -i 's/This program cannot be run in DOS mode/This program cannot be run in XXX mode/' pc-kernel/kernel.efi
  grep -q -a "This program cannot be run in XXX mode" pc-kernel/kernel.efi

  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"
  tests.nested secboot-sign file "$PWD/pc-kernel/kernel.efi" "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

  snap pack pc-kernel
  rm -rf pc-kernel
  mv pc-kernel_*.snap new-pc-kernel.snap
  tests.nested copy new-pc-kernel.snap

execute: |
  SEALED_KEY_MTIME_1="$(tests.nested exec sudo stat --format="%Y" /run/mnt/ubuntu-boot/device/fde/ubuntu-data.sealed-key)"
  RESEAL_COUNT_1="$(tests.nested exec sudo cat /var/lib/snapd/device/fde/boot-chains | python3 -m json.tool | grep reseal-count|cut -f2 -d: | tr ',' ' ')"

  echo "Install new (unasserted) kernel and wait for reboot/change finishing"
  boot_id="$( tests.nested boot-id )"
  REMOTE_CHG_ID=$(tests.nested exec sudo snap install --dangerous new-pc-kernel.snap --no-wait)
  tests.nested wait-for reboot "${boot_id}"
  tests.nested exec sudo snap watch "${REMOTE_CHG_ID}"

  echo "Check that we are using the right kernel"
  tests.nested exec sudo grep -q -a "This program cannot be run in XXX mode" /boot/grub/kernel.efi

  echo "Check ubuntu-data.sealed-key mtime is newer"
  SEALED_KEY_MTIME_2="$(tests.nested exec sudo stat --format="%Y" /run/mnt/ubuntu-boot/device/fde/ubuntu-data.sealed-key)"
  test "$SEALED_KEY_MTIME_2" -gt "$SEALED_KEY_MTIME_1"

  echo "Check that we have boot chains"
  tests.nested exec sudo test -e /var/lib/snapd/device/fde/boot-chains

  RESEAL_COUNT_2="$(tests.nested exec sudo cat /var/lib/snapd/device/fde/boot-chains | python3 -m json.tool | grep reseal-count|cut -f2 -d: | tr ',' ' ')"
  test "$RESEAL_COUNT_2" -gt "$RESEAL_COUNT_1"
