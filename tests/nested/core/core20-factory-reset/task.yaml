summary: Verify factory reset of a UC20 system

details: |
    This test checks that UC20 can be reset to factory state

systems: [ubuntu-2*]

environment:
    NESTED_ENABLE_SECURE_BOOT/fde: true
    NESTED_ENABLE_TPM/fde: true
    FDE/fde: "enabled"

    NESTED_ENABLE_SECURE_BOOT/nofde: false
    NESTED_ENABLE_TPM/nofde: false
    FDE/nofde: "disabled"

execute: |
    echo "Wait for the system to be seeded first"
    remote.exec "sudo snap wait system seed.loaded"
    remote.wait-for device-initialized

    remote.exec snap model > initial-model
    remote.exec snap model --serial > initial-serial
    remote.exec sudo blkid |grep -v /dev/loop > initial-disk

    echo "Request factory reset"
    boot_id=$(tests.nested boot-id)

    # leave some marker files
    remote.exec sudo touch /run/mnt/ubuntu-seed/marker
    remote.exec sudo touch /run/mnt/ubuntu-save/marker
    remote.exec sudo touch /run/mnt/ubuntu-boot/marker
    remote.exec sudo touch /writable/marker

    # grab the ubuntu-save key
    if [ "${FDE}" = enabled ]; then
      remote.exec cat /run/mnt/ubuntu-seed/device/fde/ubuntu-save.recovery.sealed-key > pre-reset-save-fallback-key
    fi

    # add || true in case the SSH connection is broken while executing this
    # since this command causes an immediate reboot
    remote.exec "sudo snap reboot --factory-reset" || true

    remote.wait-for reboot "${boot_id}"

    # check that we are back in run mode
    remote.exec cat /proc/cmdline | MATCH 'snapd_recovery_mode=run'

    # wait for the system to get setup and finish seeding
    remote.wait-for snap-command
    retry -n 10 --wait 2 remote.exec "sudo snap wait system seed.loaded"

    # wait up to two minutes for serial registration
    retry -n 60 --wait 2 remote.exec snap model --serial

    # post factory reset world

    remote.exec snap model > current-model
    remote.exec snap model --serial > current-serial
    remote.exec sudo blkid |grep -v /dev/loop > current-disk
    # serials should be identical
    diff -u initial-model current-model
    diff -u initial-serial current-serial

    # check ubuntu-seed
    old_ubuntu_seed="$(grep LABEL=\"ubuntu-seed\" < initial-disk)"
    new_ubuntu_seed="$(grep LABEL=\"ubuntu-seed\" < current-disk)"
    # ubuntu seed is identical
    test "$old_ubuntu_seed" = "$new_ubuntu_seed"

    # check ubuntu-save
    if [ "${FDE}" = enabled ]; then
      old_ubuntu_save="$(grep ' LABEL="ubuntu-save-enc"' < initial-disk)"
      new_ubuntu_save="$(grep ' LABEL="ubuntu-save-enc"' < current-disk)"
    else
      old_ubuntu_save="$(grep ' LABEL="ubuntu-save"' < initial-disk)"
      new_ubuntu_save="$(grep ' LABEL="ubuntu-save"' < current-disk)"
    fi
    # ubuntu save is identical
    test "$old_ubuntu_save" = "$new_ubuntu_save"

    # check ubuntu-boot
    old_ubuntu_boot="$(grep LABEL=\"ubuntu-boot\" < initial-disk)"
    new_ubuntu_boot="$(grep LABEL=\"ubuntu-boot\" < current-disk)"
    # the device name should be the same
    test "$(echo "$old_ubuntu_boot" | cut -f1 -d:)" = "$(echo "$new_ubuntu_boot" | cut -f1 -d:)"
    # but otherwise the UUIDs are different, as we have a new partition
    test "$old_ubuntu_boot" != "$new_ubuntu_boot"

    # check ubuntu-data
    if [ "${FDE}" = enabled ]; then
      old_ubuntu_data="$(grep ' LABEL="ubuntu-data-enc"' < initial-disk)"
      new_ubuntu_data="$(grep ' LABEL="ubuntu-data-enc"' < current-disk)"
    else
      old_ubuntu_data="$(grep ' LABEL="ubuntu-data"' < initial-disk)"
      new_ubuntu_data="$(grep ' LABEL="ubuntu-data"' < current-disk)"
    fi
    # again same device
    test "$(echo "$old_ubuntu_data" | cut -f1 -d:)" = "$(echo "$new_ubuntu_data" | cut -f1 -d:)"
    # again, the UUIDs are different
    test "$old_ubuntu_data" != "$new_ubuntu_data"

    # reaffirm that marker files are gone where we expected new partitions, but
    # are still present where we expected the partitions to be preserved
    remote.exec test ! -e /run/mnt/ubuntu-boot/marker
    remote.exec test ! -e /writable/marker
    remote.exec test -e /run/mnt/ubuntu-save/marker
    remote.exec test -e /run/mnt/ubuntu-seed/marker

    # the temp factory-reset key is gone
    # TODO this is a very weak check
    if [ "${FDE}" = enabled ]; then
      remote.exec test ! -e /run/mnt/ubuntu-seed/device/fde/ubuntu-save.recovery.sealed-key.factory-reset
    fi
    # no factory reset marker
    remote.exec test ! -e /var/lib/snapd/device/factory-reset

    # verify that the factory-reset log was collected
    remote.exec "zcat /var/log/factory-reset-mode.log.gz" | MATCH 'performing factory reset on an installed system'

    if [ "${FDE}" = enabled ]; then
      remote.exec cat /run/mnt/ubuntu-seed/device/fde/ubuntu-save.recovery.sealed-key > post-reset-save-fallback-key
      # not a great check as the fallback key may have been resealed, but it
      # should be different nonetheless
      not cmp pre-reset-save-fallback-key post-reset-save-fallback-key
    fi

    echo "Perform subsequent factory reset"
    boot_id=$(tests.nested boot-id)
    remote.exec "sudo snap reboot --factory-reset" || true
    remote.wait-for reboot "${boot_id}"
    remote.exec cat /proc/cmdline | MATCH 'snapd_recovery_mode=run'
    remote.wait-for snap-command
    # TODO investigate why does this have to be much longer than what is needed for the
    # initial wait and one after the first reset?
    retry -n 60 --wait 2 remote.exec "sudo snap wait system seed.loaded"
    retry -n 60 --wait 2 remote.exec snap model --serial
    remote.exec snap model --serial > subsequent-serial
    # still the same serial
    diff -u initial-serial subsequent-serial

    # the markers are still there
    remote.exec test -e /run/mnt/ubuntu-save/marker
    remote.exec test -e /run/mnt/ubuntu-seed/marker
    if [ "${FDE}" = enabled ]; then
      # get the key
      remote.exec cat /run/mnt/ubuntu-seed/device/fde/ubuntu-save.recovery.sealed-key > subsequent-reset-save-fallback-key
      # and the key is different again
      not cmp post-reset-save-fallback-key subsequent-reset-save-fallback-key
    fi
