summary: Check that refreshing snapd to a fixed version removes vulnerable revs

details: |
  Check that having a vulnerable snapd installed, the refresh to a fixed version
  removes the vulnerabilities and the previous revision is removed.

# just focal is fine for this test - we only need to check that things happen on
# classic
systems: [ubuntu-2*]

environment:
  # which snap snapd comes from in this test
  SNAPD_SOURCE_SNAP/snapd: snapd
  SNAPD_SOURCE_SNAP/core: core

  # where we mount the image
  IMAGE_MOUNTPOINT: /mnt/cloudimg

  # we don't actually use snapd from the branch in the seed of the VM initially,
  # but we have to define this in order to get a custom image, see
  # nested_get_image_name in nested.sh for this logic
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

  # meh snap-state doesn't have a consistent naming for these snaps, so we can't
  # just do "$SNAPD_SOURCE_SNAP-from-deb.snap"
  REPACKED_SNAP_NAME/core: core-from-snapd-deb.snap
  REPACKED_SNAP_NAME/snapd: snapd-from-deb.snap

  # a specific vulnerable snapd version we can base our image on
  VULN_SNAP_REV_URL/snapd: https://storage.googleapis.com/snapd-spread-tests/snaps/snapd_14549.snap

  # a specific vulnerable core version we can base our image on
  VULN_SNAP_REV_URL/core: https://storage.googleapis.com/snapd-spread-tests/snaps/core_12603.snap

prepare: |
  #shellcheck source=tests/lib/preseed.sh
  . "$TESTSLIB/preseed.sh"

  # create a VM and mount a cloud image
  tests.nested build-image classic
  mkdir -p "$IMAGE_MOUNTPOINT"
  IMAGE_NAME=$(tests.nested get image-name classic)
  mount_ubuntu_image "$(tests.nested get images-path)/$IMAGE_NAME" "$IMAGE_MOUNTPOINT"

  # repack the deb into the snap we want
  "$TESTSTOOLS"/snaps-state repack_snapd_deb_into_snap "$SNAPD_SOURCE_SNAP"

  # add the known vulnerable version of snapd into the seed, dangerously
  curl -s -o "$SNAPD_SOURCE_SNAP-vuln.snap" "$VULN_SNAP_REV_URL"

  # repack to ensure it is a dangerous revision
  unsquashfs -d "$SNAPD_SOURCE_SNAP-vuln" "$SNAPD_SOURCE_SNAP-vuln.snap"
  rm "$SNAPD_SOURCE_SNAP-vuln.snap"
  snap pack "$SNAPD_SOURCE_SNAP-vuln" --filename="$SNAPD_SOURCE_SNAP.snap"

  # inject the vulnerable snap into the seed
  inject_snap_into_seed "$IMAGE_MOUNTPOINT" "$SNAPD_SOURCE_SNAP"

  # undo any preseeding, the images may have been preseeded without our snaps
  # so we want to undo that to ensure our snaps are on them
  SNAPD_DEBUG=1 /usr/lib/snapd/snap-preseed --reset "$IMAGE_MOUNTPOINT"

  # unmount the image and start the VM
  umount_ubuntu_image "$IMAGE_MOUNTPOINT"
  tests.nested create-vm classic

execute: |
  # check the current snapd snap is vulnerable
  remote.exec cat /snap/$SNAPD_SOURCE_SNAP/current/usr/lib/snapd/info | MATCH '^VERSION=2\.54\.2$'
  VULN_REV=$(remote.exec "snap list $SNAPD_SOURCE_SNAP" | tail -n +2 | awk '{print $3}')

  # now install our snapd deb from the branch - this is so we know the patched
  # snapd is always executing, regardless of which snapd/core snap re-exec 
  # nonsense is going on
  SNAPD_DEB_ARR=( "$SPREAD_PATH"/../snapd_*.deb )
  SNAPD_DEB=${SNAPD_DEB_ARR[0]}
  remote.push "$SNAPD_DEB"
  remote.exec "sudo dpkg -i $(basename "$SNAPD_DEB")"

  # now send the snap version of snapd under test to the VM
  remote.push "$REPACKED_SNAP_NAME"
  remote.exec "sudo snap install $REPACKED_SNAP_NAME --dangerous"

  # there is a race between the snap install finishing and removing the 
  # vulnerable revision, so we have to wait a bit
  VULN_SNAP_REMOVED=false
  #shellcheck disable=SC2034
  for i in $(seq 1 60); do
    if remote.exec "snap list $SNAPD_SOURCE_SNAP --all" | NOMATCH "$VULN_REV"; then
      VULN_SNAP_REMOVED=true
      break
    fi
    sleep 1
  done

  if [ "$VULN_SNAP_REMOVED" != "true" ]; then
    echo "vulnerable snap was not automatically removed"
    exit 1
  fi

  # check that the current revision is not vulnerable
  remote.exec cat /snap/$SNAPD_SOURCE_SNAP/current/usr/lib/snapd/info | NOMATCH '^VERSION=2\.54\.2$'

  # and there are no other revisions
  if [ "$(remote.exec "snap list $SNAPD_SOURCE_SNAP" | tail -n +2 | wc -l)"  != "1" ]; then
    echo "unexpected extra revision of $SNAPD_SOURCE_SNAP installed"
    exit 1
  fi
