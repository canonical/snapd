summary: verify UC20 to UC22 with min-size
details: |
  Execute transition from UC20 to UC22 remodel scenario under the
  test-snapd brand. Both models use the same test-snapd-from device
  view store. The new model has new gadget using min-size.

systems: [ubuntu-20.04-64]

environment:
  # encrypted case
  NESTED_ENABLE_TPM/encrypted: true
  NESTED_ENABLE_SECURE_BOOT/encrypted: true
  SAVE_PART_LABEL/encrypted: ubuntu-save-enc
  # unencrypted case
  NESTED_ENABLE_TPM/notencrypted: false
  NESTED_ENABLE_SECURE_BOOT/notencrypted: false
  SAVE_PART_LABEL/notencrypted: ubuntu-save
  # needed to use snakeoil keys
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/test-snapd-remodel-auto-import.assert
  NESTED_USE_CLOUD_INIT: false
  NESTED_REPACK_KERNEL_SNAP: false
  NESTED_REPACK_GADGET_SNAP: false
  NESTED_REPACK_BASE_SNAP: false
  SNAPD_TEST_BRAND: test-snapd
  # store we are remodeling from
  SNAPD_STORE_FROM: CQvkdMjgbapk821Po2cF
  # device serial, this should match the sub-store mapping rules in the serial
  # vault
  SERIAL: 1234-snapd-remodel-minsize
  GADGET_NAME: test-snapd-remodel-pc
  # use new gadget with shim signed by snakeoil keys so encrypted case works
  # (this is a gadget packed from tests/lib/snaps/test-snapd-remodel-pc-min-size-22/,
  # but with shim re-signed, and then published in our test store)
  NEW_GADGET_NAME: test-snapd-remodel-pc-snakeoil

prepare: |
  # Modify gadget so it sends the suggested serial
  GADGET_D=$GADGET_NAME
  cp -av "$TESTSLIB/snaps/$GADGET_NAME-20" "$GADGET_D"
  test -n "$SERIAL"
  echo "$SERIAL" > "$GADGET_D"/serial
  # Re-sign shim with snakeoil keys
  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"
  tests.nested secboot-sign gadget "$GADGET_D" "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  snap pack "$GADGET_D" "$(tests.nested get extra-snaps-path)"

  # Use UBUNTU_STORE_AUTH_DATA_FILENAME env var to authenticate against the store
  # with the remodel-store-viewer user. The file authentication is generated by using
  # snapcraft 6.x and running the command 'snapcraft export-login <filename>'
  # Every 12 months (in January) the auth file needs to be regenerated.
  export UBUNTU_STORE_AUTH_DATA_FILENAME="$TESTSLIB/remodel-store-viewer.auth"
  export NESTED_CUSTOM_MODEL="$TESTSLIB/assertions/test-snapd-remodel-pc-20.model"
  tests.nested build-image core
  tests.nested create-vm core

execute: |
  boot_id="$(tests.nested boot-id)"

  # wait until device is initialized and has a serial
  remote.wait-for device-initialized

  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  remote.exec "snap model --assertion" | MATCH "store: $SNAPD_STORE_FROM\$"
  remote.exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc$'
  remote.exec "snap model --assertion --serial" | MATCH "serial: ${SERIAL}\$"
  # check ubuntu-save partition size is as specified in gadget
  usaveSz=$(remote.exec "sudo blockdev --getsize64 /dev/disk/by-label/$SAVE_PART_LABEL")
  test "$usaveSz" -eq 16777216

  # This key was used to sign the second model assertion (different from the one
  # used in the original model so it was not downloaded by ubuntu-image).
  remote.push "$TESTSLIB/assertions/test-snapd-account-key-rrP2xy.assert"
  remote.exec "sudo snap ack test-snapd-account-key-rrP2xy.assert"

  remote.push "$TESTSLIB/assertions/test-snapd-remodel-pc-min-size-22.model"
  CHANGE_ID="$(remote.exec "sudo snap remodel --no-wait test-snapd-remodel-pc-min-size-22.model")"
  test -n "$CHANGE_ID"
  # very long retry wait for the change to be in stable state, where stable
  # means that it's done or failed in which case we fail the test on the next
  # check just below
  retry -n 100 --wait 5 sh -c "remote.exec sudo snap changes | MATCH '^${CHANGE_ID}\s+(Done|Undone|Error)'"
  # check that the change was successful
  remote.exec "sudo snap changes" | MATCH "^${CHANGE_ID}\s+Done"

  current_boot_id="$( tests.nested boot-id )"
  # we should have rebooted a couple of times (at least twice for the recovery
  # system and the base), so boot-id should be different
  test "$boot_id" != "$current_boot_id"

  # the new gadget snap is installed
  remote.exec snap list "$NEW_GADGET_NAME" | MATCH gadget

  # we are remodeling within the same brand and store
  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  remote.exec "snap model --assertion" | MATCH "store: $SNAPD_STORE_FROM\$"
  # new model
  remote.exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc-min-size$'
  # but the same serial
  remote.exec "snap model --assertion --serial" | MATCH "serial: ${SERIAL}\$"

  # check min-size and size are 16M/32M
  #shellcheck disable=SC2002
  remote.exec cat /snap/"$NEW_GADGET_NAME"/current/meta/gadget.yaml | MATCH 'min-size: 16M'
  #shellcheck disable=SC2002
  remote.exec cat /snap/"$NEW_GADGET_NAME"/current/meta/gadget.yaml | MATCH 'size: 32M'
  # check ubuntu-save partition size did not change
  usaveSz=$(remote.exec "sudo blockdev --getsize64 /dev/disk/by-label/$SAVE_PART_LABEL")
  test "$usaveSz" -eq 16777216
