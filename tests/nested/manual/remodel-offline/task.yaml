summary: verify UC20 to UC22 offline remodel
details: |
  Execute transition from UC20 to UC22 remodel in an offline scenario.

systems: [ubuntu-20.04-64]

environment:
  NESTED_ENABLE_TPM: false
  NESTED_ENABLE_SECURE_BOOT: false
  SNAPD_TEST_BRAND: developer1

  # provide everything needed for the remodel via the CLI
  USE_INSTALLED_APP/local_snaps: false
  USE_INSTALLED_VSET/local_snaps: false
  USE_INSTALLED_ESSENTIAL_SNAPS/local_snaps: false

  # preinstall/ack everything needed for the remodel, this ensures that the
  # --offline flag is working as expected
  USE_INSTALLED_APP/installed_snaps: true
  USE_INSTALLED_ESSENTIAL_SNAPS/installed_snaps: true
  USE_INSTALLED_VSET/installed_snaps: true

  # preinstall essential snaps needed for the remodel, app snap and validation
  # set is provided via the CLI
  USE_INSTALLED_APP/local_and_installed_snaps: false
  USE_INSTALLED_ESSENTIAL_SNAPS/local_and_installed_snaps: true
  USE_INSTALLED_VSET/local_and_installed_snaps: false

  # preinstall essential and app snaps needed for the remodel, validation set is
  # provided via the CLI. this catches the case where only assertions were sent
  # with the form data, which was not previously supported
  USE_INSTALLED_APP/local_assertions: true
  USE_INSTALLED_ESSENTIAL_SNAPS/local_assertions: true
  USE_INSTALLED_VSET/local_assertions: false

  NESTED_SIGN_SNAPS_FAKESTORE: true
  # for the fake store
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028
  REMOTE_SAS_URL: http://10.0.2.2:11028

prepare: |
  snap install jq remarshal lxd yq
  lxd init --auto

  mkdir -p updates/

  "${TESTSTOOLS}/store-state" setup-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"
  cp "${TESTSLIB}/assertions/developer1.account" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
  cp "${TESTSLIB}/assertions/developer1.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
  cp "${TESTSLIB}/assertions/testrootorg-store.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"

  gendeveloper1 sign-model <"${TESTSLIB}/assertions/developer1-test-snapd-remodel-offline-rev0.json" >test-snapd-remodel-offline-rev0.model
  gendeveloper1 sign-model <"${TESTSLIB}/assertions/developer1-test-snapd-remodel-offline-rev1.json" >test-snapd-remodel-offline-rev1.model
  gendeveloper1 sign-model <"${TESTSLIB}/assertions/developer1-test-snapd-core22-required-vset.json" >test-snapd-core22-required-vset.assert

  KEY_NAME=$(tests.nested download snakeoil-key)

  lxc launch "ubuntu:22.04" builder-for-22
  lxcdir="/project/$(realpath --relative-to="${PROJECT_PATH}" "${PWD}")"
  lxc config device add builder-for-22 project disk source="${PROJECT_PATH}" path=/project shift=true
  lxc exec --cwd "${lxcdir}" \
           --env SNAKEOIL_KEY="${lxcdir}/${KEY_NAME}.key" \
           --env SNAKEOIL_CERT="${lxcdir}/${KEY_NAME}.pem" \
           builder-for-22 -- bash -x repack-kernel.sh 22 beta

  mv pc-kernel-modified.snap updates/pc-kernel-22.snap

  snap download --channel="latest/edge" --basename="original-core22" "core22"
  # shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB/prepare.sh"
  repack_core_snap_with_tweaks original-core22.snap updates/core22.snap
  rm -f original-core22.{snap,assert}

  snap download --channel="22/edge" --basename="original-pc-22" "pc"
  unsquashfs -d pc original-pc-22.snap
  rm -f original-pc-22.{snap,assert}
  SNAKEOIL_KEY="${PWD}/${KEY_NAME}.key"
  SNAKEOIL_CERT="${PWD}/${KEY_NAME}.pem"
  # shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"
  nested_secboot_sign_gadget pc "${SNAKEOIL_KEY}" "${SNAKEOIL_CERT}"
  mkdir -p pc/meta/hooks/
  cp prepare-device pc/meta/hooks/
  echo "console=ttyS0 systemd.journald.forward_to_console=1" >>pc/cmdline.extra
  snap pack pc updates/ --filename="pc-22.snap"
  rm -rf pc

  snap download --revision=28 hello-world --basename=hello-world-old --target-directory=updates/
  snap download --channel=latest/stable hello-world --basename=hello-world --target-directory=updates/
  snap download --channel=latest/stable core --basename=core --target-directory=updates/

  tests.nested prepare-essential-snaps

  unsquashfs -d pc-20 "$(tests.nested get extra-snaps-path)/pc.snap"
  rm -f "$(tests.nested get extra-snaps-path)/pc.snap"
  # Add min-size
  yq -i '(.volumes.pc.structure[]|select(.role == "system-save")|.min-size) = "16M"' pc-20/meta/gadget.yaml
  mkdir -p pc-20/meta/hooks/
  cp prepare-device pc-20/meta/hooks/
  snap pack pc-20 "$(tests.nested get extra-snaps-path)" --filename="pc.snap"

  rm -rf pc-20
  "$TESTSTOOLS"/store-state make-snap-installable --noack --revision 2 "${NESTED_FAKESTORE_BLOB_DIR}" "$(tests.nested get extra-snaps-path)/pc.snap" "UqFziVZDHLSyO3TqSWgNBoAdHbLI4dAH"

  "$TESTSTOOLS"/store-state make-snap-installable --noack --revision 2 "${NESTED_FAKESTORE_BLOB_DIR}" "updates/pc-kernel-22.snap" "pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza"
  "$TESTSTOOLS"/store-state make-snap-installable --noack --revision 3 "${NESTED_FAKESTORE_BLOB_DIR}" "updates/pc-22.snap" "UqFziVZDHLSyO3TqSWgNBoAdHbLI4dAH"
  "$TESTSTOOLS"/store-state make-snap-installable --noack --revision 2 "${NESTED_FAKESTORE_BLOB_DIR}" "updates/core22.snap" "amcUKQILKXHHTlmSa7NMdnXSx02dNeeT"
  "$TESTSTOOLS"/store-state make-snap-installable --noack --revision 28 "${NESTED_FAKESTORE_BLOB_DIR}" "updates/hello-world-old.snap" "buPKUD3TKqCOgLEjjHx5kSiCpIs5cMuQ"
  "$TESTSTOOLS"/store-state make-snap-installable --noack --revision 29 "${NESTED_FAKESTORE_BLOB_DIR}" "updates/hello-world.snap" "buPKUD3TKqCOgLEjjHx5kSiCpIs5cMuQ"
  "$TESTSTOOLS"/store-state make-snap-installable --noack --revision 1 "${NESTED_FAKESTORE_BLOB_DIR}" "updates/core.snap" "99T7MUlRhtI3U0QFgl5mXXESAiSwt776"

  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" updates/pc-kernel-22.snap 22/edge
  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" updates/pc-22.snap 22/edge

  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "$(tests.nested get extra-snaps-path)/pc-kernel.snap" 20/edge
  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "$(tests.nested get extra-snaps-path)/pc.snap" 20/edge
  for snap in "$(tests.nested get extra-snaps-path)"/snapd*.snap; do
    "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "${snap}" latest/edge
  done

  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" updates/core22.snap latest/edge
  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "$(tests.nested get extra-snaps-path)/core20.snap" latest/edge

  # NEED: updates/hello-world.snap

  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "updates/hello-world.snap" latest/stable
  # NEED: updates/core.snap
  "$TESTSTOOLS"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" updates/core.snap latest/stable

  # start fake device svc
  systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

  export NESTED_CUSTOM_MODEL=test-snapd-remodel-offline-rev0.model

  NESTED_BUILD_SNAPD_FROM_CURRENT=false tests.nested build-image core
  tests.nested create-vm core

  cat <<EOF >snapd-override.conf
  [Service]
  Environment=SNAPPY_FORCE_API_URL=${REMOTE_SAS_URL}
  EOF
  remote.push snapd-override.conf
  remote.exec sudo mkdir -p /etc/systemd/system/snapd.service.d
  remote.exec sudo cp snapd-override.conf /etc/systemd/system/snapd.service.d/
  remote.exec sudo systemctl daemon-reload
  remote.exec sudo systemctl restart snapd

  # For snap commands.
  echo "SNAPPY_FORCE_API_URL=${REMOTE_SAS_URL}" | remote.exec "sudo tee -a /etc/environment"

restore: |
  # stop fake device svc
  systemctl stop fakedevicesvc || true

  "${TESTSTOOLS}/store-state" teardown-fake-store "${NESTED_FAKESTORE_BLOB_DIR}" || true

  rm -rf updates/

execute: |
  boot_id="$(tests.nested boot-id)"

  # wait until device is initialized and has a serial
  remote.wait-for device-initialized

  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  remote.exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc$'
  remote.exec "snap model --assertion --serial" | MATCH "^authority-id: developer1$"

  new_model_rev=test-snapd-remodel-offline-rev1.model
  remote.push "${new_model_rev}"
  remodel_options="--no-wait"

  # if we are only using preinstalled/acked snaps/assertions, then we have to
  # use the --offline flag to indicate that we want to use already installed
  # snaps
  if [ "${USE_INSTALLED_ESSENTIAL_SNAPS}" = 'true' ] && [ "${USE_INSTALLED_VSET}" = 'true' ] && [ "${USE_INSTALLED_APP}" = 'true' ]; then
      remodel_options="$remodel_options --offline"
  fi

  # install/download new bases required for the new model
  for sn_name in core22 core; do
      if [ "${USE_INSTALLED_ESSENTIAL_SNAPS}" = 'true' ]; then
          remote.exec "sudo snap install ${sn_name}"
      else
          remote.exec "sudo snap download --basename=${sn_name} ${sn_name}"
          remodel_options="$remodel_options --snap ${sn_name}.snap --assertion ${sn_name}.assert"
      fi
  done

  # install/download app required for the new model
  if [ "${USE_INSTALLED_APP}" = 'true' ]; then
      remote.exec "sudo snap install --revision=28 hello-world"

      # refresh to the latest revision to make sure that remodeling will look
      # for previously installed revisions when doing an offline remodel
      remote.exec "sudo snap refresh hello-world"
      remote.exec "snap list hello-world" | awk 'NR != 1 { print $3 }' | NOMATCH 28
  else
      remote.exec "snap download --revision=28 --basename=hello-world hello-world"
      remodel_options="$remodel_options --snap hello-world.snap --assertion hello-world.assert"
  fi

  # gadget has to have the same base as the model. so we need to update with remodeling
  remote.exec "snap download --channel=22/stable --basename=pc pc"
  remodel_options="$remodel_options --snap pc.snap --assertion pc.assert"

  # install/download new kernel and gadget required for the new model
  if [ "${USE_INSTALLED_ESSENTIAL_SNAPS}" = 'true' ]; then
      # --no-wait here, since this should trigger a reboot
      KERNEL_CHG_ID=$(remote.exec "sudo snap refresh --no-wait --channel=22/stable pc-kernel")

      remote.wait-for reboot "$boot_id"
      boot_id="$(tests.nested boot-id)"
      # Wait for the change to finish
      remote.exec sudo snap watch "$KERNEL_CHG_ID"
  else
      remote.exec "snap download --channel=22/stable --basename=pc-kernel pc-kernel"
      remodel_options="$remodel_options --snap pc-kernel.snap --assertion pc-kernel.assert"
  fi

  # ack/add new validation set assertion to CLI params
  remote.push "test-snapd-core22-required-vset.assert"
  if [ "${USE_INSTALLED_VSET}" = 'true' ]; then
      remote.exec "sudo snap ack test-snapd-core22-required-vset.assert"
  else
      remodel_options="$remodel_options --assertion test-snapd-core22-required-vset.assert"
  fi

  # Make sure we cannot access the store
  netplan_cfg=50-bad-gw.yaml
  cat << 'EOF' > "$netplan_cfg"
  network:
    ethernets:
      any:
        match:
          name: e*
        dhcp4: true
        routes:
          - to: default
            via: 10.10.10.100
            metric: 10
  EOF
  remote.push "$netplan_cfg"
  remote.exec 'sudo rm /etc/netplan/*'
  remote.exec sudo cp "$netplan_cfg" /etc/netplan/
  remote.exec sudo netplan apply

  CHANGE_ID=$(remote.exec "sudo snap remodel $remodel_options $new_model_rev")
  test -n "$CHANGE_ID"
  # very long retry wait for the change to be in stable state, where stable
  # means that it's done or failed in which case we fail the test on the next
  # check just below
  retry -n 100 --wait 5 sh -c "remote.exec sudo snap changes | MATCH '^${CHANGE_ID}\s+(Done|Undone|Error)'"
  # check that the change was successful
  remote.exec "sudo snap changes" | MATCH "^${CHANGE_ID}\s+Done"

  current_boot_id="$( tests.nested boot-id )"
  # we should have rebooted a couple of times (at least twice for the recovery
  # system and the base), so boot-id should be different
  test "$boot_id" != "$current_boot_id"

  # check that the new base, apps, and app bases are installed
  for sn_name in core22 hello-world core; do
      remote.exec snap list "${sn_name}"
  done

  # we are remodeling within the same brand
  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  # new model revision
  remote.exec "snap model --assertion" | MATCH '^revision: 1$'
  remote.exec "sudo snap validate" | MATCH '^developer1/test-snapd-core22-required-vset +enforce +1 +valid'
  remote.exec "snap list hello-world" | awk 'NR != 1 { print $3 }' | MATCH 28
