summary: verify UC20 to UC22 offline remodel
details: |
  Execute transition from UC20 to UC22 remodel in an offline scenario.

systems: [ubuntu-20.04-64]

environment:
  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/test-snapd-remodel-auto-import.assert
  NESTED_ENABLE_TPM: false
  NESTED_ENABLE_SECURE_BOOT: false
  NESTED_USE_CLOUD_INIT: false
  NESTED_REPACK_KERNEL_SNAP: false
  NESTED_REPACK_GADGET_SNAP: false
  NESTED_REPACK_BASE_SNAP: false
  SNAPD_TEST_BRAND: test-snapd
  GADGET_NAME: test-snapd-remodel-pc
  NEW_GADGET_NAME: test-snapd-remodel-pc-min-size

  # provide everything needed for the remodel via the CLI
  USE_INSTALLED_APP/local_snaps: false
  USE_INSTALLED_VSET/local_snaps: false
  USE_INSTALLED_ESSENTIAL_SNAPS/local_snaps: false

  # preinstall/ack everything needed for the remodel, this ensures that the
  # --offline flag is working as expected
  USE_INSTALLED_APP/installed_snaps: true
  USE_INSTALLED_ESSENTIAL_SNAPS/installed_snaps: true
  USE_INSTALLED_VSET/installed_snaps: true

  # preinstall essential snaps needed for the remodel, app snap and validation
  # set is provided via the CLI
  USE_INSTALLED_APP/local_and_installed_snaps: false
  USE_INSTALLED_ESSENTIAL_SNAPS/local_and_installed_snaps: true
  USE_INSTALLED_VSET/local_and_installed_snaps: false

  # preinstall essential and app snaps needed for the remodel, validation set is
  # provided via the CLI. this catches the case where only assertions were sent
  # with the form data, which was not previously supported
  USE_INSTALLED_APP/local_assertions: true
  USE_INSTALLED_ESSENTIAL_SNAPS/local_assertions: true
  USE_INSTALLED_VSET/local_assertions: false

prepare: |
  export NESTED_CUSTOM_MODEL="$TESTSLIB/assertions/test-snapd-remodel-offline-rev0.model"
  tests.nested build-image core
  tests.nested create-vm core

execute: |
  boot_id="$(tests.nested boot-id)"

  # wait until device is initialized and has a serial
  remote.wait-for device-initialized

  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  remote.exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc$'
  remote.exec "snap model --assertion --serial" | MATCH "^authority-id: generic$"

  new_model_rev=test-snapd-remodel-offline-rev1.model
  remote.push "$TESTSLIB/assertions/$new_model_rev"
  remodel_options="--no-wait"

  # if we are only using preinstalled/acked snaps/assertions, then we have to
  # use the --offline flag to indicate that we want to use already installed
  # snaps
  if [ "${USE_INSTALLED_ESSENTIAL_SNAPS}" = 'true' ] && [ "${USE_INSTALLED_VSET}" = 'true' ] && [ "${USE_INSTALLED_APP}" = 'true' ]; then
      remodel_options="$remodel_options --offline"
  fi

  # install/download new bases required for the new model
  for sn_name in core22 core; do
      if [ "${USE_INSTALLED_ESSENTIAL_SNAPS}" = 'true' ]; then
          remote.exec "snap install ${sn_name}"
      else
          remote.exec "snap download --basename=${sn_name} ${sn_name}"
          remodel_options="$remodel_options --snap ${sn_name}.snap --assertion ${sn_name}.assert"
      fi
  done

  # install/download app required for the new model
  if [ "${USE_INSTALLED_APP}" = 'true' ]; then
      remote.exec "snap install --revision=28 hello-world"

      # refresh to the latest revision to make sure that remodeling will look
      # for previously installed revisions when doing an offline remodel
      remote.exec "snap refresh hello-world"
      remote.exec "snap list hello-world" | awk 'NR != 1 { print $3 }' | NOMATCH 28
  else
      remote.exec "snap download --revision=28 --basename=hello-world hello-world"
      remodel_options="$remodel_options --snap hello-world.snap --assertion hello-world.assert"
  fi

  # install/download new kernel and gadget required for the new model
  if [ "${USE_INSTALLED_ESSENTIAL_SNAPS}" = 'true' ]; then
      # Get specific revision to grab pc 22 with compatible gadget with the one
      # in 20/stable.
      # TODO update this code to use pc from 22/stable when it has min-size
      # for the ubuntu-save partition
      remote.exec "snap refresh --revision=148 pc"

      # --no-wait here, since this should trigger a reboot
      KERNEL_CHG_ID=$(remote.exec "snap refresh --no-wait --channel=22/stable pc-kernel")

      remote.wait-for reboot "$boot_id"
      boot_id="$(tests.nested boot-id)"
      # Wait for the change to finish
      remote.exec sudo snap watch "$KERNEL_CHG_ID"
  else
      remote.exec "snap download --revision=148 --basename=pc pc"
      remodel_options="$remodel_options --snap pc.snap --assertion pc.assert"

      remote.exec "snap download --channel=22/stable --basename=pc-kernel pc-kernel"
      remodel_options="$remodel_options --snap pc-kernel.snap --assertion pc-kernel.assert"
  fi

  # ack/add new validation set assertion to CLI params
  remote.push "$TESTSLIB/assertions/test-snapd-core22-required-vset.assert"
  if [ "${USE_INSTALLED_VSET}" = 'true' ]; then
      remote.exec "snap ack test-snapd-core22-required-vset.assert"
  else
      remodel_options="$remodel_options --assertion test-snapd-core22-required-vset.assert"
  fi

  # Make sure we cannot access the store
  netplan_cfg=50-bad-gw.yaml
  cat << 'EOF' > "$netplan_cfg"
  network:
    ethernets:
      any:
        match:
          name: e*
        dhcp4: true
        routes:
          - to: default
            via: 10.10.10.100
            metric: 10
  EOF
  remote.push "$netplan_cfg"
  remote.exec 'sudo rm /etc/netplan/*'
  remote.exec sudo cp "$netplan_cfg" /etc/netplan/
  remote.exec sudo netplan apply

  CHANGE_ID=$(remote.exec "sudo snap remodel $remodel_options $new_model_rev")
  test -n "$CHANGE_ID"
  # very long retry wait for the change to be in stable state, where stable
  # means that it's done or failed in which case we fail the test on the next
  # check just below
  retry -n 100 --wait 5 sh -c "remote.exec sudo snap changes | MATCH '^${CHANGE_ID}\s+(Done|Undone|Error)'"
  # check that the change was successful
  remote.exec "sudo snap changes" | MATCH "^${CHANGE_ID}\s+Done"

  current_boot_id="$( tests.nested boot-id )"
  # we should have rebooted a couple of times (at least twice for the recovery
  # system and the base), so boot-id should be different
  test "$boot_id" != "$current_boot_id"

  # check that the new base, apps, and app bases are installed
  for sn_name in core22 hello-world core; do
      remote.exec snap list "${sn_name}"
  done

  # we are remodeling within the same brand
  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  # new model revision
  remote.exec "snap model --assertion" | MATCH '^revision: 1$'
  remote.exec "snap validate" | MATCH '^test-snapd/test-snapd-core22-required-vset +enforce +1 +valid'
  remote.exec "snap list hello-world" | awk 'NR != 1 { print $3 }' | MATCH 28
