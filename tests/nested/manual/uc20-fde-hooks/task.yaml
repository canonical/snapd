summary: Check that the fde-setup hooks work

details: |
  Check that Ubuntu Core image boots properly and the system is encrypted
  when using the fde-setup hook

# this is a UC20 specific test
systems: [ubuntu-2*]

environment:
    NESTED_ENABLE_TPM: false
    NESTED_ENABLE_SECURE_BOOT: false
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_ENABLE_OVMF: true

    NESTED_EXTRA_CMDLINE/tokens: ubuntu-core.force-experimental-tokens=1
    NESTED_EXTRA_CMDLINE/files: ubuntu-core.force-experimental-tokens=0
    EXPECT_TOKENS/tokens: true
    EXPECT_TOKENS/files: false

prepare: |
  if os.query is-ubuntu-lt 24.04 && [ "${EXPECT_TOKENS}" = true ]; then
    # SKIP
    exit 0
  fi

  echo "Build a kernel snap with the fde-setup hook"
  # shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB/prepare.sh"

  # build fde-reveal-key hook into the "extra-initrd" dir so that the
  # nested_create_core_vm picks this up
  mkdir -p ./extra-initrd/usr/bin/
  go build -o ./extra-initrd/usr/bin/fde-reveal-key "$TESTSLIB"/fde-setup-hook/fde-setup.go

  # create fde-setup hook inside the kernel
  mkdir -p ./extra-kernel-snap/meta/hooks
  go build -o ./extra-kernel-snap/meta/hooks/fde-setup "$TESTSLIB"/fde-setup-hook/fde-setup.go

  tests.nested build-image core
  tests.nested create-vm core

execute: |
  if os.query is-ubuntu-lt 24.04 && [ "${EXPECT_TOKENS}" = true ]; then
    # SKIP
    exit 0
  fi

  echo "Check that we have an encrypted system"
  remote.exec "find /dev/mapper" | MATCH ubuntu-data-[0-9a-f-]+

  if os.query is-ubuntu-ge 24.04 && [ "${EXPECT_TOKENS}" = true ]; then
    remote.exec "sudo cryptsetup luksDump --dump-json-metadata /dev/disk/by-label/ubuntu-data-enc" >data.json
    remote.exec "sudo cryptsetup luksDump --dump-json-metadata /dev/disk/by-label/ubuntu-save-enc" >save.json
    # TODO: use gojq
    data_default_token_type="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default").type' data.json)"
    data_default_platform_name="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default").ubuntu_fde_data.platform_name' data.json)"
    data_fallback_token_type="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default-fallback").type' data.json)"
    data_fallback_platform_name="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default-fallback").ubuntu_fde_data.platform_name' data.json)"
    save_default_token_type="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default").type' save.json)"
    save_default_platform_name="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default").ubuntu_fde_data.platform_name' save.json)"
    save_fallback_token_type="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default-fallback").type' save.json)"
    save_fallback_platform_name="$(jq -r '.tokens.[]|select(.ubuntu_fde_name=="default-fallback").ubuntu_fde_data.platform_name' save.json)"

    test "${data_default_token_type}" = "ubuntu-fde"
    test "${data_fallback_token_type}" = "ubuntu-fde"
    test "${save_default_token_type}" = "ubuntu-fde"
    test "${save_fallback_token_type}" = "ubuntu-fde"

    test "${data_default_platform_name}" = "fde-hooks-v3"
    test "${data_fallback_platform_name}" = "fde-hooks-v3"
    test "${save_default_platform_name}" = "plainkey"
    test "${save_fallback_platform_name}" = "fde-hooks-v3"

    remote.exec "! test -f /run/mnt/ubuntu-boot/device/fde/ubuntu-data.sealed-key"
    remote.exec "! test -f /run/mnt/ubuntu-seed/device/fde/ubuntu-data.recovery.sealed-key"
    remote.exec "! test -f /run/mnt/ubuntu-seed/device/fde/ubuntu-save.recovery.sealed-key"
  else
    remote.exec "test ! -e /var/lib/snapd/device/fde/recovery.key"
    remote.exec "test -e /run/mnt/ubuntu-boot/device/fde/ubuntu-data.sealed-key"
    remote.exec "test -e /run/mnt/ubuntu-seed/device/fde/ubuntu-data.recovery.sealed-key"
    remote.exec "test -e /run/mnt/ubuntu-seed/device/fde/ubuntu-save.recovery.sealed-key"
  fi
