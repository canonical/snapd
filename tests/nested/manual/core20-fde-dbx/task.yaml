summary: Verify EFI DBX updates in a Core20+ system using FDE

details: |
    Check that the EFI DBX can be updated in a system using FDE

systems: [ubuntu-2*]

environment:
    NESTED_ENABLE_TPM: true
    NESTED_ENABLE_SECURE_BOOT: true
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_UBUNTU_SEED_SIZE: 1500M

prepare: |
    # TODO:FDEM: copy nested vars file to "$NESTED_ASSETS_DIR/OVMF_VARS.snakeoil.fd"
    #
    tests.nested build-image core
    tests.nested create-vm core    

execute: |
    echo "Establish initial state"
    remote.exec sudo cat /var/lib/snapd/device/fde/boot-chains > boot-chains-before.json
    reseal_count_start="$(jq -r '.["reseal-count"]' < boot-chains-before.json )"

    fetch_and_check_reseal_count_equal() {
        local reseal_count_now
        remote.exec sudo cat /var/lib/snapd/device/fde/boot-chains > boot-chains.json
        reseal_count_now="$(jq -r '.["reseal-count"]' < boot-chains.json )"
        test "$reseal_count_now" = "$1"
    }

    echo "Smoke test action 'startup' without prior prepare call"
    echo '{"action":"efi-secureboot-update-startup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > startup-smoke.out

    fetch_and_check_reseal_count_equal "$reseal_count_start"

    echo "Smoke test action 'cleanup' without prior prepare call"
    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > cleanup-smoke.out

    fetch_and_check_reseal_count_equal "$reseal_count_start"

    echo "Attempt to 'prepare' with invalid data"
    # fails with invalid data
    update_payload_invalid="$(echo "foobar" | base64 -w0)"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload_invalid\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare-invalid.out

    fetch_and_check_reseal_count_equal "$reseal_count_start"

    jq -r .result.message < prepare-invalid.out | \
        MATCH "cannot perform initial reseal of keys for DBX update: cannot add EFI secure boot and boot manager policy profiles"

    echo "Attempt a valid 'prepare' request"
    # succeeds with correct update payload
    update_payload="$(base64 -w0 dbx-1-update.auth)"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out

    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    # there should have been a reaseal now
    fetch_and_check_reseal_count_equal "$((reseal_count_start + 1))"

    echo "Attempt a valid 'prepare' request, thus causing a conflict"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare-conflict.out

    jq -r .result.message < prepare-conflict.out | \
        MATCH "cannot notify of update prepare: cannot start a new DBX update when conflicting actions are in progress"

    # reseal count unchanged
    fetch_and_check_reseal_count_equal "$((reseal_count_start + 1))"

    echo "Complete the request with a 'cleanup' call"
    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > cleanup-happy.out

    # which caused reseal
    fetch_and_check_reseal_count_equal "$((reseal_count_start + 2))"
    remote.exec snap change --last=fde-efi-secureboot-db-update | MATCH 'Done .* Reseal after external EFI DBX update'

    echo "Attempt a valid 'prepare' request"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 3))"

    echo "Which gets aborted due to external request"
    echo '{"action":"efi-secureboot-update-startup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > startup.out

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 4))"
    remote.exec snap change --last=fde-efi-secureboot-db-update > snap-change-abort.out
    MATCH 'Error .* Reseal after external EFI DBX update' < snap-change-abort.out
    MATCH 'Undone .* Prepare for external EFI DBX update' < snap-change-abort.out

    echo "Attempt a valid 'prepare' request, followed by abort"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 5))"

    echo "Which gets aborted explicitly"
    remote.exec sudo snap abort --last=fde-efi-secureboot-db-update
    # snap watch will wait for change to complete, but exits with an error if
    # the change is failed/undone like the one here
    remote.exec sudo snap watch --last=fde-efi-secureboot-db-update || true

    remote.exec snap change --last=fde-efi-secureboot-db-update > snap-change-abort-explicit.out
    MATCH 'Hold .* Reseal after external EFI DBX update' < snap-change-abort-explicit.out
    MATCH 'Undone .* Prepare for external EFI DBX update' < snap-change-abort-explicit.out

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 6))"

    # TODO:FDEM: update DBX

    echo "Attempt a valid 'prepare' request, followed by a reboot"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 7))"

    boot_id="$( tests.nested boot-id )"
    remote.exec "sudo reboot" || true
    remote.wait-for reboot "${boot_id}"

    # the system should come up
    remote.exec "snap list"

    echo "Completed with a 'cleanup request'"
    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > cleanup.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | MATCH 'Done .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 8))"
