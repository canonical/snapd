summary: Verify EFI DBX updates in a Core20+ system using FDE

details: |
    Check that the EFI DBX can be updated in a system using FDE

systems: [ubuntu-2*]

environment:
    NESTED_ENABLE_TPM: true
    NESTED_ENABLE_SECURE_BOOT: true
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_UBUNTU_SEED_SIZE: 1500M

prepare: |
    tests.pkgs install efitools

    tests.nested build-image core
    tests.nested create-vm core
    remote.exec sudo snap install --devmode test-snapd-efitools
    remote.exec sudo test-snapd-efitools.tool efi-readvar -v dbx 2>&1 | tee efi-dbx-state-initial.log
    # count how many entries we have in DBX initially, this should be identical
    # across UC20-UC24+ systems since we are using the same OVMF variables blob,
    # but on UC20 2 additional entries get added at runtime
    grep -c 'List ' efi-dbx-state-initial.log > initial-dbx-entries-count

    keys_dir="$(tests.nested get assets-path)/ovmf/secboot/"
    # generate 3 dbx updates
    MYGUID="11111111-0000-1111-0000-000000000000"
    for i in 1 2 3; do
        # generate a key
        openssl req -new -x509 -newkey rsa:2048 -subj "/CN=bad key $i/" \
            -keyout "bad-key-$i.key" -out "bad-key-$i.crt" -days 3650 -nodes -sha256
        # convert to EFI sig list
        cert-to-efi-sig-list -g $MYGUID "bad-key-$i.crt" "bad-key-$i.esl"
        # and sign as an update for appending
        sign-efi-sig-list -a -c "$keys_dir/KEK.crt" -k "$keys_dir/KEK.key" dbx \
            "bad-key-$i.esl" "dbx-$i-update.auth"
    done


execute: |
    echo "Establish initial state"
    remote.exec sudo cat /var/lib/snapd/device/fde/boot-chains > boot-chains-before.json
    reseal_count_start="$(jq -r '.["reseal-count"]' < boot-chains-before.json )"

    fetch_and_check_reseal_count_equal() {
        local reseal_count_now
        remote.exec sudo cat /var/lib/snapd/device/fde/boot-chains > boot-chains.json
        reseal_count_now="$(jq -r '.["reseal-count"]' < boot-chains.json )"
        test "$reseal_count_now" = "$1"
    }

    echo "Smoke test action 'startup' without prior prepare call"
    echo '{"action":"efi-secureboot-update-startup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > startup-smoke.out

    fetch_and_check_reseal_count_equal "$reseal_count_start"

    echo "Smoke test action 'cleanup' without prior prepare call"
    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > cleanup-smoke.out

    fetch_and_check_reseal_count_equal "$reseal_count_start"

    echo "Attempt to 'prepare' with invalid data"
    # fails with invalid data
    update_payload_invalid="$(echo "foobar" | base64 -w0)"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload_invalid\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare-invalid.out

    fetch_and_check_reseal_count_equal "$reseal_count_start"

    jq -r .result.message < prepare-invalid.out | \
        MATCH "cannot perform initial reseal of keys for DBX update: cannot add EFI secure boot and boot manager policy profiles"

    echo "Attempt a valid 'prepare' request"
    # succeeds with correct update payload
    update_payload="$(base64 -w0 dbx-1-update.auth)"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out

    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    # there should have been a reaseal now
    fetch_and_check_reseal_count_equal "$((reseal_count_start + 1))"

    echo "Attempt a valid 'prepare' request, thus causing a conflict"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare-conflict.out

    jq -r .result.message < prepare-conflict.out | \
        MATCH "cannot notify of update prepare: cannot start a new DBX update when conflicting actions are in progress"

    # reseal count unchanged
    fetch_and_check_reseal_count_equal "$((reseal_count_start + 1))"

    echo "Complete the request with a 'cleanup' call"
    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > cleanup-happy.out

    # which caused reseal
    fetch_and_check_reseal_count_equal "$((reseal_count_start + 2))"
    remote.exec snap change --last=fde-efi-secureboot-db-update | MATCH 'Done .* Reseal after external EFI DBX update'

    echo "Attempt a valid 'prepare' request"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 3))"

    echo "Which gets aborted due to external request"
    echo '{"action":"efi-secureboot-update-startup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > startup.out

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 4))"
    remote.exec snap change --last=fde-efi-secureboot-db-update > snap-change-abort.out
    MATCH 'Error .* Reseal after external EFI DBX update' < snap-change-abort.out
    MATCH 'Undone .* Prepare for external EFI DBX update' < snap-change-abort.out

    echo "Attempt a valid 'prepare' request, followed by abort"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 5))"

    echo "Which gets aborted explicitly"
    remote.exec sudo snap abort --last=fde-efi-secureboot-db-update
    # snap watch will wait for change to complete, but exits with an error if
    # the change is failed/undone like the one here
    remote.exec sudo snap watch --last=fde-efi-secureboot-db-update || true

    remote.exec snap change --last=fde-efi-secureboot-db-update > snap-change-abort-explicit.out
    MATCH 'Hold .* Reseal after external EFI DBX update' < snap-change-abort-explicit.out
    MATCH 'Undone .* Prepare for external EFI DBX update' < snap-change-abort-explicit.out

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 6))"

    #
    # real DBX update, with reboot between prepare and cleanup
    #

    echo "Attempt a valid 'prepare' request, followed by a DBX update and then a reboot"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Done .* Prepare for external EFI DBX update'
    remote.exec snap change --last=fde-efi-secureboot-db-update | \
        MATCH 'Do .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 7))"

    echo "Update content of DBX"
    initial_dbx_entries_count="$(cat initial-dbx-entries-count)"
    # get initial state of all variables
    remote.exec sudo test-snapd-efitools.tool efi-readvar 2>&1 | tee efi-vars.log
    remote.push dbx-1-update.auth
    remote.exec "sudo chattr -i /sys/firmware/efi/efivars/dbx-*"
    # update dbx
    remote.exec sudo test-snapd-efitools.tool efi-readvar -v dbx 2>&1 | tee efi-dbx-before.log
    # expecting no additional entries in the list
    grep -c 'List ' efi-dbx-before.log | MATCH "$initial_dbx_entries_count"
    remote.exec sudo test-snapd-efitools.tool efi-updatevar -a -f dbx-1-update.auth dbx
    remote.exec sudo test-snapd-efitools.tool efi-readvar -v dbx 2>&1 | tee efi-dbx-after.log
    # expecting one additional entry in the list
    grep -c 'List ' efi-dbx-after.log | MATCH "$((initial_dbx_entries_count + 1))"

    # reboot
    boot_id="$( tests.nested boot-id )"
    remote.exec "sudo reboot" || true
    remote.wait-for reboot "${boot_id}"

    # the system should come up
    remote.exec "snap list"

    echo "Completed with a 'cleanup request'"
    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > cleanup.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | MATCH 'Done .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 8))"

    #
    # real DBX update, with reboot after completing the prepare/cleanup cycle
    #

    echo "Another DBX update with snapd notification, followed by a reboot"
    update_payload_2="$(base64 -w0 dbx-2-update.auth)"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload_2\"}" | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > prepare.out
    jq -r .status < prepare.out | MATCH "OK"

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 9))"

    remote.push dbx-2-update.auth
    remote.exec "sudo chattr -i /sys/firmware/efi/efivars/dbx-*"
    # update dbx
    remote.exec sudo test-snapd-efitools.tool efi-readvar -v dbx 2>&1 | tee efi-dbx-before-2.log
    # one additional entry from previous scenario
    grep -c 'List ' efi-dbx-before-2.log | MATCH "$((initial_dbx_entries_count + 1))"
    remote.exec sudo test-snapd-efitools.tool efi-updatevar -a -f dbx-2-update.auth dbx
    remote.exec sudo test-snapd-efitools.tool efi-readvar -v dbx 2>&1 | tee efi-dbx-after-2.log
    # and one more, 2 in total
    grep -c 'List ' efi-dbx-after-2.log | MATCH "$((initial_dbx_entries_count + 2))"

    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' /v2/system-secureboot" > cleanup.out
    jq -r .status < prepare.out | MATCH "OK"
    remote.exec snap change --last=fde-efi-secureboot-db-update | MATCH 'Done .* Reseal after external EFI DBX update'

    fetch_and_check_reseal_count_equal "$((reseal_count_start + 10))"

    # reboot
    boot_id="$( tests.nested boot-id )"
    remote.exec "sudo reboot" || true
    remote.wait-for reboot "${boot_id}"

    # the system should come up
    remote.exec "snap list"

    #
    # real DBX update without notifying snapd, stops asking for recovery key during boot
    #

    echo "Push a DBX update without notifying snapd, which should result in requesting a recovery key on boot"

    remote.push dbx-3-update.auth
    remote.exec "sudo chattr -i /sys/firmware/efi/efivars/dbx-*"
    remote.exec sudo test-snapd-efitools.tool efi-readvar -v dbx 2>&1 | tee efi-dbx-before-3.log
    # 2 entries based on the previous updates
    grep -c 'List ' efi-dbx-before-3.log | MATCH "$((initial_dbx_entries_count + 2))"
    remote.exec sudo test-snapd-efitools.tool efi-updatevar -a -f dbx-3-update.auth dbx
    remote.exec sudo test-snapd-efitools.tool efi-readvar -v dbx 2>&1 | tee efi-dbx-after-3.log
    # a new key appeared as well
    grep -c 'List ' efi-dbx-after-3.log | MATCH "$((initial_dbx_entries_count + 3))"

    # get the recovery key first
    recovery_key=$(remote.exec "sudo snap recovery --show-keys" | sed 's/^recovery: *//')

    boot_id="$(tests.nested boot-id)"
    remote.exec "sudo reboot" || true

    sent_recovery=0
    for (( i=0 ; i < 100 ; i++ )); do
      if [ "${sent_recovery}" -lt "$(tests.nested get serial-log | grep -c "Please enter the recovery key for volume")" ]; then
        sent_recovery=$((sent_recovery+1))
        echo "${recovery_key}" | nc -q 0 127.0.0.1 7777
        break
      fi
      echo "-- still trying"
      sleep 10
    done

    test "${sent_recovery}" -gt 0

    remote.wait-for reboot "$boot_id"
    remote.exec "snap list"
    remote.exec "sudo journalctl -b0" | MATCH "successfully activated encrypted device .* using a fallback activation method"
