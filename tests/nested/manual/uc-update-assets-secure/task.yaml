summary: Update boot assets through gadgets in secure boot

details: |
  Check that Ubuntu Core image boots properly with updated boot assets
  through gadget in secure boot

systems: [ubuntu-2*]

environment:
  NESTED_ENABLE_SECURE_BOOT: true

  UPDATE_BOOT/both: true
  UPDATE_SEED/both: true

  UPDATE_BOOT/seed: false
  UPDATE_SEED/seed: true

  UPDATE_BOOT/boot: true
  UPDATE_SEED/boot: false

  NESTED_IMAGE_ID: "update-grub-${UPDATE_SEED}-${UPDATE_BOOT}"

prepare: |
  snap install yq

  CHANNEL="$(tests.nested show version)/edge"
  snap download --basename=pc --channel="${CHANNEL}" pc
  unsquashfs -d pc pc.snap
  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

  # Save the shim before resigning
  cp pc/shim.efi.signed shim.efi.signed

  # Repack pc gadget for the initial image
  tests.nested secboot-sign file pc/shim.efi.signed "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  tests.nested secboot-sign file pc/grubx64.efi "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  old_shim_sha="$(sha256sum pc/shim.efi.signed | sed "s/ .*//")"
  old_grub_sha="$(sha256sum pc/grubx64.efi | sed "s/ .*//")"
  snap pack pc "$(tests.nested get extra-snaps-path)"

  # Remove signatures
  cp shim.efi.signed shim.efi
  tests.nested secboot-remove-signature shim.efi

  # Add a different vendor certificate
  openssl req -new -x509 -newkey rsa:2048 -subj "/CN=new vendor certificate/" -keyout new-cert.key -out new-cert.crt -days 3650 -nodes -sha256
  openssl x509 -outform der -in new-cert.crt -out new-cert
  python3 generate_vendor_cert_section.py new-section new-cert
  objcopy --update-section .vendor_cert=new-section shim.efi shim.efi.out

  # Sign modified shim
  cp shim.efi.out pc/shim.efi.signed
  tests.nested secboot-sign file pc/shim.efi.signed "${SNAKEOIL_KEY}" "${SNAKEOIL_CERT}"

  if [ "${UPDATE_SEED}" = true ]; then
    # Resign grub with new vendor key
    tests.nested secboot-sign file pc/grubx64.efi "new-cert.key" "new-cert.crt"
  else
    # If shim is not installed in seed, then we need to keep the snakeoil signature
    tests.nested secboot-sign file pc/grubx64.efi "${SNAKEOIL_KEY}" "${SNAKEOIL_CERT}"
  fi

  new_shim_sha="$(sha256sum pc/shim.efi.signed | sed "s/ .*//")"
  new_grub_sha="$(sha256sum pc/grubx64.efi | sed "s/ .*//")"

  if [ "${UPDATE_SEED}" = true ]; then
    yq -i '(.volumes.pc.structure[] | select(.role == "system-seed") | .update.edition) |= . + 1' pc/meta/gadget.yaml
  fi
  if [ "${UPDATE_BOOT}" = true ]; then
    yq -i '(.volumes.pc.structure[] | select(.role == "system-boot") | .update.edition) |= . + 1' pc/meta/gadget.yaml
  fi

  snap pack pc --filename=pc_2.snap

  cat <<EOF >>expected-before
  ${old_shim_sha} */boot/efi/EFI/boot/bootx64.efi
  ${old_grub_sha} */boot/efi/EFI/boot/grubx64.efi
  EOF
  if [ "${UPDATE_SEED}" = true ]; then
    cat <<EOF >>expected-after
  ${new_shim_sha} */boot/efi/EFI/boot/bootx64.efi
  ${new_grub_sha} */boot/efi/EFI/boot/grubx64.efi
  EOF
  else
    cat <<EOF >>expected-after
  ${old_shim_sha} */boot/efi/EFI/boot/bootx64.efi
  ${old_grub_sha} */boot/efi/EFI/boot/grubx64.efi
  EOF
  fi

  cat <<EOF >>expected-before
  ${old_grub_sha} */run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
  EOF
  if [ "${UPDATE_BOOT}" = true ]; then
    cat <<EOF >>expected-after
  ${new_grub_sha} */run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
  EOF
  else
    cat <<EOF >>expected-after
  ${old_grub_sha} */run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
  EOF
  fi

  tests.nested build-image core
  tests.nested create-vm core

  remote.exec systemctl --wait is-system-running || true
  remote.wait-for snap-command
  remote.exec "sudo snap wait system seed.loaded"

execute: |
  remote.exec "sha256sum -c" <expected-before

  remote.push pc_2.snap
  boot_id="$(tests.nested boot-id)"

  REMOTE_CHG_ID="$(remote.exec "sudo snap install --no-wait --dangerous pc_2.snap")"
  remote.wait-for reboot "${boot_id}"
  remote.exec sudo snap watch "$REMOTE_CHG_ID"

  remote.exec "sha256sum -c" <expected-after
