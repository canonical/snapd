summary: verify a UC20 to UC22 remodel

details: |
    This test verifies remodeling from UC20 to UC22 works. Once the remodeling
    is done and the machine boots into UC22 the test verifies that recover system
    is usable and there should be no core20 since the new UC22 is seeded.

# the test may be unstable as UC22 is effectively a work-in-progress thing, and
# the model in question uses latest/edge of core22 and 22/edge of pc and
# pc-kernel snaps

systems: [ubuntu-20.04-64]

environment:
  NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/valid-for-testing-pc-{VERSION}.model
  # TODO: disable TPM for now and investigate why the system cannot be booted
  # after remodel completes
  NESTED_ENABLE_TPM: false
  NESTED_ENABLE_SECURE_BOOT: false
  # we need pc/pc-kernel/core20 from the store, such that they get properly
  # refreshed when doing a UC20 to UC22 remodel
  NESTED_REPACK_KERNEL_SNAP: false
  NESTED_REPACK_GADGET_SNAP: false
  NESTED_REPACK_BASE_SNAP: false

prepare: |
    tests.nested build-image core
    tests.nested create-vm core

execute: |
    # shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"

    boot_id="$(tests.nested boot-id)"
    remote.exec snap model |MATCH 'model +my-model$'

    # XXX: recovery system label is based on a date; we may end up with a
    # different label if the remodel runs around midnight; the label will
    # conflict with an existing system label
    label_base=$(remote.exec "date '+%Y%m%d'")
    label="${label_base}-1"

    # wait until device is initialized and has a serial
    remote.wait-for device-initialized

    echo "Remodel to UC22"
    remote.push "$TESTSLIB/assertions/valid-for-testing-pc-22-from-20.model"
    REMOTE_CHG_ID="$(remote.exec sudo snap remodel --no-wait valid-for-testing-pc-22-from-20.model)"
    test -n "$REMOTE_CHG_ID"
    # very long retry wait for the change to be in stable state, once it's
    # stable it does not mean that the change was successful yet
    retry -n 100 --wait 5 sh -c "remote.exec sudo snap changes | grep -E '^${REMOTE_CHG_ID}\s+(Done|Undone|Error)'"
    # check that now
    remote.exec sudo snap changes | grep -E "^${REMOTE_CHG_ID}\s+Done"

    # we should have rebooted a couple of times (at least twice for the recovery
    # system and the base), so boot-id should be different
    current_boot_id="$(tests.nested boot-id)"
    test "$boot_id" != "$current_boot_id"

    remote.exec sudo snap list pc | MATCH " 22/edge "
    remote.exec sudo snap list pc-kernel | MATCH " 22/edge "
    remote.exec sudo snap list core22 | MATCH "core22 "

    echo "Verify seed system with label $label"
    remote.exec "sudo cat /run/mnt/ubuntu-seed/systems/${label}/model" > model-from-seed.model
    MATCH core22 < model-from-seed.model
    NOMATCH core20 < model-from-seed.model

    echo "Verify that UC22 recover system is usable"
    boot_id="$(tests.nested boot-id)"
    remote.exec sudo snap reboot --recover "${label}" | MATCH 'Reboot into ".*" "recover" mode'
    remote.wait-for reboot "${boot_id}"
    # Verify we are in recover mode with the expected system label
    remote.exec 'sudo cat /proc/cmdline' | MATCH "snapd_recovery_mode=recover snapd_recovery_system=${label} "

    # we are in recover mode, so tools need to be set up again
    nested_prepare_tools

    remote.wait-for snap-command
    # there should be no core20 since the seed is UC22
    remote.exec sudo snap list | NOMATCH core20

    boot_id="$(tests.nested boot-id)"
    echo "And back to run mode"
    remote.exec "sudo snap wait system seed.loaded"
    remote.exec sudo snap reboot --run | MATCH 'Reboot into "run" mode.'
    remote.wait-for reboot "${boot_id}"
    remote.exec 'sudo cat /proc/cmdline' | MATCH "snapd_recovery_mode=run "
