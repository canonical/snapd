summary: Ensure that a remodel can be completed when a panic occurs during the process

details: |
    The test checks that if a fault is injected during a remodel,
    then the change continues an is completed with a predictable outcome.

systems: [ubuntu-2*]

environment:
    NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/valid-for-testing-pc-{VERSION}.model
    NESTED_ENABLE_TPM: true
    NESTED_ENABLE_SECURE_BOOT: true
    NESTED_BUILD_SNAPD_FROM_CURRENT: true

    TAG/gadget_panic_remodel_boot_assets: remodel-boot-assets
    FAULT/gadget_panic_remodel_boot_assets: panic
    STATUS/gadget_panic_remodel_boot_assets: Done
    TAG/gadget_reboot_remodel_boot_assets: remodel-boot-assets
    FAULT/gadget_reboot_remodel_boot_assets: reboot
    STATUS/gadget_reboot_remodel_boot_assets: Error
    TAG/kernel_panic_remodel_boot_assets: remodel-boot-assets
    FAULT/kernel_panic_remodel_boot_assets: panic
    STATUS/kernel_panic_remodel_boot_assets: Done
    TAG/kernel_reboot_remodel_boot_assets: remodel-boot-assets
    FAULT/kernel_reboot_remodel_boot_assets: reboot
    STATUS/kernel_reboot_remodel_boot_assets: Error

prepare: |
    tests.nested build-image core
    tests.nested create-vm core

    remote.wait-for device-initialized

    # automatically cleaned up in restore
    echo "Inject a $FAULT on $TAG"
    cat <<EOF > fault-inject.conf
    [Service]
    Environment=SNAPPY_TESTING=1
    Environment=SNAPD_FAULT_INJECT=$TAG:$FAULT
    EOF

    echo "Wait for the system to be seeded first"
    remote.exec "sudo snap wait system seed.loaded"

    remote.push fault-inject.conf
    remote.exec "sudo mkdir -p /etc/systemd/system/snapd.service.d"
    remote.exec "sudo cp -v fault-inject.conf /etc/systemd/system/snapd.service.d/"
    remote.exec "sudo systemctl daemon-reload"
    remote.exec "sudo systemctl restart snapd.service"

execute: |
    VERSION="$(tests.nested show version)"
    SNAP=
    REBOOT=false
    SECOND_REBOOT=false

    if [ "$FAULT" = reboot ]; then
        REBOOT=true
    fi

    case "$SPREAD_VARIANT" in
        gadget_*)
            SNAP=pc
            ;;
        kernel_*)
            SNAP=pc-kernel
            if [ "$FAULT" = reboot ]; then
                SECOND_REBOOT=true
            else
                REBOOT=true
            fi
            ;;
        *)
            echo "scenario no supported: $SPREAD_VARIANT"
            exit 1
            ;;
    esac
        
    # Remodel
    boot_id="$(tests.nested boot-id)"

    remote.push "$TESTSLIB/assertions/valid-for-testing-pc-revno-2-$VERSION.model"
    change_id="$(remote.exec sudo snap remodel --no-wait "valid-for-testing-pc-revno-2-$VERSION.model")"

    if [ "$REBOOT" = true ]; then
        remote.wait-for reboot "$boot_id"
        boot_id="$(tests.nested boot-id)"
    fi

    if [ "$SECOND_REBOOT" = true ]; then
        remote.wait-for reboot "$boot_id"
    fi

    echo "And snap remodel is completed"
    remote.exec "snap watch $change_id" || true
    # shellcheck disable=SC2016
    retry --wait 1 -n 300 --env "CHANGE_ID=$change_id" --env "SNAP=$SNAP" sh -c 'remote.exec snap changes | MATCH "${CHANGE_ID} .* (Done|Error) .*"'

    # Check if the fault was injected
    remote.exec "test -e /var/lib/snapd/faults/$TAG:$FAULT"

    if [ "$FAULT" = panic ]; then
        echo "Ensure the panic was injected and triggered stamp file is present"
        remote.exec "sudo journalctl -u snapd | grep -A 3 panic" > output
        MATCH "$TAG":$FAULT < output
        MATCH "osutil.injectFault" < output
    fi

    FINAL_STATUS="$(remote.exec snap changes | grep -E "^$change_id .*" | awk ' {print $2} ')"

    [ "$FINAL_STATUS" = "$STATUS" ]
    if [ "$FINAL_STATUS" = Error ]; then
        echo "Ensure the remodel was not done"
        not remote.exec "snap list hello-world"
    else
        echo "Ensure the remodel was done"
        remote.exec "snap list hello-world"
    fi
