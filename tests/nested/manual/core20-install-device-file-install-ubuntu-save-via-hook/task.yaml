summary: Verify that ubuntu-save is available during install-device hook with specific device

details: |
    This test verifies that the ubuntu-save partition is available during the install-device
    hook and that it correctly exposes the SNAP_SAVE_DATA environment variable. We use a simple
    gadget that contains an install-device hook, which just writes a few files to the path
    pointed to by SNAP_SAVE_DATA. It verifies we can create a file and a folder.

systems: [ubuntu-2*]

environment:
    # use snapd from the spread run so that we have testkeys trusted in the
    # snapd run
    NESTED_BUILD_SNAPD_FROM_CURRENT: true

    # use secure boot and TPM to enable encryption
    NESTED_ENABLE_TPM: true
    NESTED_ENABLE_SECURE_BOOT: true

    # don't use cloud-init it doesn't work with grade secured
    NESTED_USE_CLOUD_INIT: false

    # sign all the snaps we build for the image with fakestore
    NESTED_SIGN_SNAPS_FAKESTORE: true

    # use the testrootorg auto-import assertion
    NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/developer1-{VERSION}-auto-import.assert
    NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/developer1-{VERSION}-secured.model

    # for the fake store
    NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
    NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

    # unset this otherwise ubuntu-image complains about overriding the channel for
    # a model with grade higher than dangerous when building the image
    NESTED_CORE_CHANNEL: ""

prepare: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # install pre-reqs which we need to adjust various bits
    snap install jq remarshal
    tests.cleanup defer snap remove remarshal
    tests.cleanup defer snap remove jq

    # Setup the fake-store for ubuntu-image to use when creating our core image.
    # We immediately tear down the staging store, to make sure snapd is not pointed
    # towards this once we invoke ubuntu-image. 
    # We also need to point NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL towards the newly
    # setup fake-store to actually have it use it.
    "$TESTSTOOLS"/store-state setup-fake-store "$NESTED_FAKESTORE_BLOB_DIR"
    "$TESTSTOOLS"/store-state teardown-staging-store

    echo Expose the needed assertions through the fakestore
    cp "$TESTSLIB"/assertions/developer1.account "$NESTED_FAKESTORE_BLOB_DIR/asserts"
    cp "$TESTSLIB"/assertions/developer1.account-key "$NESTED_FAKESTORE_BLOB_DIR/asserts"

    KEY_NAME=$(tests.nested download snakeoil-key)
    SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
    SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

    # Get the nested system version
    VERSION="$(tests.nested show version)"

    echo "Grab and prepare the gadget snap"
    snap download --basename=pc --channel="$VERSION/edge" pc
    unsquashfs -d pc-gadget pc.snap

    echo "Sign the shim binary"
    tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

    echo "Add the install-device and prepare-device hooks"
    mkdir -p pc-gadget/meta/hooks
    cp install-device pc-gadget/meta/hooks/install-device
    cp prepare-device pc-gadget/meta/hooks/prepare-device

    echo "Add the extra hooks definition to the snap.yaml"
    # convert our yaml files to json (yaml is easier to write and maintain in VCS)
    yaml2json < pc-gadget/meta/snap.yaml | tee pc-gadget/meta/snap.json > /dev/null
    yaml2json < snap-yaml-extras.yaml | tee snap-yaml-extras.json > /dev/null
    # slurp our two json files together into one json document, then convert 
    # back to yaml and write out to the snap.yaml in the unpacked gadget snap
    jq -s '.[0] * .[1]' <(cat snap-yaml-extras.json) <(cat pc-gadget/meta/snap.json) | json2yaml | tee pc-gadget/meta/snap.yaml

    # delay all refreshes for a week from now, as otherwise refreshes for our 
    # snaps (which are asserted by the testrootorg authority-id) may happen, which
    # will break things because the signing keys won't match, etc. and 
    # specifically snap-bootstrap in the kernel snap from the store won't trust
    # the seed keys to unlock the encrypted data partition in the initramfs
    sed defaults.yaml -e "s/HOLD-TIME/$(date --date="next week" +%Y-%m-%dT%H:%M:%S%:z)/" >> \
      pc-gadget/meta/gadget.yaml

    snap pack pc-gadget/ "$(tests.nested get extra-snaps-path)"

    # start fake device svc
    systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

    tests.nested build-image core
    tests.nested create-vm core

restore: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # stop fake device svc
    systemctl stop fakedevicesvc

    "$TESTSTOOLS"/store-state teardown-fake-store "$NESTED_FAKESTORE_BLOB_DIR"

execute: |
    if [ "$TRUST_TEST_KEYS" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # wait for the initialize device task to be done
    retry -n 200 --wait 1 sh -c "remote.exec snap changes | MATCH 'Done.*Initialize device'"

    VERSION="$(tests.nested show version)"

    echo "Check we have the right model from snap model"
    remote.exec "sudo snap model --verbose" | MATCH "model:\s+testkeys-snapd-secured-core-$VERSION-amd64"
    remote.exec "sudo snap model --verbose" | MATCH "grade:\s+secured"
    remote.exec "sudo snap model --verbose --serial" | MATCH "serial:\s+7777"

    echo "Check that the directories have the right permissions"
    remote.exec "stat /var/lib/snapd/save/snap/ -c %a" | MATCH 755
    remote.exec "stat /var/lib/snapd/save/snap/pc -c %a" | MATCH 755
    remote.exec "stat /var/lib/snapd/save/snap/pc/certs -c %a" | MATCH 755

    echo "Check that the files from install-device were installed"
    remote.exec "cat /var/lib/snapd/save/snap/pc/my-data.conf" | MATCH '# empty configuration file'
    remote.exec "cat /var/lib/snapd/save/snap/pc/certs/myorg.cert" | MATCH '# insert certificate'
