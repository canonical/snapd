summary: create a recovery system with a kernel module component and reboot into it

details: |
  This test creates a recovery system with a kernel module component and
  validates that the newly created system can be rebooted into.

systems: [-ubuntu-1*, -ubuntu-20*, -ubuntu-22*]

environment:
  MODEL_JSON: $TESTSLIB/assertions/test-snapd-component-recovery-system-pc-24.json
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true
  NESTED_BUILD_SNAPD_FROM_CURRENT: true
  NESTED_REPACK_GADGET_SNAP: true
  NESTED_REPACK_KERNEL_SNAP: true
  NESTED_REPACK_BASE_SNAP: true
  NESTED_REPACK_FOR_FAKESTORE: true
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_SIGN_SNAPS_FAKESTORE: true
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

prepare: |
    if [ "${TRUST_TEST_KEYS}" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    snap install test-snapd-swtpm --edge

    "${TESTSTOOLS}/store-state" setup-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"

    gendeveloper1 sign-model < "${MODEL_JSON}" > model.assert

    cp "${TESTSLIB}/assertions/testrootorg-store.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp model.assert "${NESTED_FAKESTORE_BLOB_DIR}/asserts"

    tests.nested prepare-essential-snaps

    export SNAPPY_FORCE_API_URL="${NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL}"
    ubuntu-image snap --channel edge --image-size 10G ./model.assert

    image_dir=$(tests.nested get images-path)
    image_name=$(tests.nested get image-name core)
    cp ./pc.img "${image_dir}/${image_name}"
    tests.nested configure-default-user

    # run the fake device service too, so that the device can be initialised
    systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

    tests.nested build-image core
    tests.nested create-vm core

    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    wait_for_first_boot_change

    remote.exec 'sudo systemctl stop snapd snapd.socket'

    remote.exec 'sudo cat /var/lib/snapd/state.json' | gojq '.data.auth.device."session-macaroon"="fake-session"' > state.json
    remote.push state.json
    remote.exec 'sudo mv state.json /var/lib/snapd/state.json'
    remote.exec 'sudo systemctl start snapd snapd.socket'

restore: |
    systemctl stop fakedevicesvc
    "${TESTSTOOLS}/store-state" teardown-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"

execute: |
  function post_json_data() {
    route=$1
    template=$2
    shift 2

    # shellcheck disable=SC2059
    response=$(printf "${template}" "$@" | remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' ${route}")
    if ! gojq -e .change <<< "${response}"; then
      echo "could not get change id from response: ${response}"
      false
    fi
  }

  unsquashfs "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel.snap"
  sed -i -e '/^version/ s/$/-with-comps/' squashfs-root/meta/snap.yaml
  snap pack --filename=pc-kernel-with-comps.snap ./squashfs-root
  "${TESTSTOOLS}"/build_kernel_with_comps.sh mac80211_hwsim wifi-comp pc-kernel-with-comps.snap

  kernel_id="pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza"

  # bump the available kernel version in the fake store
  "${TESTSTOOLS}"/store-state make-snap-installable --noack \
    --revision 2 \
    "${NESTED_FAKESTORE_BLOB_DIR}" \
    ./pc-kernel-with-comps.snap \
    "${kernel_id}"

  "${TESTSTOOLS}"/store-state make-component-installable --noack \
    --snap-revision 2 \
    --component-revision 1 \
    --snap-id "${kernel_id}" \
    "${NESTED_FAKESTORE_BLOB_DIR}" \
    ./pc-kernel+wifi-comp.comp

  boot_id="$(tests.nested boot-id)"

  # refresh the kernel snap and install the wifi-comp component
  change_id=$(remote.exec "sudo snap refresh --no-wait pc-kernel+wifi-comp")
  remote.wait-for reboot "${boot_id}"
  remote.exec "snap watch ${change_id}"

  remote.exec "snap components pc-kernel" | sed 1d | MATCH 'pc-kernel\+wifi-comp\s+installed'

  # make sure that the kernel module got installed and is loaded
  remote.exec sudo modprobe mac80211_hwsim
  remote.exec ip link show wlan0

  boot_id="$(tests.nested boot-id)"
  change_id=$(post_json_data /v2/systems '{"action": "create", "label": "new-system", "mark-default": true, "test-system": true}')
  remote.wait-for reboot "${boot_id}"

  remote.wait-for snap-command
  remote.exec snap watch "${change_id}"

  remote.exec 'test -d /run/mnt/ubuntu-seed/systems/new-system'
  remote.exec 'sudo cat /var/lib/snapd/modeenv' > modeenv
  MATCH 'current_recovery_systems=.*,new-system$' < modeenv
  MATCH 'good_recovery_systems=.*,new-system$' < modeenv

  remote.exec 'sudo snap recovery' | awk '$1 == "new-system" { print $4 }' | MATCH 'default-recovery'

  boot_id="$(tests.nested boot-id)"
  remote.exec "sudo snap reboot --recover" || true
  remote.wait-for reboot "${boot_id}"

  remote.wait-for snap-command

  #shellcheck source=tests/lib/core-config.sh
  . "$TESTSLIB"/core-config.sh
  wait_for_first_boot_change

  remote.exec "sudo snap wait system seed.loaded"

  boot_id="$(tests.nested boot-id)"

  remote.exec 'cat /proc/cmdline' | MATCH 'snapd_recovery_mode=recover'
  remote.exec 'sudo cat /var/lib/snapd/modeenv' > modeenv
  MATCH 'mode=recover' < modeenv
  MATCH 'recovery_system=new-system' < modeenv

  # this at least indicates that we can have components in the recovery system,
  # but kernel module components are not yet fully functional
  remote.exec "snap components pc-kernel" | sed 1d | MATCH 'pc-kernel\+wifi-comp\s+installed'
  remote.exec "readlink /snap/pc-kernel/components/2/wifi-comp" | MATCH "\.\./mnt/wifi-comp/1"

  # TODO:COMPS: snap-bootstrap needs to be modified to mount the kernel modules
  # from /var/lib/snapd/kernel, rather than from the kernel snap directly. once
  # that is done, then the module should be able to be loaded while in recover
  # mode
  not remote.exec sudo modprobe mac80211_hwsim
