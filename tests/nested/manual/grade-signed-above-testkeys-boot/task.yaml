summary: Test that snapd with testkeys on UC20 can boot a model with grade signed.

systems: [ubuntu-20.04-64]

environment:
  # use tpm + secure boot to get full disk encryption, this is explicitly needed
  # for grade: secured
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true

  # use snapd from the spread run so that we have testkeys trusted in the snapd
  # run
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

  # don't use cloud-init, that will be a separate test, we only use sys-user
  # assertions to create the user for this test
  NESTED_USE_CLOUD_INIT: false

  # sign all the snaps we build for the image with fakestore
  NESTED_SIGN_SNAPS_FAKESTORE: true

  # use the testrootorg auto-import assertion
  # TODO: commit the Go code used to create this assertion from the json file
  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/developer1-auto-import.assert

  # two variants, for signed and secured grades
  MODEL_GRADE/secured: secured
  MODEL_GRADE/signed: signed

  NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/developer1-20-${MODEL_GRADE}.model
  NESTED_IMAGE_ID: testkeys-${MODEL_GRADE}

  # for the fake store
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

  # unset this otherwise ubuntu-image complains about overriding the channel for
  # a model with grade higher than dangerous when building the image
  NESTED_CORE_CHANNEL: ""

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  #shellcheck source=tests/lib/store.sh
  . "$TESTSLIB"/store.sh

  # setup the fakestore, but don't use it for our snapd here on the host VM, so
  # tear down the staging_store immediately afterwards so that only the SAS is 
  # running and our snapd is not pointed at it, ubuntu-image is the only thing 
  # that actually needs to use the fakestore, and we will manually point it at
  # the fakestore below using NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL
  setup_fake_store "$NESTED_FAKESTORE_BLOB_DIR"
  teardown_staging_store

  echo Expose the needed assertions through the fakestore
  cp "$TESTSLIB"/assertions/developer1.account "$NESTED_FAKESTORE_BLOB_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$NESTED_FAKESTORE_BLOB_DIR/asserts"

  # modify and repack gadget snap to add a defaults section and use our own
  # prepare-device hook to use the fakedevicesvc
  mkdir -p "$(nested_get_extra_snaps_path)"

  # Get the snakeoil key and cert for signing gadget assets (shim)
  KEY_NAME=$(nested_get_snakeoil_key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

  snap download --basename=pc --channel="20/edge" pc
  unsquashfs -d pc-gadget pc.snap

  # delay all refreshes for a week from now, as otherwise refreshes for our 
  # snaps (which are asserted by the testrootorg authority-id) may happen, which
  # will break things because the signing keys won't match, etc. and 
  # specifically snap-bootstrap in the kernel snap from the store won't trust
  # the seed keys to unlock the encrypted data partition in the initramfs
  sed defaults.yaml -e "s/HOLD-TIME/$(date --date="next week" +%Y-%m-%dT%H:%M:%S%:z)/" >> \
    pc-gadget/meta/gadget.yaml

  # TODO: enable this bit when things are ready to use a testkeys signed model
  # assertion
  # copy the prepare-device hook to use our fakedevicesvc
  # mkdir -p pc-gadget/meta/hooks/
  # cp prepare-device pc-gadget/meta/hooks/

  nested_secboot_sign_gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  snap pack pc-gadget/ "$(nested_get_extra_snaps_path)"
  rm -rf pc-gadget/

  rm -f "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

  # TODO: enable when ready
  # start fake device svc
  # #shellcheck disable=SC2148
  #  systemd-run --unit fakedevicesvc fakedevicesvc localhost:11029

  "$TESTSTOOLS"/nested-state build-image core
  "$TESTSTOOLS"/nested-state create-vm core

restore: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  # stop fake device svc
  # systemctl stop fakedevicesvc

  #shellcheck source=tests/lib/store.sh
  . "$TESTSLIB"/store.sh
  teardown_fake_store "$NESTED_FAKESTORE_BLOB_DIR"

execute: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  echo "Check we have the right model from snap model"
  nested_exec "sudo snap model --verbose" | MATCH "model:\s+testkeys-snapd-${MODEL_GRADE}-core-20-amd64"
  nested_exec "sudo snap model --verbose" | MATCH "grade:\s+${MODEL_GRADE}"

  # TODO: check that we got a serial assertion via the fakedevicesvc
  # for now we just don't get a serial assertion which is fine for the purposes
  # of this test
