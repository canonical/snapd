summary: Verify EFI DBX updates in a Core20+ system without FDE

details: |
    Check that the snapd APIs are effectively NOP when performing EFI DBX
    updates on a system without FDE.

systems: [ubuntu-2*]

environment:
    NESTED_ENABLE_TPM: false
    NESTED_ENABLE_SECURE_BOOT: false
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_UBUNTU_SEED_SIZE: 1500M

prepare: |
    tests.nested build-image core
    tests.nested create-vm core
    remote.exec "test ! -e /var/lib/snapd/device/fde"

execute: |
    # no FDE so actions are effectively NOP, even though actual request data is
    # checked for validity

    echo "Action 'startup' does not fail"
    echo '{"action":"efi-secureboot-update-startup"}' | \
        remote.exec "sudo snap debug api --fail -X POST -H 'Content-Type: application/json' /v2/system-secureboot"

    echo "Action 'cleanup' without prior prepare call, still successful"
    echo '{"action":"efi-secureboot-update-db-cleanup"}' | \
        remote.exec "sudo snap debug api --fail -X POST -H 'Content-Type: application/json' /v2/system-secureboot"

    echo "Attempt to 'prepare' with invalid data"
    # invalid DBX data, but the request is nonetheless properly structured
    update_payload_invalid="$(echo "foobar" | base64 -w0)"
    echo "{\"action\":\"efi-secureboot-update-db-prepare\",\"key-database\":\"DBX\",\"payload\":\"$update_payload_invalid\"}" | \
        remote.exec "sudo snap debug api --fail -X POST -H 'Content-Type: application/json' /v2/system-secureboot"
