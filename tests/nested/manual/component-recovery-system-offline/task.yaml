summary: |
  create a recovery system with a kernel module component via the offline API
  and reboot into it

details: |
  This test creates a recovery system with a kernel module component and
  validates that the newly created system can be rebooted into. The offline API
  is used, and we upload the snap and the component that are being used via an
  HTTP form.

systems: [-ubuntu-1*, -ubuntu-20*, -ubuntu-22*]

environment:
  MODEL_JSON: $TESTSLIB/assertions/test-snapd-component-recovery-system-pc-24.json
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true
  NESTED_BUILD_SNAPD_FROM_CURRENT: true
  NESTED_REPACK_GADGET_SNAP: true
  NESTED_REPACK_KERNEL_SNAP: true
  NESTED_REPACK_BASE_SNAP: true
  NESTED_REPACK_FOR_FAKESTORE: true
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_SIGN_SNAPS_FAKESTORE: true
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

prepare: |
    if [ "${TRUST_TEST_KEYS}" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    snap install test-snapd-swtpm --edge
    snap download test-snapd-curl --edge --basename=test-snapd-curl
    snap download core18 --basename=core18

    "${TESTSTOOLS}/store-state" setup-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"
    
    gendeveloper1 sign-model < "${MODEL_JSON}" > model.assert

    cp "${TESTSLIB}/assertions/testrootorg-store.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp model.assert "${NESTED_FAKESTORE_BLOB_DIR}/asserts"

    tests.nested prepare-essential-snaps

    "${TESTSTOOLS}"/store-state make-snap-installable --noack \
      "${NESTED_FAKESTORE_BLOB_DIR}" \
      ./test-snapd-curl.snap \
      'A8JphBoJIkstBYyclynYlOonHoVzD1lm'

    "${TESTSTOOLS}"/store-state make-snap-installable --noack \
      "${NESTED_FAKESTORE_BLOB_DIR}" \
      ./core18.snap \
      'CSO04Jhav2yK0uz97cr0ipQRyqg0qQL6'
      
    export SNAPPY_FORCE_API_URL="${NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL}"
    ubuntu-image snap --channel edge --image-size 10G ./model.assert

    image_dir=$(tests.nested get images-path)
    image_name=$(tests.nested get image-name core)
    cp ./pc.img "${image_dir}/${image_name}"
    tests.nested configure-default-user

    # run the fake device service too, so that the device can be initialised
    systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

    tests.nested build-image core
    tests.nested create-vm core

    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    wait_for_first_boot_change

    remote.exec 'sudo systemctl stop snapd snapd.socket'
    remote.exec 'sudo cat /var/lib/snapd/state.json' | gojq '.data.auth.device."session-macaroon"="fake-session"' > state.json
    remote.push state.json
    remote.exec 'sudo mv state.json /var/lib/snapd/state.json'
    remote.exec 'sudo systemctl start snapd snapd.socket'

restore: |
    systemctl stop fakedevicesvc
    "${TESTSTOOLS}/store-state" teardown-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"

execute: |
  function post_json_data() {
    route=$1
    template=$2
    shift 2

    # shellcheck disable=SC2059
    response=$(printf "${template}" "$@" | remote.exec "sudo snap debug api -X POST -H 'Content-Type: application/json' ${route}")
    if ! gojq -e .change <<< "${response}"; then
      echo "could not get change id from response: ${response}"
      false
    fi
  }

  unsquashfs "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel.snap"
  sed -i -e '/^version/ s/$/-with-comps/' squashfs-root/meta/snap.yaml
  snap pack --filename=pc-kernel-with-comps.snap ./squashfs-root
  "${TESTSTOOLS}"/build_kernel_with_comps.sh mac80211_hwsim wifi-comp pc-kernel-with-comps.snap

  kernel_id='pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza'

  # bump the available kernel version in the fake store
  "${TESTSTOOLS}"/store-state make-snap-installable --noack \
    --revision 2 \
    "${NESTED_FAKESTORE_BLOB_DIR}" \
    ./pc-kernel-with-comps.snap \
    "${kernel_id}"

  "${TESTSTOOLS}"/store-state make-component-installable --noack \
    --snap-revision 2 \
    --component-revision 1 \
    --snap-id "${kernel_id}" \
    "${NESTED_FAKESTORE_BLOB_DIR}" \
    ./pc-kernel+wifi-comp.comp

  remote.exec 'sudo snap install test-snapd-curl --devmode'

  snap_digest=$(openssl dgst -sha3-384 -binary < "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel-with-comps.snap" | basenc --base64url)
  component_digest=$(openssl dgst -sha3-384 -binary < "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel+wifi-comp.comp" | basenc --base64url)

  snap_revision="${NESTED_FAKESTORE_BLOB_DIR}/asserts/${snap_digest}.snap-revision"
  snap_resource_pair="${NESTED_FAKESTORE_BLOB_DIR}/asserts/${kernel_id},wifi-comp,1,2.snap-resource-pair"
  snap_resource_revision="${NESTED_FAKESTORE_BLOB_DIR}/asserts/${kernel_id},wifi-comp,${component_digest}.snap-resource-revision"
  cat "${snap_resource_revision}" <(echo) "${snap_resource_pair}" <(echo) "${snap_revision}" > bundle.assert

  remote.push bundle.assert
  remote.push "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel-with-comps.snap"
  remote.push "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel+wifi-comp.comp"

  remote.exec 'sudo snap set system store.access=offline'
  remote.exec 'sudo ip r d default'

  boot_id="$(tests.nested boot-id)"
  response=$(remote.exec "sudo test-snapd-curl.curl -X POST --unix-socket /run/snapd.socket -F 'action=create' -F 'label=new-system' -F 'assertion=<bundle.assert' -F 'snap=@pc-kernel-with-comps.snap' -F 'snap=@pc-kernel+wifi-comp.comp' -F 'test-system=true' -F 'mark-default=true' http://localhost/v2/systems")
  change_id=$(gojq -r .change <<< "${response}")
  remote.wait-for reboot "${boot_id}"

  remote.wait-for snap-command
  remote.exec snap watch "${change_id}"

  remote.exec 'test -d /run/mnt/ubuntu-seed/systems/new-system'
  remote.exec 'sudo cat /var/lib/snapd/modeenv' > modeenv
  MATCH 'current_recovery_systems=.*,new-system$' < modeenv
  MATCH 'good_recovery_systems=.*,new-system$' < modeenv

  remote.exec 'sudo snap recovery' | awk '$1 == "new-system" { print $4 }' | MATCH 'default-recovery'

  boot_id="$(tests.nested boot-id)"
  remote.exec 'sudo snap reboot --recover' || true
  remote.wait-for reboot "${boot_id}"

  remote.wait-for snap-command

  #shellcheck source=tests/lib/core-config.sh
  . "$TESTSLIB"/core-config.sh
  wait_for_first_boot_change

  remote.exec 'sudo snap wait system seed.loaded'

  boot_id="$(tests.nested boot-id)"

  remote.exec 'cat /proc/cmdline' | MATCH 'snapd_recovery_mode=recover'
  remote.exec 'sudo cat /var/lib/snapd/modeenv' > modeenv
  MATCH 'mode=recover' < modeenv
  MATCH 'recovery_system=new-system' < modeenv

  # this at least indicates that we can have components in the recovery system,
  # but kernel module components are not yet fully functional
  remote.exec 'snap components pc-kernel' | sed 1d | MATCH 'pc-kernel\+wifi-comp\s+installed'
  remote.exec 'readlink /snap/pc-kernel/components/2/wifi-comp' | MATCH '\.\./mnt/wifi-comp/1'

  # TODO:COMPS: snap-bootstrap needs to be modified to mount the kernel modules
  # from /var/lib/snapd/kernel, rather than from the kernel snap directly. once
  # that is done, then the module should be able to be loaded while in recover
  # mode
  not remote.exec sudo modprobe mac80211_hwsim
