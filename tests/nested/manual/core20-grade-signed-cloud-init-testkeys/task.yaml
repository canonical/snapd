summary: Test that UC2* with testkeys can boot a grade signed model with cloud-init.

details: |
    Check that Ubuntu Core can boot a grade signed model with cloud-init using testkeys.

systems: [ubuntu-2*]

environment:
  # use tpm + secure boot to get full disk encryption, this is explicitly needed
  # for grade: secured
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true

  # use snapd from the spread run so that we have testkeys trusted in the snapd
  # run
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

  # don't use cloud-init to create the user, we manually use cloud-init via
  # --param-cdrom in the test setup
  NESTED_USE_CLOUD_INIT: false

  # sign all the snaps we build for the image with fakestore
  NESTED_SIGN_SNAPS_FAKESTORE: true

  # use the testrootorg auto-import assertion
  # TODO: commit the Go code used to create this assertion from the json file
  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/developer1-{VERSION}-auto-import.assert
  NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/developer1-{VERSION}-signed.model

  # for the fake store
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

  # unset this otherwise ubuntu-image complains about overriding the channel for
  # a model with grade higher than dangerous when building the image
  NESTED_CORE_CHANNEL: ""

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  # setup the fakestore, but don't use it for our snapd here on the host VM, so
  # tear down the staging_store immediately afterwards so that only the SAS is 
  # running and our snapd is not pointed at it, ubuntu-image is the only thing 
  # that actually needs to use the fakestore, and we will manually point it at
  # the fakestore below using NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL
  "$TESTSTOOLS"/store-state setup-fake-store "$NESTED_FAKESTORE_BLOB_DIR"
  "$TESTSTOOLS"/store-state teardown-staging-store

  echo "Expose the needed assertions through the fakestore"
  cp "$TESTSLIB"/assertions/developer1.account "$NESTED_FAKESTORE_BLOB_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$NESTED_FAKESTORE_BLOB_DIR/asserts"

  # modify and repack gadget snap to add a defaults section and use our own
  # prepare-device hook to use the fakedevicesvc

  # Get the snakeoil key and cert for signing gadget assets (shim)
  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

  # Get the nested system version
  VERSION="$(tests.nested show version)"

  snap download --basename=pc --channel="$VERSION/edge" pc
  unsquashfs -d pc-gadget pc.snap

  # delay all refreshes for a week from now, as otherwise refreshes for our
  # snaps (which are asserted by the testrootorg authority-id) may happen, which
  # will break things because the signing keys won't match, etc. and 
  # specifically snap-bootstrap in the kernel snap from the store won't trust
  # the seed keys to unlock the encrypted data partition in the initramfs
  sed defaults.yaml -e "s/@HOLD-TIME@/$(date --date='next week' +%Y-%m-%dT%H:%M:%S%:z)/" >> \
    pc-gadget/meta/gadget.yaml

  # copy the prepare-device hook to use our fakedevicesvc
  mkdir -p pc-gadget/meta/hooks/
  cp prepare-device pc-gadget/meta/hooks/

  tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  snap pack pc-gadget/ "$(tests.nested get extra-snaps-path)"
  rm -rf pc-gadget/

  rm -f "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

  systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

  # first boot - legit NoCloud usage
  tests.nested build-seed "$TESTSLIB/cloud-init-seeds/normal-user" seed.iso cidata user-data meta-data

  # second boot - attacker drive
  tests.nested build-seed "$TESTSLIB/cloud-init-seeds/attacker-user" seed2.iso cidata user-data meta-data

  tests.nested build-image core
  # first boot will use seed1 to create the normal-user in addition to the 
  # system-user assertion
  tests.nested create-vm core --param-cdrom "-cdrom $(pwd)/seed.iso"

restore: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  # stop fake device svc
  systemctl stop fakedevicesvc

  "$TESTSTOOLS"/store-state teardown-fake-store "$NESTED_FAKESTORE_BLOB_DIR"

debug: |
  systemctl status fakedevicesvc || true

execute: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  # wait for the initialize device task to be done
  retry -n 200 --wait 1 sh -c "remote.exec snap changes | MATCH 'Done.*Initialize device'"

  echo "The initial cloud-init user was created"
  remote.exec "cat /var/lib/extrausers/passwd" | MATCH normal-user

  echo "And we can run things as the normal user"
  remote.exec --user normal-user --pass ubuntu "sudo true"

  echo "And we got a serial assertion from the fakestore"
  remote.exec "sudo snap model --verbose --serial" | MATCH "serial:\s+7777"

  echo "Waiting for snapd to react to cloud-init"
  retry --wait 1 -n 60 sh -c 'remote.exec sudo journalctl --no-pager -u snapd | MATCH "cloud-init reported"'

  echo "Ensuring that cloud-init got disabled after running"
  remote.exec "cloud-init status" | MATCH "status: disabled"
  remote.exec "test -f /etc/cloud/cloud-init.disabled"
  remote.exec "! test -f /etc/cloud/cloud.cfg.d/zzzz_snapd.cfg"

  # gracefully shutdown so that we don't have file corruption
  echo "Gracefully shutting down the nested VM to prepare a simulated attack"
  boot_id="$(tests.nested boot-id)"
  tests.nested vm stop

  # replace the seed.iso with the new attacker iso
  mv seed2.iso seed.iso

  echo "Restarting nested VM with attacker cloud-init CD-ROM drive"
  tests.nested vm start
  remote.wait-for reboot "${boot_id}"

  echo "The cloud-init attacker user was not created"
  remote.exec "cat /var/lib/extrausers/passwd" | NOMATCH attacker-user

  echo "cloud-init is still disabled"
  remote.exec "cloud-init status" | MATCH "status: disabled"
  remote.exec "test -f /etc/cloud/cloud-init.disabled"
  remote.exec "! test -f /etc/cloud/cloud.cfg.d/zzzz_snapd.cfg"
