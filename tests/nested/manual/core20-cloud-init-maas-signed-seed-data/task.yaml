summary: Test that UC2* can use cloud-init config on ubuntu-seed with grade signed.

details: |
  Verify that on Ubuntu Core 20+ it is possible to configure cloud-init on
  ubuntu-seed with grade signed. Check files have been copied depending on the variant
  and cloud-init is disabled after it is executed.

systems: [ubuntu-2*]

environment:
  # three variants
  # one with gadget that says maas
  GADGET_DATASOURCE/gadgetsaysmaas: maas
  # one that says explicitly no datasource
  GADGET_DATASOURCE/gadgetsaysnone: explicitly-none
  # and one that has no opinion (like the default pc gadget)
  GADGET_DATASOURCE/gadgetwithoutopinion: absent

  # use tpm + secure boot to get full disk encryption, this is explicitly needed
  # for grade: secured but is just nice to have for proof of conception with
  # grade signed too
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true

  # use snapd from the spread run so that we have testkeys trusted in the snapd
  # run
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

  # don't use cloud-init to create the user, we manually use cloud-init via
  # ubuntu-seed with MAAS style cloud-init config
  NESTED_USE_CLOUD_INIT: false

  # sign all the snaps we build for the image with fakestore
  NESTED_SIGN_SNAPS_FAKESTORE: true

  # use the testrootorg auto-import assertion
  # TODO: commit the Go code used to create this assertion from the json file
  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/developer1-{VERSION}-auto-import.assert

  NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/developer1-{VERSION}-signed.model

  # for the fake store
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

  # unset this otherwise ubuntu-image complains about overriding the channel for
  # a model with grade higher than dangerous when building the image
  NESTED_CORE_CHANNEL: ""

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  snap install remarshal jq
  tests.cleanup defer snap remove remarshal
  tests.cleanup defer snap remove jq

  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  # setup the fakestore, but don't use it for our snapd here on the host VM, so
  # tear down the staging_store immediately afterwards so that only the SAS is 
  # running and our snapd is not pointed at it, ubuntu-image is the only thing 
  # that actually needs to use the fakestore, and we will manually point it at
  # the fakestore below using NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL
  "$TESTSTOOLS"/store-state setup-fake-store "$NESTED_FAKESTORE_BLOB_DIR"
  "$TESTSTOOLS"/store-state teardown-staging-store

  echo "Expose the needed assertions through the fakestore"
  cp "$TESTSLIB"/assertions/developer1.account "$NESTED_FAKESTORE_BLOB_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$NESTED_FAKESTORE_BLOB_DIR/asserts"

  # modify and repack gadget snap to add a defaults section and use our own
  # prepare-device hook to use the fakedevicesvc

  # Get the snakeoil key and cert for signing gadget assets (shim)
  KEY_NAME=$(nested_get_snakeoil_key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

  # Get the nested system version
  VERSION="$(tests.nested show version)"

  # modify and repack gadget snap to add a defaults section and use our own
  # prepare-device hook to use the fakedevicesvc
  snap download --basename=pc --channel="$VERSION/edge" pc
  unsquashfs -d pc-gadget pc.snap

  # delay all refreshes for a week from now, as otherwise refreshes for our
  # snaps (which are asserted by the testrootorg authority-id) may happen, which
  # will break things because the signing keys won't match, etc. and 
  # specifically snap-bootstrap in the kernel snap from the store won't trust
  # the seed keys to unlock the encrypted data partition in the initramfs
  sed defaults.yaml -e "s/@HOLD-TIME@/$(date --date='next week' +%Y-%m-%dT%H:%M:%S%:z)/" >> \
    pc-gadget/meta/gadget.yaml

  # install the cloud.conf for the variant
  case "$GADGET_DATASOURCE" in 
    maas)
      cp gadget-says-maas.conf pc-gadget/cloud.conf
      ;;
    "explicitly-none")
      cp gadget-says-none.conf pc-gadget/cloud.conf
      ;;
    absent)
      # do nothing - no opinion from gadget.yaml about cloud-init, this is the
      # default case like with our published images using the pc/pi gadget snaps
      ;;
  esac

  # copy the prepare-device hook to use our fakedevicesvc
  mkdir -p pc-gadget/meta/hooks/
  cp prepare-device pc-gadget/meta/hooks/

  nested_secboot_sign_gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  snap pack pc-gadget/ "$(tests.nested get extra-snaps-path)"
  rm -rf pc-gadget/

  rm -f "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

  #shellcheck disable=SC2148
  systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

  tests.nested build-image core

  # now mount the image and add our cloud-init config to the image, which will
  # point cloud-init at MAAS, but we don't run MAAS here since that would be
  # fragile and slow, so instead the test will just check that we copied the 
  # right files
  img="$NESTED_IMAGES_DIR/$(nested_get_image_name core)"

  # meh this is inefficient but it is simpler than trying to handle variable 
  # arguments inside nested_add_file_to_image
  nested_add_file_to_image "$img" 50-cloudconfig-maas-cloud-config.cfg
  nested_add_file_to_image "$img" 50-cloudconfig-maas-datasource.cfg
  nested_add_file_to_image "$img" 50-cloudconfig-maas-reporting.cfg
  nested_add_file_to_image "$img" 50-cloudconfig-maas-ubuntu-sso.cfg
  nested_add_file_to_image "$img" 50-curtin-networking.cfg
  nested_add_file_to_image "$img" 50-cloudconfig-gce-unsupported-config.cfg

  # first boot will now copy the cloud-init config we put on ubuntu-seed to 
  # the run system, filtering it in the process
  tests.nested create-vm core

restore: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  systemctl stop fakedevicesvc

  "$TESTSTOOLS"/store-state teardown-fake-store "$NESTED_FAKESTORE_BLOB_DIR"

debug: |
  remote.exec "snap changes" || true
  remote.exec "snap tasks 1" || true
  remote.exec "snap tasks 2" || true

  remote.exec "cloud-init status --long" || true

execute: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  echo "Waiting for snapd to react to cloud-init"

  # due to a cascade of failures, nothing works correctly when nesting/combining
  # tests.nested with retry, so just give up entirely and manually copy all the
  # commands we want to run below to individual scripts and execute them by 
  # themselves, I literally probably cannot touch this code again without crying
  cat > /tmp/snapd-journal-match-script-disable-state.sh << 'EOF'
  #!/bin/bash -e
  sudo journalctl --no-pager -u snapd | MATCH "cloud-init reported to be in disabled state"
  EOF

  cat > /tmp/snapd-journal-match-script-error-notice-state.sh << 'EOF'
  #!/bin/bash -e
  sudo journalctl --no-pager -u snapd | MATCH "cloud-init reported to be in error state, will disable in 3 minutes"
  EOF

  cat > /tmp/snapd-journal-match-script-error-disable-state.sh << 'EOF'
  #!/bin/bash -e
  sudo journalctl --no-pager -u snapd | MATCH "cloud-init reported to be in error state after 3 minutes"
  EOF

  remote.push /tmp/snapd-journal-match-script-disable-state.sh
  remote.push /tmp/snapd-journal-match-script-error-notice-state.sh
  remote.push /tmp/snapd-journal-match-script-error-disable-state.sh
  remote.exec "chmod +x /home/user1/snapd-journal-match-script-disable-state.sh"
  remote.exec "chmod +x /home/user1/snapd-journal-match-script-error-notice-state.sh"
  remote.exec "chmod +x /home/user1/snapd-journal-match-script-error-disable-state.sh"

  # there are two options here, one is where we actually let cloud-init stay 
  # enabled with the variant where the gadget allowed it, in which case 
  # cloud-init will be in error, and we actually have to check for two messages,
  # and the other is where cloud-init is not allowed to run at all by disabling
  # all datasources in which case snapd notices cloud-init as being disabled
  if [ "$GADGET_DATASOURCE" = "explicitly-none" ]; then
    # snapd should disable cloud-init
    retry --wait 1 -n 60 sh -c 'remote.exec /home/user1/snapd-journal-match-script-disable-state.sh'

    remote.exec "cloud-init status" | MATCH "status: disabled"
  else
    # the first message is about snapd noticing that cloud-init is in error, and
    # for how long snapd will wait for cloud-init, this message should show up
    # relatively quickly
    retry --wait 1 -n 60 sh -c 'remote.exec /home/user1/snapd-journal-match-script-error-notice-state.sh'

    # we now wait for 3 minutes before snapd gives up waiting and disables 
    # cloud-init
    retry --wait 4 -n 60 sh -c 'remote.exec /home/user1/snapd-journal-match-script-error-disable-state.sh'

    remote.exec "cloud-init status" | MATCH "status: error"
  fi

  echo "Ensuring that cloud-init got disabled"
  # either in the case of the gadget saying no datasources or in the case of the
  # MAAS datasource being broken and thus getting eventually disabled by snapd
  # uggggggghhhhhhhhhh bash quoting strikes again - arguments to the test 
  # command do not get passed if we do something obvious like
  # retry --wait 1 -n 240 sh -c "remote.exec sh -c 'test -f /etc/cloud/cloud-init.disabled'"
  # so instead we must put this command into a file, copy it over and then
  # execute this file, putting the scoreboard at BASH âˆž + 1, IAN 0
  cat > /tmp/snapd-cloud-init-disabled-check.sh << 'EOF'
  #!/bin/bash -e
  test -f /etc/cloud/cloud-init.disabled
  EOF

  remote.push /tmp/snapd-cloud-init-disabled-check.sh
  remote.exec "chmod +x /home/user1/snapd-cloud-init-disabled-check.sh"

  retry --wait 1 -n 240 sh -c "remote.exec /home/user1/snapd-cloud-init-disabled-check.sh"

  echo "Relevant files were copied"
  if [ "$GADGET_DATASOURCE" = "explicitly-none" ]; then
    # gadget said no datasources so nothing was copied
    remote.exec "! test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-maas-cloud-config.cfg"
    remote.exec "! test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-maas-datasource.cfg"
    remote.exec "! test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-maas-reporting.cfg"
    remote.exec "! test -f /etc/cloud/cloud.cfg.d/90_50-curtin-networking.cfg"
  else
    remote.exec "test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-maas-cloud-config.cfg"
    remote.exec "test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-maas-datasource.cfg"
    remote.exec "test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-maas-reporting.cfg"
    remote.exec "test -f /etc/cloud/cloud.cfg.d/90_50-curtin-networking.cfg"
  fi

  echo "Filtered files were not copied"
  remote.exec "! test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-maas-ubuntu-sso.cfg"
  remote.exec "! test -f /etc/cloud/cloud.cfg.d/90_50-cloudconfig-gce-unsupported-config.cfg"

  # check that the gadget cloud.conf was copied too if it exists and is 
  # meaningful
  echo "The gadget cloud.conf was copied if it was in the gadget"
  if [ "$GADGET_DATASOURCE" = absent ]; then
    remote.exec "! test -f /etc/cloud/cloud.cfg.d/80_device_gadget.cfg"
  else
    remote.exec "test -f /etc/cloud/cloud.cfg.d/80_device_gadget.cfg"
  fi

  echo "The datasource_list restriction file was installed if we copied files"

  echo "and has the expected contents"
  if [ "$GADGET_DATASOURCE" = "explicitly-none" ]; then
    # we only copied files from ubuntu-seed if the intersection between what we
    # statically support and what the gadget says and what ubuntu-seed says is
    # not empty, so the only case where files don't get installed of the 3 
    # variants is where the gadget datasource says explicitly none
    remote.exec "! test -f /etc/cloud/cloud.cfg.d/99_snapd_datasource.cfg"
  else
    remote.exec "test -f /etc/cloud/cloud.cfg.d/99_snapd_datasource.cfg"
    remote.exec "cat /etc/cloud/cloud.cfg.d/99_snapd_datasource.cfg" > datasource_restrict.cfg
    # check that it has only MAAS
    #shellcheck disable=SC2002
    cat datasource_restrict.cfg | yaml2json | jq -r '."datasource_list" | .[]' | MATCH MAAS
    #shellcheck disable=SC2002
    test "$(cat datasource_restrict.cfg | yaml2json | jq -r '."datasource_list" | .[]' | wc -l)" = 1
  fi

  # note that zzzz_snapd.cfg is not installed because cloud-init is in error and
  # thus we just disable cloud-init
