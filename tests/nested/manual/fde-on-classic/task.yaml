summary: Check that a FDE based classic image can be booted

details: |
  This test creates a classic image that looks like what the installer
  would create and we boot into it.

systems: [ubuntu-22.04-64, ubuntu-24.04-64]

environment:
  NESTED_ENABLE_SECURE_BOOT: false
  NESTED_USE_CLOUD_INIT: true
  CACHE_D: ./cache

prepare: |
  # FIXME: The gadget snap for classic is not yet available. So for
  #        the moment, the test modifies the gadget for Ubuntu Core.
  #        This should be removed when the classic snap is available.
  VERSION="$(tests.nested show version)"
  snap download --basename=pc --channel="$VERSION/edge" pc
  unsquashfs -d pc-gadget pc.snap
  # gadget.yaml needs a different structure than for Ubuntu Core
  python3 tweak-gadget.py pc-gadget/meta/gadget.yaml
  # Append kernel-cmdline section
  cat << 'EOF' >> pc-gadget/meta/gadget.yaml
  kernel-cmdline:
    allow:
      - append.val=*
      - append.flag
      - other.val=foo
      - some-value
  EOF
  snap pack --filename=pc_x1.snap pc-gadget

  # create an image that looks like a classic image
  # Note that "mk-image" is left as a script so that it can also be
  # run outside of spread easily for quick interactive testing
  ./mk-image.sh ./boot.img "$CACHE_D" "./mnt" ./pc_x1.snap
  # replaces snap-bootstrap in initramfs and snapd in rootfs
  ./replace-image-files.sh ./boot.img "$CACHE_D"
  # We will need yq
  snap install yq

execute: |
  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"
  # run built image
  nested_start_core_vm_unit "$PWD"/boot.img
  # modify&repack snaps that we will refresh in the image
  # These are all EFI images that will contain the DOS string in the first bytes
  for f in "$CACHE_D"/snap-pc-kernel/kernel.efi pc-gadget/grubx64.efi pc-gadget/shim.efi.signed; do
      sed -i 's/This program cannot be run in DOS mode/This program cannot be run in XXX mode/' "$f"
  done
  # Bump edition of ubuntu-boot content
  gadget_p=pc-gadget/meta/gadget.yaml
  yq -i '(.volumes.pc.structure[] | select(.name == "ubuntu-boot") | .update.edition) |= . + 1' "$gadget_p"
  # Re-pack snaps we want to update
  snap pack --filename=pc-new.snap pc-gadget
  snap pack --filename=pc-kernel-new.snap "$CACHE_D"/snap-pc-kernel

  # validate that the image boots and seeds
  remote.exec "sudo snap wait system seed.loaded"

  remote.exec 'cat /etc/os-release | MATCH VERSION_ID=\"22.04\"'
  remote.exec "snap list pc-kernel"
  remote.exec "snap list pc"
  remote.exec "snap list core22"
  remote.exec "snap list snapd"

  # no reboot required
  remote.exec not test -f /run/reboot-required

  # Check for the generic serial assertion
  retry -n 100 sh -c 'remote.exec "snap changes" | MATCH "Done.*Initialize device"'
  remote.exec "snap model --serial --assertion" | MATCH "authority-id: generic"
  remote.exec "snap model --serial --assertion" | MATCH "brand-id: tcMZ22pMaY5EVwoLozfjM4fR31bko4yj"
  remote.exec "snap model --serial --assertion" | MATCH "model: ubuntu-core-22-pc-amd64"

  # refresh kernel snap
  # $1: path to snap file
  # $2: snap name
  # $3: reboot action ("reboot"/"no-reboot")
  refresh_rebooting_snap()
  {
      local snap_filename=$1
      local snap_name=$2
      local reboot_action=$3
      printf "Test installing snap from file %s\n" "$snap_filename"
      remote.push "$snap_filename"
      boot_id=$(tests.nested boot-id)
      # install will exit when waiting for the reboot
      remote.exec sudo snap install --dangerous "$snap_filename" | MATCH "Task set to wait until a system restart allows to continue"

      # Check that a reboot notification was setup
      remote.exec test -f /run/reboot-required
      remote.exec cat /run/reboot-required.pkgs | MATCH "snap:${snap_name}"
      # Check that no reboot has been scheduled, then force a reboot
      remote.exec not test -f /run/systemd/shutdown/scheduled

      if [ "$reboot_action" = "reboot" ]; then
          remote.exec sudo reboot || true
          remote.wait-for reboot "$boot_id"
          remote.exec sudo snap watch --last=install
      fi
  }

  # Sets a system option to append arguments to the kernel command line.
  # $1: option
  # $2: value
  append_kernel_cmdline()
  {
      local option=$1
      local value=$2

      remote.exec "sudo snap set system $option=\"$value\""
      boot_id="$(tests.nested boot-id)"
      remote.exec snap changes | MATCH "Done .*Update kernel command line due to change in system configuration"
      echo "Rebooting after setting $option=\"$value\""
      remote.exec "sudo reboot" || true
      tests.nested wait-for reboot "$boot_id"
      remote.exec "sudo cat /proc/cmdline" | MATCH "$value"
  }

  current_kernel_file=$(remote.exec readlink /run/mnt/ubuntu-boot/EFI/ubuntu/kernel.efi)
  current_kernel_file=${current_kernel_file%/*}

  # Test aborting a kernel installation before a reboot
  refresh_rebooting_snap pc-kernel-new.snap pc-kernel no-reboot
  remote.exec sudo snap abort --last=install
  remote.exec sudo snap watch --last=install || true
  # Make sure everything is in the same state
  not remote.exec stat /run/mnt/ubuntu-boot/EFI/ubuntu/try-kernel.efi
  remote.exec cat /var/lib/snapd/modeenv | MATCH "^current_kernels=$current_kernel_file$"
  remote.exec cat /run/mnt/ubuntu-boot/EFI/ubuntu/grubenv | MATCH -E "^kernel_status=$"

  # Test successful kernel update
  refresh_rebooting_snap pc-kernel-new.snap pc-kernel reboot

  echo "Refresh pc gadget and assert assets got updated"
  refresh_rebooting_snap pc-new.snap pc reboot
  for f in /boot/grub/kernel.efi /run/mnt/ubuntu-boot/EFI/boot/grubx64.efi; do
      remote.exec sudo grep -q -a '"This program cannot be run in XXX mode"' "$f"
  done

  # Test appending values to the kernel command line
  append_kernel_cmdline system.kernel.cmdline-append "append.val=1 append.flag other.val=foo some-value"
  append_kernel_cmdline system.kernel.cmdline-append ""
  append_kernel_cmdline system.kernel.dangerous-cmdline-append "dang.val=1 dang.flag"
  append_kernel_cmdline system.kernel.dangerous-cmdline-append ""

  # Test append values, but do not reboot immediately and refresh kernel
  optCmdline="dang.val=1 dang.flag"
  remote.exec "sudo snap set system system.kernel.dangerous-cmdline-append=\"$optCmdline\""
  refresh_rebooting_snap pc-kernel-new.snap pc-kernel reboot
  remote.exec "sudo cat /proc/cmdline" | MATCH "$optCmdline"

  # Test that installing a different base and a reboot cause no reverts
  # (regression test for SNAPDENG-4975)

  # precondition, the core22 is not a local version
  remote.exec snap list core22 | NOMATCH " x1 "
  # create modified core22
  unsquashfs -d core22 "$CACHE_D"/core22_*.snap
  touch core22/empty-file
  snap pack --filename=core22-new.snap core22
  remote.push "core22-new.snap"
  # install and validate it is now a local version
  remote.exec sudo snap install --dangerous "core22-new.snap"
  remote.exec sudo snap list core22 | MATCH " x1 "
  # wait for reboot
  boot_id=$(tests.nested boot-id)
  remote.exec sudo reboot || true
  tests.nested wait-for reboot "$boot_id"
  # ensure that no revert of core22 happened after the reboot
  remote.exec sudo snap changes | NOMATCH "Update kernel and core snap revisions"
  remote.exec sudo snap list core22 | MATCH " x1 "

  rm -rf "$CACHE_D"
