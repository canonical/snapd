summary: Test that gadget config defaults are applied early on core20.

details: |
    Check that defaults are applied early when the Ubuntu Core image is
    booted and also after transition to recovery mode.

systems: [ubuntu-2*]

environment:
    NESTED_ENABLE_TPM: true
    NESTED_ENABLE_SECURE_BOOT: true
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    # gadget default.yaml uses port 8023

prepare: |
    # Get the snakeoil key and cert
    KEY_NAME=$(tests.nested download snakeoil-key)
    SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
    SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

    # modify and repack gadget snap (add defaults section and install hook)
    VERSION="$(tests.nested show version)"
    snap download --basename=pc --channel="$VERSION/edge" pc
    unsquashfs -d pc-gadget pc.snap

    cat defaults.yaml >> pc-gadget/meta/gadget.yaml
    mkdir -p pc-gadget/meta/hooks
    cp install pc-gadget/meta/hooks/

    tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
    snap pack pc-gadget/ "$(tests.nested get extra-snaps-path)"

    rm -f "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

    # Note that the early config is configured to set port to 8023 instead
    # of the default 8022 (which maps to 22 on the VM).
    remote.setup config --host localhost --port 8023 --user user1 --pass ubuntu

    tests.nested build-image core
    tests.nested create-vm core

restore: |
    remote.exec "sudo rm -f /etc/netplan/00-snapd-config.yaml" || true

debug: |
    # show if anything went wrong during seeding
    remote.exec "snap change 1" || true

execute: |
    check_core20_early_config(){
        # precondition - check that defaults were applied; note this doesn't guarantee
        # that defaults were applied early - that is checked further down.
        echo "Precondition check of the gadget defaults"
        remote.exec "sudo snap get system service.rsyslog.disable" | MATCH "true"
        remote.exec "sudo snap get system watchdog.runtime-timeout" | MATCH "10m"
        remote.exec "sudo snap get system system.power-key-action" | MATCH "ignore"
        remote.exec "sudo snap get system system.ctrl-alt-del-action" | MATCH "none"
        remote.exec "sudo snap get system system.disable-backlight-service" | MATCH "true"

        remote.exec "test -L /etc/systemd/system/rsyslog.service"
        remote.exec "cat /etc/systemd/logind.conf.d/00-snap-core.conf" | MATCH "HandlePowerKey=ignore"
        remote.exec "cat /etc/systemd/system.conf.d/10-snapd-watchdog.conf" | MATCH "RuntimeWatchdogSec=600"
        # ensure it was possible to set the timeout
        remote.exec "sudo journalctl" | NOMATCH "Failed to set timeout to"
        remote.exec "test -L /etc/systemd/system/systemd-backlight@.service"

        echo "Test that defaults were applied early."
        # early config is witnessed by install hook of the pc gadget. Note we can
        # only check rsyslog/backlight symlinks as other core settings cannot be
        # inspected from install hook of the gadget.
        remote.exec "cat /var/snap/pc/common/debug.txt" | MATCH "rsyslog symlink: /dev/null"
        remote.exec "cat /var/snap/pc/common/debug.txt" | MATCH "backlight symlink: /dev/null"

        # timezone is set
        remote.exec "cat /etc/timezone" | MATCH "Europe/Malta"
        remote.exec "readlink -f /etc/localtime" | MATCH "Europe/Malta"
        remote.exec "cat /var/snap/pc/common/debug.txt" | MATCH "localtime symlink: /usr/share/zoneinfo/Europe/Malta"

        # check console-conf disabled
        remote.exec "cat /var/lib/console-conf/complete" | MATCH "console-conf has been disabled by the snapd system configuration"

        # hostname is set
        remote.exec "cat /var/snap/pc/common/debug.txt" | MATCH "hostname: foo"
        remote.exec "cat /etc/hostname" | MATCH "foo"
        remote.exec "hostname" | MATCH "foo"

        # Should not have all-* snippets from the base
        not remote.exec "sudo snap get system system.network.netplan.network.ethernets.all-en"
        not remote.exec "sudo snap get system system.network.netplan.network.ethernets.all-eth"

        # netplan config defaults are applied
        remote.exec "sudo cat /etc/netplan/00-snapd-config.yaml" | MATCH br54
        remote.exec "sudo netplan get bridges.br54.dhcp4" | MATCH true
        remote.exec "sudo snap get system system.network.netplan.network.bridges.br54.dhcp4" | MATCH true
        remote.exec "sudo netplan get ethernets.any.dhcp6" | MATCH true
        # and updating netplan works
        remote.exec "sudo snap set system system.network.netplan.network.bridges.br54.dhcp4=false"
        remote.exec "sudo netplan get bridges.br54.dhcp4" | MATCH false
        remote.exec "sudo snap get system system.network.netplan.network.bridges.br54.dhcp4" | MATCH false
        # ensure the test can be repeated
        remote.exec "sudo rm -f /etc/netplan/90-snapd-config.yaml"

        echo "Check the ssh port file is correct"
        remote.exec "sudo cat /etc/ssh/sshd_config.d/listen.conf" | MATCH "ListenAddress 0\.0\.0\.0:8023"
        remote.exec "sudo cat /etc/ssh/sshd_config.d/listen.conf" | MATCH "ListenAddress \[::\]:8023"
        remote.exec "sudo cat /etc/ssh/sshd_config.d/listen.conf" | MATCH "ListenAddress 192\.168\.99\.4:9922"
    }

    check_core20_early_config

    echo "Transition to recover mode and check it again"
    recoverySystem=$(remote.exec "sudo snap recovery | grep -v Notes | grep -Po '^[0-9]+'")
    tests.nested transition "$recoverySystem" recover

    echo "Wait for the snap command to be available since recover mode needs to seed itself"
    remote.wait-for snap-command

    echo "Wait for snap seeding to be done"
    remote.exec "sudo snap wait system seed.loaded"

    check_core20_early_config

    echo "Check that switching the ssh port works"
    remote.exec "sudo snap set system service.ssh.listen-address=:9022" || true
    # we need to connect to 9022 now
    remote.setup config --host localhost --port 9022 --user user1 --pass ubuntu
    "$TESTSLIB"/external/snapd-testing-tools/remote/remote.wait-for ssh
    remote.exec "sudo snap get system service.ssh.listen-address" | MATCH :9022
    remote.exec "sudo cat /etc/ssh/sshd_config.d/listen.conf" | MATCH "ListenAddress 0\.0\.0\.0:9022"
    remote.exec "sudo cat /etc/ssh/sshd_config.d/listen.conf" | MATCH "ListenAddress \[::\]:9022"
    echo "Check that unsetting the ssh port works"
    remote.exec "sudo snap unset system service.ssh.listen-address" || true
    # 8022 is the default port that is forwarded to "22" in the guest
    remote.setup config --host localhost --port 8022 --user user1 --pass ubuntu
    "$TESTSLIB"/external/snapd-testing-tools/remote/remote.wait-for ssh
    remote.exec "sudo test ! -f /etc/ssh/sshd_config.d/listen.conf"
