summary: Check that the /system/<label> API works via fake installer

details: |
  Check that the fake installed works properly using the /system/<label> API
  Verify the instance created is a classic ubuntu with the kernel snap installed

# this is a UC20+ specific test
# TODO this currently fails on ubuntu-20.04-64 timing out
systems: [ubuntu-22.04-64, ubuntu-24.04-64]

environment:
    # nested test so that we can test encryted installs eventually
    # TODO enable tpm variant too for testing of encryption installs
    #      this will probably require fixes in nested.sh as the classic VM
    #      does not (yet) support tpm/secureboot(?)
    NESTED_ENABLE_TPM: false
    NESTED_ENABLE_SECURE_BOOT: false
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_ENABLE_OVMF: true
    NESTED_REPACK_KERNEL_SNAP: true
    # store related setup
    STORE_ADDR: localhost:11028
    STORE_DIR: $(pwd)/fake-store-blobdir

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi
  echo "Install used snaps"
  snap install test-snapd-curl --devmode --edge
  snap install jq --devmode --edge
  if [ -d /var/lib/snapd/seed ]; then
      mv /var/lib/snapd/seed /var/lib/snapd/seed.orig
  fi
  "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"


restore: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi
  rm -rf /var/lib/snapd/seed
  if [ -d /var/lib/snapd/seed.orig ]; then
      mv /var/lib/snapd/seed.orig /var/lib/snapd/seed
  fi
  "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"
  rm -rf ./classic-root

execute: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  # XXX: the code in DeviceManager.SystemAndGadgetInfo() will only work on
  # classic systems with modeenv right now (which is something we may need
  # to fix to work from the classic installer).
  # For now pretend we have a modeenv
  echo "mode=run" > /var/lib/snapd/modeenv
  tests.cleanup defer rm -f /var/lib/snapd/modeenv
  # need snapd restart as GET /systems/<label> is only available on systems
  # with a modeenv
  systemctl restart snapd

  echo Expose the needed assertions through the fakestore
  cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/testrootorg-store.account-key "$STORE_DIR/asserts" 
  export SNAPPY_FORCE_SAS_URL=http://$STORE_ADDR

  # shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB/prepare.sh"
  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB"/nested.sh
  version="$(nested_get_version)"
  # get an updated kernel
  snap download --basename=pc-kernel --channel="$version/edge" pc-kernel
  uc20_build_initramfs_kernel_snap "$PWD/pc-kernel.snap" "$NESTED_ASSETS_DIR"
  mv "${NESTED_ASSETS_DIR}"/pc-kernel_*.snap pc-kernel.snap

  # Prepare gadget with the right gadget.yaml
  snap download --basename=pc --channel="$version/edge" pc
  unsquashfs -d pc pc.snap
  sed -i 's/name: ubuntu-seed/name: EFI System partition/' pc/meta/gadget.yaml
  sed -i 's/role: system-seed/role: system-seed-null/' pc/meta/gadget.yaml
  snap pack --filename=pc-new.snap pc

  # prepare a classic seed
  # TODO:
  # - create pc-classic custom gadget
  # - repacked snapd snap
  # (should be as simple as adding "--snap=./local-gadget.snap ...")
  gendeveloper1 sign-model < "$TESTSLIB"/assertions/developer1-22-classic-dangerous.json > my.model
  snap prepare-image --classic \
      --channel=edge \
      --snap ./pc-kernel.snap \
      --snap ./pc-new.snap \
      my.model \
      ./classic-seed
  # make the seed label more predictable for fake-installer auto-mode
  LABEL=classic
  mv ./classic-seed/system-seed/systems/* ./classic-seed/system-seed/systems/"$LABEL"
  cp -a ./classic-seed/system-seed/ /var/lib/snapd/seed

  # do some light checking that the system is valid
  test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems | jq '.result.systems[0].label' | MATCH "$LABEL"
  test-snapd-curl.curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems/"$LABEL" > system
  jq '.result.model.distribution' system | MATCH "ubuntu"

  # build muinstaller and put in place
  go build -o muinstaller "$TESTSLIB"/muinstaller/main.go

  # create fake disk for the installer to work on
  truncate --size=4G fake-disk.img
  loop_device=$(losetup --show -f ./fake-disk.img)
  # and "install" the current seed to the fake disk
  ./muinstaller "$LABEL" "$loop_device" "$TESTSLIB"/muinstaller/mk-classic-rootfs.sh
  # validate that the fake installer created the expected partitions
  sfdisk -d "$loop_device" > fdisk_output
  MATCH "${loop_device}p1 .* name=\"BIOS Boot\""   < fdisk_output
  # TODO: the real MVP hybrid device will not contain a ubuntu-seed
  #       partition (needs a different gadget)
  MATCH "${loop_device}p2 .* name=\"EFI System partition\"" < fdisk_output
  MATCH "${loop_device}p3 .* name=\"ubuntu-boot\"" < fdisk_output
  MATCH "${loop_device}p4 .* name=\"ubuntu-save\"" < fdisk_output
  MATCH "${loop_device}p5 .* name=\"ubuntu-data\"" < fdisk_output

  # image partitions are not mounted anymore
  for d in ubuntu-seed ubuntu-boot ubuntu-data ubuntu-save; do
      test -d /run/mnt/"$d"
      not mountpoint /run/mnt/"$d"
  done

  # mount image to inspect data
  mount -o ro "${loop_device}"p3 /run/mnt/ubuntu-boot
  mount -o ro "${loop_device}"p5 /run/mnt/ubuntu-data

  # seed is populated
  test -d /run/mnt/ubuntu-data/var/lib/snapd/seed/systems/"$LABEL"
  # rootfs is there
  test -x /run/mnt/ubuntu-data/usr/lib/systemd/systemd
  # ensure not "ubuntu-data/system-data" is generated, this is a dir only
  # used on core and should not be there on classic
  not test -d /run/mnt/ubuntu-data/system-data
  # TODO: ensure we don't have this
  #not test -d /run/mnt/ubuntu-data/_writable_defaults
  # and the boot assets are in the right place
  test -e /run/mnt/ubuntu-boot/EFI/ubuntu/kernel.efi
  test -e /run/mnt/ubuntu-boot/EFI/ubuntu/grubenv
  test -e /run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
  # and we have a modenv in the image
  MATCH "mode=run" < /run/mnt/ubuntu-data/var/lib/snapd/modeenv
  MATCH "classic=true" < /run/mnt/ubuntu-data/var/lib/snapd/modeenv
  umount /run/mnt/ubuntu-{boot,data}

  # HACK: better to change nested_start_vm() to take an image name
  # Note that use "core" here as the boot is so close to core that classic
  # does not work
  IMAGE_NAME="$(nested_get_image_name core)"
  mv fake-disk.img "$NESTED_IMAGES_DIR/$IMAGE_NAME"

  # boot into the created image
  # Note that use "core" here as the boot is so close to core that classic
  # does not work

  # TODO: this prevents "nested_prepare_ssh" inside nested_start_core_vm
  #       from running, we already have a user so this is not needed
  touch "$NESTED_IMAGES_DIR/$IMAGE_NAME.configured"
  tests.nested create-vm core

  remote.exec "cat /etc/os-release" | MATCH 'NAME="Ubuntu"'
  remote.exec "snap changes" | MATCH "Done.* Initialize system state"
  remote.exec "snap list" | MATCH pc-kernel

  # Check disk traits
  # TODO: enable for the encrypted cases
  # TODO: this should grow extensive check like
  #   tests/main/uc20-create-partitions/task.yaml
  #   tests/main/uc20-create-partitions-encrypt/task.yaml
  #DISK_MAPPINGS=(/run/mnt/ubuntu-save/device/disk-mapping.json
  #               /run/mnt/data/var/lib/snapd/device/disk-mapping.json)
  #for DM in "${DISK_MAPPINGS[@]}"; do
  #    remote.exec "jq '.pc.\"structure-encryption\".\"ubuntu-save\".method' $DM" | MATCH '"LUKS"'
  #    remote.exec "jq '.pc.\"structure-encryption\".\"ubuntu-data\".method' $DM" | MATCH '"LUKS"'
  #done
