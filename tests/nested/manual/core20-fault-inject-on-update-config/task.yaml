summary: Ensure that the kernel command line can be updated when a panic occurs during the process

details: |
    The test checks that if a fault is injected during the update of the kernel command
    line, then the change continues an is completed with a predictable outcome.

systems: [ubuntu-2*]

environment:
    TAG/gadget_panic_command_line: update-command-line-gadget
    FAULT/gadget_panic_command_line: panic
    #TAG/gadget_panic_config_bootloader: update-config-bootloader
    #FAULT/gadget_panic_config_bootloader: panic

    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_REPACK_GADGET_SNAP: false
    NESTED_ENABLE_OVMF: true

prepare: |
    # Get the snakeoil key and cert for signing gadget assets (shim)
    KEY_NAME=$(tests.nested download snakeoil-key)
    SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
    SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

    # Get the nested system version
    VERSION="$(tests.nested show version)"

    snap download --basename=pc --channel="$VERSION/edge" pc
    unsquashfs -d pc-gadget pc.snap

    # delay all refreshes for a week from now, as otherwise refreshes for our 
    # snaps (which are asserted by the testrootorg authority-id) may happen, which
    # will break things because the signing keys won't match, etc. and 
    # specifically snap-bootstrap in the kernel snap from the store won't trust
    # the seed keys to unlock the encrypted data partition in the initramfs
    sed defaults.yaml -e "s/@HOLD-TIME@/$(date --date="next week" +%Y-%m-%dT%H:%M:%S%:z)/" >> \
        pc-gadget/meta/gadget.yaml

    # install the cloud.conf
    cp cloud.conf pc-gadget/cloud.conf

    # Sign boot assets
    tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

    # Add a list of allowed kernel arguments
    allow_ls="\nkernel-cmdline:\n  allow:\n"
    for arg in 'extra.val=1' 'extra.flag' 'foo=*'; do
        allow_ls="${allow_ls}    - ${arg}\n"
    done
    printf "%b" "$allow_ls" >> pc-gadget/meta/gadget.yaml

    snap pack pc-gadget/ "$(tests.nested get extra-snaps-path)"
  
    tests.nested build-image core
    tests.nested create-vm core

    echo "Inject a $FAULT on $TAG"
    cat <<EOF > fault-inject.conf
    [Service]
    Environment=SNAPPY_TESTING=1
    Environment=SNAPD_FAULT_INJECT=$TAG:$FAULT
    EOF

    echo "Wait for the system to be seeded first"
    remote.exec "sudo snap wait system seed.loaded"

    remote.push fault-inject.conf
    remote.exec "sudo mkdir -p /etc/systemd/system/snapd.service.d"
    remote.exec "sudo cp -v fault-inject.conf /etc/systemd/system/snapd.service.d/"
    remote.exec "sudo systemctl daemon-reload"
    remote.exec "sudo systemctl restart snapd.service"

execute: |
    # Update the cmdline
    remote.exec "sudo snap set system system.kernel.dangerous-cmdline-append='extradang.val=1 extradang.flag'"
    # For this update, there are 3 changes generated   
    #3    Done    today at 13:23 UTC  today at 13:26 UTC  Change configuration of "core" snap
    #4    Done    today at 13:23 UTC  today at 13:25 UTC  Update kernel command line due to change in system configuration
    #5    Done    today at 13:25 UTC  today at 13:26 UTC  Update kernel command line due to change in system configuration

    # shellcheck disable=SC2016
    retry --wait 1 -n 120 --env "CHANGE_ID=3" sh -c 'remote.exec snap changes | MATCH "${CHANGE_ID} .* (Done|Error) .*"'
    # shellcheck disable=SC2016
    retry --wait 1 -n 30 --env "CHANGE_ID=4" sh -c 'remote.exec snap changes | MATCH "${CHANGE_ID} .* (Done|Error) .*"'
    # shellcheck disable=SC2016
    retry --wait 1 -n 30 --env "CHANGE_ID=5" sh -c 'remote.exec snap changes | MATCH "${CHANGE_ID} .* (Done|Error) .*"'

    # Check if the fault was injected
    remote.exec "test -e /var/lib/snapd/faults/$TAG:$FAULT"

    for change_id in 3 4 5; do
        FINAL_STATUS="$(remote.exec snap changes | grep -E "^$change_id .*" | awk ' {print $2} ')"

        echo "Ensure the change has no steps with Error"
        [ "$FINAL_STATUS" = Done ]
        remote.exec "snap change $change_id" | NOMATCH "^Error .*"
    done

    echo "Ensure the command line has been updated"
    remote.exec "sudo cat /var/lib/snapd/modeenv" | MATCH "extradang.val=1"
