summary: End-to-end test for install via muinstaller

systems: [ubuntu-22.04-64]

environment:
    # Test both encrypted and unencrypted install using the muinstaller
    NESTED_ENABLE_TPM/encrypted: true
    NESTED_ENABLE_SECURE_BOOT/encrypted: true

    # unencrypted case
    NESTED_ENABLE_TPM/plain: false
    NESTED_ENABLE_SECURE_BOOT/plain: false

    # ensure we use our latest code
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_REPACK_KERNEL_SNAP: true
    NESTED_ENABLE_OVMF: true
    # store related setup
    STORE_ADDR: localhost:11028
    STORE_DIR: $(pwd)/fake-store-blobdir
    # image
    IMAGE_MOUNTPOINT: /mnt/cloudimg

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi
  apt install dosfstools kpartx
  snap install jq
  snap install yq
  "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"

restore: |
  "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"
  rm -rf ./classic-root

execute: |
  # shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB/prepare.sh"
  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB"/nested.sh

  echo Expose the needed assertions through the fakestore
  cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/testrootorg-store.account-key "$STORE_DIR/asserts" 
  export SNAPPY_FORCE_SAS_URL=http://$STORE_ADDR

  version="$(nested_get_version)"

  # build updated shim
  version=22
  snap download --basename=pc --channel="$version/edge" pc
  cp pc.snap pc.snap.orig
  # the fakestore needs the assertion
  snap ack pc.assert
  unsquashfs -d pc-gadget pc.snap
  echo 'console=ttyS0 systemd.journald.forward_to_console=1' > pc-gadget/cmdline.extra
  # use the system-seed-null classic role
  sed -i 's/role: system-seed/role: system-seed-null/' pc-gadget/meta/gadget.yaml

  echo "Sign the shim binary"
  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"
  tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  snap pack --filename=pc.snap pc-gadget/ 

  # get an updated kernel
  snap download --basename=pc-kernel --channel="$version/edge" pc-kernel
  cp pc-kernel.snap pc-kernel.snap.orig
  # the fakestore needs this assertion
  snap ack pc-kernel.assert
  uc20_build_initramfs_kernel_snap "$PWD/pc-kernel.snap" "$NESTED_ASSETS_DIR"
  mv "${NESTED_ASSETS_DIR}"/pc-kernel_*.snap pc-kernel.snap

  # prepare a classic seed
  # TODO:
  # - create pc-classic custom gadget
  # - repacked snapd snap
  # (should be as simple as adding "--snap=./local-gadget.snap ...")
  gendeveloper1 sign-model < "$TESTSLIB"/assertions/developer1-22-classic-dangerous.json > my.model
  snap prepare-image --classic \
      --channel=edge \
      --snap ./pc-kernel.snap \
      --snap ./pc.snap \
      my.model \
      ./classic-seed
  # make the seed label more predictable for fake-installer auto-mode
  LABEL=classic
  mv ./classic-seed/system-seed/systems/* ./classic-seed/system-seed/systems/"$LABEL"
  cp -a ./classic-seed/system-seed/ /var/lib/snapd/seed

  # we don't need the fakestore anymore
  "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"

  # build the muinstaller snap
  snap install snapcraft --candidate --classic
  "$TESTSTOOLS"/lxd-state prepare-snap
  (cd "$TESTSLIB"/muinstaller && snapcraft)
  MUINSTALLER_SNAP="$(find "$TESTSLIB"/muinstaller/ -maxdepth 1 -name '*.snap')"
  echo "found $MUINSTALLER_SNAP"

  # create new disk for the installer to work on and attach to VM
  truncate --size=4G fake-disk.img

  # create a VM and mount a cloud image
  tests.nested build-image classic

  # TODO: nested classic images do not support secure boot today so
  #       this will not work to test the secure boot installer. So for
  #       now the workaround is to boot classic to create user/ssh
  #       keys, shutdown down, convert disk from qcow2->raw and rename
  #       from classic->core and use nested_start_core_vm (like below)
  #
  # start it so that cloud-init creates ssh keys and user
  NESTED_PARAM_EXTRA="-drive file=$(pwd)/fake-disk.img,if=virtio,snapshot=off"
  tests.nested create-vm classic --extra-param "$NESTED_PARAM_EXTRA"

  # make sure classic image is bootable with snakeoil keys
  # TODO: move to nested_create_classic_image
  # XXX: use assets from gadget instead?
  for s in BOOT/BOOTX64.EFI ubuntu/shimx64.efi; do
      remote.exec "sudo cp -a /boot/efi/EFI/$s /tmp"
      remote.exec "sudo chmod 755 /tmp/$(basename $s)"
      remote.pull /tmp/"$(basename $s)" .
      nested_secboot_sign_file "$(basename $s)" "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
      remote.push "$(basename $s)"
      remote.exec "sudo mv $(basename $s) /boot/efi/EFI/$s"
  done

  remote.exec "sudo sh -c 'echo SNAPD_DEBUG=1 >> /etc/environment'"
  # push our snap down
  # TODO: this abuses /var/lib/snapd to store the deb so that mk-initramfs-classic
  # can pick it up. the real installer will also need a very recent snapd
  # in its on disk-image to supprot seeding
  remote.push "$SPREAD_PATH"/../snapd_*.deb
  remote.exec "sudo mv snapd_*.deb /var/lib/snapd/"
  remote.exec "sudo apt install -y /var/lib/snapd/snapd_*.deb"

  # push our seed down
  # TODO: merge with classic /var/lib/snapd/seed eventually
  # XXX: port scp -r to remote.push
  #remote.push ./classic-seed/system-seed/ '~/'
  sshpass -p ubuntu scp -r -P 8022 -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./classic-seed/system-seed/ user1@localhost:~/install-seed
  remote.exec "sudo mv /home/user1/install-seed /var/lib/snapd/"

  # XXX: the code in DeviceManager.SystemAndGadgetInfo() will only work on
  # classic systems with modeenv right now (which is something we may need
  # to fix to work from the classic installer).
  # For now pretend we have a modeenv
  remote.exec 'echo "mode=run" | sudo tee -a /var/lib/snapd/modeenv'
  remote.exec 'sudo systemctl restart snapd'

  # shutdown the classic vm to install with a core VM that supports
  # secboot/tpm
  tests.nested vm stop
  sync

  # HACK: convert "classic" qcow2 to raw "core" image because we need
  # to boot with OVMF we really should fix this so that classic and
  # core VMs are more similar
  qemu-img convert -f qcow2 -O raw "$NESTED_IMAGES_DIR/$(nested_get_image_name classic)" "$NESTED_IMAGES_DIR/$(nested_get_image_name core)"
  # and we don't need the classic image anymore
  # TODO: uncomment
  #rm -f  "$NESTED_IMAGES_DIR/$(nested_get_image_name classic)"
  # TODO: this prevents "nested_prepare_ssh" inside nested_start_core_vm
  #       from running, we already have a user so this is not needed
  IMAGE_NAME="$(nested_get_image_name core)"
  touch "$NESTED_IMAGES_DIR/$IMAGE_NAME.configured"
  tests.nested create-vm core --extra-param "$NESTED_PARAM_EXTRA"
  
  # bind mount new seed
  remote.exec "sudo mount -o bind /var/lib/snapd/install-seed /var/lib/snapd/seed"
  # push the muinstaller
  remote.push "$MUINSTALLER_SNAP"
  remote.exec "sudo snap install --classic --dangerous $(basename "$MUINSTALLER_SNAP")"

  # TODO: use retry
  while true; do
    if remote.exec "sudo snap logs muinstaller" | MATCH "install done"; then
        break
    fi
    sleep 5
  done
  remote.exec "sudo sync"

  # boot into the just installed drive
  tests.nested vm remove
  sync

  # HACK: rename to "core" image because we need to boot with OVMF
  # we really should fix this so that classic and core VMs are more similar
  mv fake-disk.img "$NESTED_IMAGES_DIR/$IMAGE_NAME"

  # Change seed part label to capitals so we cover that use case
  IMAGE_PATH="$NESTED_IMAGES_DIR/$IMAGE_NAME"
  kpartx -asv "$IMAGE_PATH"
  fatlabel /dev/disk/by-label/ubuntu-seed UBUNTU-SEED
  kpartx -d "$IMAGE_PATH"

  tests.nested create-vm core --tpm-no-restart
  
  # things look fine
  remote.exec "cat /etc/os-release" | MATCH 'NAME="Ubuntu"'
  remote.exec "snap changes" | MATCH "Done.* Initialize system state"
  remote.exec "snap list" | MATCH pc-kernel

  # check encryption
  if [ "$NESTED_ENABLE_TPM" = true ]; then
      remote.exec "sudo test -d /var/lib/snapd/device/fde"
      remote.exec "sudo test -e /var/lib/snapd/device/fde/marker"
      remote.exec "sudo test -e /var/lib/snapd/device/fde/marker"
      remote.exec "sudo blkid /dev/disk/by-label/ubuntu-data-enc" | MATCH crypto_LUKS

      echo "Ensure recovery keys are available on classic FDE too"
      remote.exec "sudo snap recovery --show-keys" > show-keys.out
      MATCH 'recovery:\s+[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}' < show-keys.out

      # check disk mappings
      remote.exec "sudo snap install jq"
      # TODO: no ubuntu-save right now because:
      #       "ERROR cannot store device key pair: internal error: cannot access device keypair manager if ubuntu-save is unavailable"
      #DISK_MAPPINGS=(/run/mnt/ubuntu-save/device/disk-mapping.json
      #               /run/mnt/data/var/lib/snapd/device/disk-mapping.json)
      DISK_MAPPINGS=(/run/mnt/data/var/lib/snapd/device/disk-mapping.json)
      for DM in "${DISK_MAPPINGS[@]}"; do
          remote.exec "sudo cat $DM | jq '.pc.\"structure-encryption\".\"ubuntu-save\".method'" | MATCH '"LUKS"'
          remote.exec "sudo cat $DM | jq '.pc.\"structure-encryption\".\"ubuntu-data\".method'" | MATCH '"LUKS"'
      done

      # check that on an already provisioned system the API will give a
      # sensible reason why the system cannot be installed without further
      # action.
      remote.exec "sudo apt install -y curl"
      remote.exec "sudo curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems/$LABEL" > system
      jq '.result."storage-encryption".support' < system | MATCH "unavailable"
      jq '.result."storage-encryption"."unavailable-reason"' < system | MATCH "not encrypting device storage as checking TPM gave: the TPM is in DA lockout mode"
  fi

  # test kernel/gadget refreshes via the fake-store

  # setup refresh for a rebooting snap
  refresh_rebooting_snap()
  {
      local snap_name=$1
      local snap_orig_blob=$2
      local snap_new_dir=$3

      printf "Test installing snap from file %s\n" "$snap_name"
      fakestore make-refreshable --dir "$STORE_DIR" \
          --snap-orig-blob "$snap_orig_blob" --snap-blob "$snap_new_dir" "$snap_name"
      remote.exec mkdir -p asserts/
      # Order of assertion acking is important
      for p in "$STORE_DIR"/asserts/*.account-key "$STORE_DIR"/asserts/*.snap-declaration "$STORE_DIR"/asserts/*.snap-revision; do
          remote.push "$p" asserts/
          remote.exec sudo snap ack asserts/"$(basename "$p")"
      done
      remote.push "$STORE_DIR"/"$snap_name"_*.snap

      boot_id=$(tests.nested boot-id)
      # TODO as in the end we had to do install instead of refreshing from the
      # fakestore (due to issues connecting from the nested VM), we might want
      # to not use it at all.
      REMOTE_CHG_ID=$(remote.exec "sudo snap install --no-wait ${snap_name}_*.snap")
      # Wait until we stall in the connection of interface as we wait for a reboot
      retry --wait 1 -n 120 sh -c "remote.exec \"snap change $REMOTE_CHG_ID | grep -E 'Task set to wait until a manual system restart'\""

      # Check that a reboot notification was setup
      remote.exec test -f /run/reboot-required
      remote.exec cat /run/reboot-required.pkgs | MATCH "snap:${snap_name}"
      # Check that no reboot has been scheduled, then force a reboot
      remote.exec not test -f /run/systemd/shutdown/scheduled

      remote.exec sudo reboot || true
      tests.nested wait-for reboot "$boot_id"
      remote.exec sudo snap watch "$REMOTE_CHG_ID"
      remote.exec "snap change $REMOTE_CHG_ID" | NOMATCH Error
      remote.exec "journalctl -u snapd" | NOMATCH "cannot mark boot successful"
  }
  # ensure update-notifier-common is installed so that reboot notification works
  remote.exec "sudo apt install -y update-notifier-common"

  # setup fake store again and make it available inside the nested vm
  "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"
  export NESTED_FAKESTORE_BLOB_DIR="$STORE_DIR"
  export NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL="$SNAPPY_FORCE_SAS_URL"

  # nested vm needs to restart for fake-store
  tests.nested vm stop
  tests.nested create-vm core --tpm-no-restart

  # test gadget/kernel refresh

  # Make sure there is a change in assets to update
  sed -i 's/This program cannot be run in DOS mode/This program cannot be run in XXX mode/' pc-gadget/grubx64.efi
  # Bump edition of ubuntu-{seed,boot} content to get grub updated in both partitions
  yq -i '(.volumes.pc.structure | with_entries(select(.value.role == "system-seed-null")) | .[].update.edition) |= . + 1' pc-gadget/meta/gadget.yaml
  yq -i '(.volumes.pc.structure | with_entries(select(.value.role == "system-boot")) | .[].update.edition) |= . + 1' pc-gadget/meta/gadget.yaml
  nested_secboot_sign_file pc-gadget/grubx64.efi "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  refresh_rebooting_snap pc pc.snap.orig ./pc-gadget

  # Make sure we installed the new grub
  remote.exec 'grep "This program cannot be run in XXX mode" /run/mnt/ubuntu-seed/EFI/boot/grubx64.efi'
  remote.exec 'grep "This program cannot be run in XXX mode" /run/mnt/ubuntu-boot/EFI/boot/grubx64.efi'

  unsquashfs -d pc-kernel pc-kernel.snap
  refresh_rebooting_snap pc-kernel pc-kernel.snap.orig ./pc-kernel

  # test that core22+ refreshes fine and does not revert after a reboot
  # (see https://github.com/snapcore/snapd/pull/12532)
  snap download --basename="core${version}" --channel="edge" "core${version}"
  cp "core${version}".snap "core${version}".snap.orig
  # the fakestore needs the assertion
  snap ack "core${version}".assert
  unsquashfs -d "core${version}" "core${version}".snap
  echo "modified" >> ./"core${version}"/etc/motd
  snap pack --filename="core${version}".snap ./"core${version}"
  fakestore make-refreshable --dir "$STORE_DIR" --snap-orig-blob "core${version}.snap.orig" --snap-blob "./core${version}" "core${version}"
  
  remote.exec sudo snap refresh --amend --channel="edge" "core${version}"
  remote.exec snap list "core${version}" > "core${version}".before-boot
  boot_id=$(tests.nested boot-id)
  remote.exec sudo reboot || true
  tests.nested wait-for reboot "$boot_id"
  # ensure no revert of core22+ was performed
  remote.exec sudo snap changes | NOMATCH "Update kernel and core snap revisions"
  remote.exec snap list "core${version}" > "core${version}".after-boot
  # and check that the versions are the same after boot
  diff -u "core${version}".before-boot "core${version}".after-boot
