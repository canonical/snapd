summary: End-to-end test for install via muinstaller

details: End-to-end test for install via muinstaller

systems: [-ubuntu-1*, -ubuntu-20*]

environment:
  # No partial gadget by default
  PARTIAL_GADGET: false

  NESTED_ENABLE_TPM: true

  # Test both encrypted and unencrypted install using the muinstaller
  NESTED_ENABLE_TPM/encrypted,partial: true
  NESTED_ENABLE_SECURE_BOOT/encrypted,partial: true

  # unencrypted case
  NESTED_ENABLE_TPM/plain: false
  NESTED_ENABLE_SECURE_BOOT/plain: false

  SEED_PARTITION: false
  SEED_PARTITION/seeded: true

  # Using partial case (TPM used, see above)
  PARTIAL_GADGET/partial: true

  # ensure we use our latest code
  NESTED_BUILD_SNAPD_FROM_CURRENT: true
  NESTED_REPACK_KERNEL_SNAP: true
  NESTED_ENABLE_OVMF: true
  # store related setup
  STORE_ADDR: localhost:11028
  STORE_DIR: $(pwd)/fake-store-blobdir
  # image
  IMAGE_MOUNTPOINT: /mnt/cloudimg

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi
  "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"

restore: |
  "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"
  rm -rf ./classic-root

execute: |
  # shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB/prepare.sh"
  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB"/nested.sh

  echo "Expose the needed assertions through the fakestore"
  cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/testrootorg-store.account-key "$STORE_DIR/asserts"
  export SNAPPY_FORCE_SAS_URL=http://$STORE_ADDR

  version="$(nested_get_version)"

  # Retrieve the gadget
  snap download --basename=pc --channel="$version/edge" pc
  # the fakestore needs the assertion
  snap ack pc.assert
  # keep original blob just so we can find the assertion later
  cp pc.snap pc.snap.orig

  # New modified gadget
  unsquashfs -d pc-gadget pc.snap
  echo 'console=ttyS0 systemd.journald.forward_to_console=1' > pc-gadget/cmdline.extra
  if [ "$PARTIAL_GADGET" = true ]; then
      # Change to a gadget.yaml where "partial" is being used
      cp gadget-partial.yaml pc-gadget/meta/gadget.yaml
  elif [ "$SEED_PARTITION" != 'true' ]; then
      # use the system-seed-null classic role
      sed -i 's/role: system-seed/role: system-seed-null/' pc-gadget/meta/gadget.yaml
  fi
  echo "Sign the shim binary"
  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"
  tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  snap pack --filename=pc.snap pc-gadget/

  # Retrieve kernel
  snap download --basename=pc-kernel-from-store --channel="$version/edge" pc-kernel
  # the fakestore needs this assertion
  snap ack pc-kernel-from-store.assert
  # Build kernel with initramfs with the compiled snap-bootstrap
  kmods_arg=""
  if os.query is-ubuntu-ge 24.04; then
      # split kernel into snap and kernel-modules component
      "$TESTSTOOLS"/build_kernel_with_comps.sh efi_pstore efi-pstore
      kmods_arg="--kmods-comp pc-kernel+efi-pstore.comp"
      # build now uc24 initramfs
      uc24_build_initramfs_kernel_snap "$PWD/pc-kernel.snap" "$NESTED_ASSETS_DIR"
  else
      uc20_build_initramfs_kernel_snap "$PWD/pc-kernel-from-store.snap" "$NESTED_ASSETS_DIR"
  fi
  mv "${NESTED_ASSETS_DIR}"/pc-kernel_*.snap pc-kernel-repacked.snap

  version="$(nested_get_version)"
  gendeveloper1 sign-model < "$TESTSLIB"/assertions/developer1-"$version"-classic-dangerous.json > classic.model

  # create new disk for the installer to work on and attach to VM
  truncate --size=6G disk.img
  if [ "$PARTIAL_GADGET" = true ]; then
      # create gpt volume and add a partition that should be ignored by snapd
      cat << 'EOF' | sfdisk disk.img
  label: gpt
  start=2048, size=2048, type=21686148-6449-6E6F-744E-656564454649, name="BIOS Boot"
  EOF
  fi

  # setup_nested_hybrid_system.sh runs the muinstaller to install a hybrid
  # system
  # shellcheck disable=SC2086
  "${TESTSTOOLS}"/setup_nested_hybrid_system.sh \
     --model classic.model \
     --store-dir "${STORE_DIR}" \
     --gadget pc.snap \
     --gadget-assertion pc.assert \
     --kernel pc-kernel-repacked.snap \
     --kernel-assertion pc-kernel-from-store.assert \
     $kmods_arg \
     --disk disk.img

  # basic things look fine
  remote.exec "cat /etc/os-release" | MATCH 'NAME="Ubuntu"'
  remote.exec "snap changes" | MATCH "Done.* Initialize system state"
  remote.exec "snap list" | MATCH pc-kernel
  if os.query is-ubuntu-ge 24.04; then
      remote.exec snap components pc-kernel | MATCH 'pc-kernel\+efi-pstore'
      # kernel drivers tree has been created
      remote.exec test -d /var/lib/snapd/kernel/pc-kernel/x1
      # efi_pstore has been loaded and comes from the "updates" subfolder
      # efi_pstore is loaded by systemd-pstore.service (pulled by sysinit.target) and must be available
      # early, otherwise it will not have been loaded
      remote.exec lsmod | MATCH efi_pstore
      remote.exec modinfo -F filename efi_pstore | MATCH updates/efi-pstore/kmod/efi-pstore.ko
  fi

  # check encryption
  if [ "$NESTED_ENABLE_TPM" = true ]; then
      remote.exec "sudo test -d /var/lib/snapd/device/fde"
      remote.exec "sudo test -e /var/lib/snapd/device/fde/marker"
      remote.exec "sudo test -e /var/lib/snapd/device/fde/marker"
      remote.exec "sudo blkid /dev/disk/by-label/ubuntu-data-enc" | MATCH crypto_LUKS

      echo "Ensure recovery keys are available on classic FDE too"
      # We check for the key twice (see LP#2036631)
      #shellcheck disable=SC2034
      for i in 1 2; do
          remote.exec "sudo snap recovery --show-keys" > show-keys.out
          MATCH 'recovery:\s+[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}' < show-keys.out
      done

      # check disk mappings
      # TODO: no ubuntu-save right now because:
      #       "ERROR cannot store device key pair: internal error: cannot access device keypair manager if ubuntu-save is unavailable"
      #DISK_MAPPINGS=(/run/mnt/ubuntu-save/device/disk-mapping.json
      #               /run/mnt/data/var/lib/snapd/device/disk-mapping.json)
      DISK_MAPPINGS=(/run/mnt/data/var/lib/snapd/device/disk-mapping.json)
      for DM in "${DISK_MAPPINGS[@]}"; do
          remote.exec "sudo cat $DM" | gojq '.pc."structure-encryption"."ubuntu-save".method' | MATCH '"LUKS"'
          remote.exec "sudo cat $DM" | gojq '.pc."structure-encryption"."ubuntu-data".method' | MATCH '"LUKS"'
      done

      # check that on an already provisioned system the API will give a
      # sensible reason why the system cannot be installed without further
      # action.
      remote.exec "sudo snap debug api /v2/systems/classic" > system
      gojq '.result."storage-encryption".support' < system | MATCH "unavailable"
      gojq '.result."storage-encryption"."unavailable-reason"' < system | MATCH "not encrypting device storage as checking TPM gave: the TPM is in DA lockout mode"
  fi

  if os.query is-ubuntu-ge 24.04; then
  # test refresh of kernel with component
      remote.push pc-kernel-repacked.snap
      remote.push pc-kernel+efi-pstore.comp
      REMOTE_CHG_ID=$(remote.exec sudo snap install --no-wait --dangerous pc-kernel-repacked.snap pc-kernel+efi-pstore.comp)
      retry --wait 1 -n 120 sh -c "remote.exec \"snap change $REMOTE_CHG_ID | grep -E 'Task set to wait until a system restart allows to continue'\""
      boot_id=$(tests.nested boot-id)
      remote.exec sudo reboot || true
      tests.nested wait-for reboot "$boot_id"
      remote.exec sudo snap watch "$REMOTE_CHG_ID"
      remote.exec "snap change $REMOTE_CHG_ID" | NOMATCH Error
      # efi_pstore has been loaded and comes from the "updates" subfolder
      remote.exec lsmod | MATCH efi_pstore
      remote.exec modinfo -F filename efi_pstore | MATCH updates/efi-pstore/kmod/efi-pstore.ko
  fi

  # test kernel/gadget refreshes via the fake-store

  # setup refresh for a rebooting snap
  refresh_rebooting_snap()
  {
      local snap_name=$1
      local snap_orig_blob=$2
      local snap_new_dir=$3

      printf "Test installing snap from file %s\n" "$snap_name"
      # The original blob is just used to locate the original revision assertion
      # that will be used as a template for the new snap file revision assertion.
      fakestore make-refreshable --dir "$STORE_DIR" \
          --snap-orig-blob "$snap_orig_blob" --snap-blob "$snap_new_dir" "$snap_name"
      remote.exec mkdir -p asserts/
      # Order of assertion acking is important
      for p in "$STORE_DIR"/asserts/*.account-key "$STORE_DIR"/asserts/*.snap-declaration "$STORE_DIR"/asserts/*.snap-revision; do
          remote.push "$p" asserts/
          remote.exec sudo snap ack asserts/"$(basename "$p")"
      done
      remote.push "$STORE_DIR"/"$snap_name"_*.snap "${snap_name}.snap"

      boot_id=$(tests.nested boot-id)

      # TODO as in the end we had to do install instead of refreshing from the
      # fakestore (due to issues connecting from the nested VM), we might want
      # to not use it at all.
      REMOTE_CHG_ID=$(remote.exec "sudo snap install --no-wait ${snap_name}.snap")
      # Wait until we stall in the connection of interface as we wait for a reboot
      retry --wait 1 -n 120 sh -c "remote.exec \"snap change $REMOTE_CHG_ID | grep -E 'Task set to wait until a system restart allows to continue'\""

      # Check that a reboot notification was setup
      remote.exec test -f /run/reboot-required
      remote.exec cat /run/reboot-required.pkgs | MATCH "snap:${snap_name}"
      # Check that no reboot has been scheduled, then force a reboot
      remote.exec not test -f /run/systemd/shutdown/scheduled

      remote.exec sudo reboot || true
      tests.nested wait-for reboot "$boot_id"
      remote.exec sudo snap watch "$REMOTE_CHG_ID"
      remote.exec "snap change $REMOTE_CHG_ID" | NOMATCH Error
      remote.exec "journalctl -u snapd" | NOMATCH "cannot mark boot successful"
  }
  # ensure update-notifier-common is installed so that reboot notification works
  remote.exec "sudo apt install -y update-notifier-common"

  # make the fake store available inside the nested vm
  export NESTED_FAKESTORE_BLOB_DIR="$STORE_DIR"
  export NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL="$SNAPPY_FORCE_SAS_URL"

  # nested vm needs to restart for fake-store
  tests.nested vm stop
  tests.nested create-vm core --keep-firmware-state

  # test gadget/kernel refresh

  # Make sure there is a change in assets to update
  sed -i 's/This program cannot be run in DOS mode/This program cannot be run in XXX mode/' pc-gadget/grubx64.efi

  if [ "$SEED_PARTITION" = 'true' ]; then
      role='system-seed'
  else
      role='system-seed-null'
  fi

  # Bump edition of ubuntu-{seed,boot} content to get grub updated in both partitions
  gojq --yaml-input --yaml-output \
      "(.volumes.pc.structure[] | select(.role == \"${role}\") | .update.edition) |= . + 1" \
      pc-gadget/meta/gadget.yaml > gadget.yaml.tmp
  gojq --yaml-input --yaml-output \
      '(.volumes.pc.structure[] | select(.role == "system-boot") | .update.edition) |= . + 1' \
      gadget.yaml.tmp > gadget.yaml.tmp.2
  mv gadget.yaml.tmp.2 pc-gadget/meta/gadget.yaml
  nested_secboot_sign_file pc-gadget/grubx64.efi "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  refresh_rebooting_snap pc pc.snap.orig ./pc-gadget

  # Make sure we installed the new grub
  if os.query is-ubuntu-ge 24.04 && [ "$PARTIAL_GADGET" = false ]; then
      remote.exec 'grep "This program cannot be run in XXX mode" /run/mnt/ubuntu-seed/EFI/ubuntu/grubx64.efi'
  else
      remote.exec 'grep "This program cannot be run in XXX mode" /run/mnt/ubuntu-seed/EFI/boot/grubx64.efi'
  fi
  remote.exec 'grep "This program cannot be run in XXX mode" /run/mnt/ubuntu-boot/EFI/boot/grubx64.efi'

  unsquashfs -d pc-kernel pc-kernel-repacked.snap
  # The kernel snap version has grown too much and when we use the fakestore
  # we append a fake1 string to the version, which can make the string grown
  # beyond the 32 characters limit. Cut '+' character and what goes after to
  # workaround this issue.
  sed -i 's#\(version: .*\)+.*#\1#' pc-kernel/meta/snap.yaml
  refresh_rebooting_snap pc-kernel pc-kernel-from-store.snap ./pc-kernel

  # test that core22+ refreshes fine and does not revert after a reboot
  # (see https://github.com/snapcore/snapd/pull/12532)
  snap download --basename="core${version}" --channel="edge" "core${version}"
  cp "core${version}".snap "core${version}".snap.orig
  # the fakestore needs the assertion
  snap ack "core${version}".assert
  unsquashfs -d "core${version}" "core${version}".snap
  echo "modified" >> ./"core${version}"/etc/motd
  snap pack --filename="core${version}".snap ./"core${version}"
  fakestore make-refreshable --dir "$STORE_DIR" --snap-orig-blob "core${version}.snap.orig" --snap-blob "./core${version}" "core${version}"

  remote.exec sudo snap refresh --amend --channel="edge" "core${version}"
  remote.exec snap list "core${version}" > "core${version}".before-boot
  boot_id=$(tests.nested boot-id)
  remote.exec sudo reboot || true
  tests.nested wait-for reboot "$boot_id"
  # ensure no revert of core22+ was performed
  remote.exec sudo snap changes | NOMATCH "Update kernel and core snap revisions"
  remote.exec snap list "core${version}" > "core${version}".after-boot
  # and check that the versions are the same after boot
  diff -u "core${version}".before-boot "core${version}".after-boot

  if [ "$PARTIAL_GADGET" = true ]; then
      # make sure that our gpt partition is still there
      remote.exec 'test -e "/dev/disk/by-partlabel/BIOS\x20Boot"'
      remote.exec 'sudo fdisk -l /dev/vda' | MATCH '/dev/vda1\s+2048\s+4095\s+2048\s+1M\s+BIOS boot'
  fi

  if [ "$SEED_PARTITION" = 'false' ]; then
      remote.exec not test -e /run/mnt/ubuntu-seed/systems/classic
      exit 0
  fi
  if [ "$version" == 22 ]; then
      # We are not mounting the users file for 22.04, the full recover
      # feature is not supported until 24.04+.
      exit 0
  fi

  # check that seed is properly installed
  remote.exec test -d /run/mnt/ubuntu-seed/systems/classic
  remote.exec "sudo snap recovery" | MATCH "classic\s+developer1\s+developer1-${version}-classic-dangerous\s+current"

  echo "unasserted snaps"
  remote.exec "ls /run/mnt/ubuntu-seed/systems/classic/snaps"

  echo "asserted snaps"
  remote.exec "ls /run/mnt/ubuntu-seed/snaps"

  # on hybrid systems, we bind mount the seed from the mount that is set up by
  # snap-bootstrap (/run/mnt/ubuntu-seed) to /var/lib/snapd/seed. we inject the
  # systemd mount unit for the bind mount at install time, during the
  # "install-finish" task.
  test "$(remote.exec "findmnt /run/mnt/ubuntu-seed/ -o source -n")" = "$(remote.exec "findmnt /var/lib/snapd/seed -o source -n")"
  remote.exec "systemctl is-active var-lib-snapd-seed.mount"

  # check for unasserted snaps
  for sn in pc pc-kernel snapd; do
      sn_version=$(remote.exec "snap list ${sn}" | awk 'NR != 1 { print $2 }' | sed 's/+fake1//')
      remote.exec "test -f /run/mnt/ubuntu-seed/systems/classic/snaps/${sn}_${sn_version}.snap"
  done

  # check for asserted snaps
  core_rev=$(remote.exec "snap list core${version}" | awk 'NR != 1 { print $3 }')
  remote.exec "test -f /run/mnt/ubuntu-seed/snaps/core${version}_${core_rev}.snap"

  # model in the seed should match the one that was installed on the system
  remote.exec "diff <(snap model --assertion) /run/mnt/ubuntu-seed/systems/classic/model"

  boot_id=$(remote.exec "cat /proc/sys/kernel/random/boot_id")
  remote.exec "sudo snap reboot --recover classic"
  remote.wait-for reboot "${boot_id}"

  # we explicitly provide a password since the sudo group is not configured to
  # allow passwordless sudo
  timeout -v 300 remote.exec "echo ubuntu | sudo -S snap wait system seed.loaded"

  remote.exec "groups" | tr ' ' '\n' | sort | xargs | MATCH 'sudo user1'

  remote.exec "snap list" > snap-list
  for name in "pc" "pc-kernel" "snapd" "core${version}"; do
      MATCH "${name}" < snap-list
  done

  for name in passwd shadow group gshadow; do
      remote.exec "findmnt -n /etc/${name}" | awk '{ print $2 }' | MATCH "tmpfs\[/snapd/hybrid-users/${name}\]"
  done
