summary: End-to-end test for install via muinstaller

details: End-to-end test for install via muinstaller

systems: [ubuntu-22.04-64, ubuntu-24.04-64]

environment:
  # No partial gadget by default
  PARTIAL_GADGET: false

  # Test both encrypted and unencrypted install using the muinstaller
  NESTED_ENABLE_TPM/encrypted,partial: true
  NESTED_ENABLE_SECURE_BOOT/encrypted,partial: true

  # unencrypted case
  NESTED_ENABLE_TPM/plain: false
  NESTED_ENABLE_SECURE_BOOT/plain: false

  # Using partial case (TPM used, see above)
  PARTIAL_GADGET/partial: true

  # ensure we use our latest code
  NESTED_BUILD_SNAPD_FROM_CURRENT: true
  NESTED_REPACK_KERNEL_SNAP: true
  NESTED_ENABLE_OVMF: true
  # store related setup
  STORE_ADDR: localhost:11028
  STORE_DIR: $(pwd)/fake-store-blobdir
  # image
  IMAGE_MOUNTPOINT: /mnt/cloudimg

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi
  apt install dosfstools kpartx
  snap install jq
  snap install yq
  "$TESTSTOOLS"/store-state setup-fake-store "$STORE_DIR"

restore: |
  "$TESTSTOOLS"/store-state teardown-fake-store "$STORE_DIR"
  rm -rf ./classic-root

execute: |
  # shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB/prepare.sh"
  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB"/nested.sh

  echo "Expose the needed assertions through the fakestore"
  cp "$TESTSLIB"/assertions/developer1.account "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$STORE_DIR/asserts"
  cp "$TESTSLIB"/assertions/testrootorg-store.account-key "$STORE_DIR/asserts"
  export SNAPPY_FORCE_SAS_URL=http://$STORE_ADDR

  version="$(nested_get_version)"

  # Retrieve the gadget
  snap download --basename=pc --channel="$version/edge" pc
  # the fakestore needs the assertion
  snap ack pc.assert
  # keep original blob just so we can find the assertion later
  cp pc.snap pc.snap.orig

  # New modified gadget
  unsquashfs -d pc-gadget pc.snap
  echo 'console=ttyS0 systemd.journald.forward_to_console=1' > pc-gadget/cmdline.extra
  if [ "$PARTIAL_GADGET" = true ]; then
      # Change to a gadget.yaml where "partial" is being used
      cp gadget-partial.yaml pc-gadget/meta/gadget.yaml
  else
      # use the system-seed-null classic role
      sed -i 's/role: system-seed/role: system-seed-null/' pc-gadget/meta/gadget.yaml
  fi
  echo "Sign the shim binary"
  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"
  tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  snap pack --filename=pc.snap pc-gadget/

  # Retrieve kernel
  snap download --basename=pc-kernel --channel="$version/edge" pc-kernel
  # the fakestore needs this assertion
  snap ack pc-kernel.assert
  # keep original blob just so we can find the assertion later
  cp pc-kernel.snap pc-kernel.snap.orig
  # Build kernel with initramfs with the compiled snap-bootstrap
  uc20_build_initramfs_kernel_snap "$PWD/pc-kernel.snap" "$NESTED_ASSETS_DIR"
  mv "${NESTED_ASSETS_DIR}"/pc-kernel_*.snap pc-kernel.snap

  gendeveloper1 sign-model < "$TESTSLIB"/assertions/developer1-22-classic-dangerous.json > classic.model

  # create new disk for the installer to work on and attach to VM
  truncate --size=4G disk.img
  if [ "$PARTIAL_GADGET" = true ]; then
      # create gpt volume and add a partition that should be ignored by snapd
      cat << 'EOF' | sfdisk disk.img
  label: gpt
  start=2048, size=2048, type=21686148-6449-6E6F-744E-656564454649, name="BIOS Boot"
  EOF
  fi

  # setup_nested_hybrid_system.sh runs the muinstaller to install a hybrid
  # system
  "${TESTSTOOLS}"/setup_nested_hybrid_system.sh \
     --model classic.model \
     --store-dir "${STORE_DIR}" \
     --gadget pc.snap \
     --gadget-assertion pc.assert \
     --kernel pc-kernel.snap \
     --kernel-assertion pc-kernel.assert \
     --disk disk.img

  # things look fine
  remote.exec "cat /etc/os-release" | MATCH 'NAME="Ubuntu"'
  remote.exec "snap changes" | MATCH "Done.* Initialize system state"
  remote.exec "snap list" | MATCH pc-kernel

  # check encryption
  if [ "$NESTED_ENABLE_TPM" = true ]; then
      remote.exec "sudo test -d /var/lib/snapd/device/fde"
      remote.exec "sudo test -e /var/lib/snapd/device/fde/marker"
      remote.exec "sudo test -e /var/lib/snapd/device/fde/marker"
      remote.exec "sudo blkid /dev/disk/by-label/ubuntu-data-enc" | MATCH crypto_LUKS

      echo "Ensure recovery keys are available on classic FDE too"
      # We check for the key twice (see LP#2036631)
      #shellcheck disable=SC2034
      for i in 1 2; do
          remote.exec "sudo snap recovery --show-keys" > show-keys.out
          MATCH 'recovery:\s+[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{5}' < show-keys.out
      done

      # check disk mappings
      remote.exec "sudo snap install jq"
      # TODO: no ubuntu-save right now because:
      #       "ERROR cannot store device key pair: internal error: cannot access device keypair manager if ubuntu-save is unavailable"
      #DISK_MAPPINGS=(/run/mnt/ubuntu-save/device/disk-mapping.json
      #               /run/mnt/data/var/lib/snapd/device/disk-mapping.json)
      DISK_MAPPINGS=(/run/mnt/data/var/lib/snapd/device/disk-mapping.json)
      for DM in "${DISK_MAPPINGS[@]}"; do
          remote.exec "sudo cat $DM | jq '.pc.\"structure-encryption\".\"ubuntu-save\".method'" | MATCH '"LUKS"'
          remote.exec "sudo cat $DM | jq '.pc.\"structure-encryption\".\"ubuntu-data\".method'" | MATCH '"LUKS"'
      done

      # check that on an already provisioned system the API will give a
      # sensible reason why the system cannot be installed without further
      # action.
      remote.exec "sudo apt install -y curl"
      remote.exec "sudo curl -s --unix-socket /run/snapd.socket http://localhost/v2/systems/classic" > system
      jq '.result."storage-encryption".support' < system | MATCH "unavailable"
      jq '.result."storage-encryption"."unavailable-reason"' < system | MATCH "not encrypting device storage as checking TPM gave: the TPM is in DA lockout mode"
  fi

  # test kernel/gadget refreshes via the fake-store

  # setup refresh for a rebooting snap
  refresh_rebooting_snap()
  {
      local snap_name=$1
      local snap_orig_blob=$2
      local snap_new_dir=$3

      printf "Test installing snap from file %s\n" "$snap_name"
      # The original blob is just used to locate the original revision assertion
      # that will be used as a template for the new snap file revision assertion.
      fakestore make-refreshable --dir "$STORE_DIR" \
          --snap-orig-blob "$snap_orig_blob" --snap-blob "$snap_new_dir" "$snap_name"
      remote.exec mkdir -p asserts/
      # Order of assertion acking is important
      for p in "$STORE_DIR"/asserts/*.account-key "$STORE_DIR"/asserts/*.snap-declaration "$STORE_DIR"/asserts/*.snap-revision; do
          remote.push "$p" asserts/
          remote.exec sudo snap ack asserts/"$(basename "$p")"
      done
      remote.push "$STORE_DIR"/"$snap_name"_*.snap "${snap_name}.snap"

      boot_id=$(tests.nested boot-id)

      # TODO as in the end we had to do install instead of refreshing from the
      # fakestore (due to issues connecting from the nested VM), we might want
      # to not use it at all.
      REMOTE_CHG_ID=$(remote.exec "sudo snap install --no-wait ${snap_name}.snap")
      # Wait until we stall in the connection of interface as we wait for a reboot
      retry --wait 1 -n 120 sh -c "remote.exec \"snap change $REMOTE_CHG_ID | grep -E 'Task set to wait until a system restart allows to continue'\""

      # Check that a reboot notification was setup
      remote.exec test -f /run/reboot-required
      remote.exec cat /run/reboot-required.pkgs | MATCH "snap:${snap_name}"
      # Check that no reboot has been scheduled, then force a reboot
      remote.exec not test -f /run/systemd/shutdown/scheduled

      remote.exec sudo reboot || true
      tests.nested wait-for reboot "$boot_id"
      remote.exec sudo snap watch "$REMOTE_CHG_ID"
      remote.exec "snap change $REMOTE_CHG_ID" | NOMATCH Error
      remote.exec "journalctl -u snapd" | NOMATCH "cannot mark boot successful"
  }
  # ensure update-notifier-common is installed so that reboot notification works
  remote.exec "sudo apt install -y update-notifier-common"

  # make the fake store available inside the nested vm
  export NESTED_FAKESTORE_BLOB_DIR="$STORE_DIR"
  export NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL="$SNAPPY_FORCE_SAS_URL"

  # nested vm needs to restart for fake-store
  tests.nested vm stop
  tests.nested create-vm core --tpm-no-restart

  # test gadget/kernel refresh

  # Make sure there is a change in assets to update
  sed -i 's/This program cannot be run in DOS mode/This program cannot be run in XXX mode/' pc-gadget/grubx64.efi
  # Bump edition of ubuntu-{seed,boot} content to get grub updated in both partitions
  yq -i '(.volumes.pc.structure[] | select(.role == "system-seed-null") | .update.edition) |= . + 1' pc-gadget/meta/gadget.yaml
  yq -i '(.volumes.pc.structure[] | select(.role == "system-boot") | .update.edition) |= . + 1' pc-gadget/meta/gadget.yaml
  nested_secboot_sign_file pc-gadget/grubx64.efi "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  refresh_rebooting_snap pc pc.snap.orig ./pc-gadget

  # Make sure we installed the new grub
  remote.exec 'grep "This program cannot be run in XXX mode" /run/mnt/ubuntu-seed/EFI/boot/grubx64.efi'
  remote.exec 'grep "This program cannot be run in XXX mode" /run/mnt/ubuntu-boot/EFI/boot/grubx64.efi'

  unsquashfs -d pc-kernel pc-kernel.snap
  refresh_rebooting_snap pc-kernel pc-kernel.snap.orig ./pc-kernel

  version="$(nested_get_version)"

  # test that core22+ refreshes fine and does not revert after a reboot
  # (see https://github.com/snapcore/snapd/pull/12532)
  snap download --basename="core${version}" --channel="edge" "core${version}"
  cp "core${version}".snap "core${version}".snap.orig
  # the fakestore needs the assertion
  snap ack "core${version}".assert
  unsquashfs -d "core${version}" "core${version}".snap
  echo "modified" >> ./"core${version}"/etc/motd
  snap pack --filename="core${version}".snap ./"core${version}"
  fakestore make-refreshable --dir "$STORE_DIR" --snap-orig-blob "core${version}.snap.orig" --snap-blob "./core${version}" "core${version}"

  remote.exec sudo snap refresh --amend --channel="edge" "core${version}"
  remote.exec snap list "core${version}" > "core${version}".before-boot
  boot_id=$(tests.nested boot-id)
  remote.exec sudo reboot || true
  tests.nested wait-for reboot "$boot_id"
  # ensure no revert of core22+ was performed
  remote.exec sudo snap changes | NOMATCH "Update kernel and core snap revisions"
  remote.exec snap list "core${version}" > "core${version}".after-boot
  # and check that the versions are the same after boot
  diff -u "core${version}".before-boot "core${version}".after-boot

  if [ "$PARTIAL_GADGET" = true ]; then
      # make sure that our gpt partition is still there
      remote.exec 'test -e "/dev/disk/by-partlabel/BIOS\x20Boot"'
      remote.exec 'sudo fdisk -l /dev/vda' | MATCH '/dev/vda1\s+2048\s+4095\s+2048\s+1M\s+BIOS boot'
  fi
