summary: verify a simple UC2* remodel

details: |
  This test verifies that we can remodel a UC2* system to a new model. The test
  performs a few remodels to exercise various scenarios.

  Notably, we validate that we can remodel to a model that requires a snap that
  requires a base that was not previously installed on the system. A remodel of
  this kind requires snaps to be installed in a specific order.

systems: [ubuntu-2*]

environment:
  NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/valid-for-testing-pc-{VERSION}.model
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

prepare: |
    tests.nested build-image core
    tests.nested create-vm core

execute: |
    # shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"
    boot_id="$(tests.nested boot-id)"
    remote.exec snap model |MATCH 'model +my-model$'
    # XXX: recovery system label is based on a date; we may end up with a
    # different label if the remodel runs around midnight; the label will
    # conflict with an existing system label
    label_base=$(remote.exec "date '+%Y%m%d'")

    # wait until device is initialized and has a serial
    remote.wait-for device-initialized

    # Get the nested system version
    VERSION="$(tests.nested show version)"

    echo "Refresh model assertion to revision 2"
    remote.push "$TESTSLIB/assertions/valid-for-testing-pc-revno-2-$VERSION.model"
    REMOTE_CHG_ID="$(remote.exec sudo snap remodel --no-wait "valid-for-testing-pc-revno-2-$VERSION.model")"
    remote.wait-for reboot "${boot_id}"
    remote.exec sudo snap watch "${REMOTE_CHG_ID}"

    echo "Verify the system is back in run mode"
    remote.exec "sudo cat /proc/cmdline" | MATCH snapd_recovery_mode=run

    # this is a simple model revision refresh
    echo "Verify the model"
    remote.exec snap model --verbose > rev-2-model
    MATCH 'model: +my-model' < rev-2-model
    MATCH 'revision: +2' < rev-2-model

    # seed system was created
    revno2_label="${label_base}-1"
    echo "Verify seed system with label $revno2_label"
    remote.exec "sudo cat /run/mnt/ubuntu-seed/systems/${revno2_label}/model" > revno-2-from-seed.model
    MATCH 'model: my-model' < revno-2-from-seed.model
    MATCH 'revision: 2' < revno-2-from-seed.model
    remote.exec "sudo cat /var/lib/snapd/modeenv" > modeenv
    MATCH "current_recovery_systems=.*,${revno2_label}" < modeenv
    MATCH "good_recovery_systems=.*,${revno2_label}" < modeenv
    remote.exec "sudo snap debug boot-vars --root-dir=/run/mnt/ubuntu-seed" | MATCH "snapd_good_recovery_systems=${label_base},${revno2_label}"

    # the revision pulls in test-snapd-tools-core2*, hello-world, and core
    # snaps. the snaps are listed in the model with apps prior to bases so that
    # we verify that the installation happens in the correct order (bases before
    # snaps)
    echo "Verify new model revision snaps"
    remote.exec snap list "test-snapd-tools-core$VERSION"
    remote.exec snap list "hello-world"
    remote.exec snap list "core"

    # the snaps are pulled in from the store, so they should be located in shared
    # snaps directory
    remote.exec find /run/mnt/ubuntu-seed/snaps -name "test-snapd-tools-core${VERSION}_*.snap" | MATCH "test-snapd-tools-core$VERSION"
    remote.exec find /run/mnt/ubuntu-seed/snaps -name "core_*.snap" | MATCH "core"
    remote.exec find /run/mnt/ubuntu-seed/snaps -name "hello-world_*.snap" | MATCH "hello-world"

    boot_id="$(tests.nested boot-id)"

    echo "Refresh model assertion to revision 3"
    remote.push "$TESTSLIB/assertions/valid-for-testing-pc-revno-3-$VERSION.model"
    REMOTE_CHG_ID="$(remote.exec sudo snap remodel --no-wait "valid-for-testing-pc-revno-3-$VERSION.model")"
    remote.wait-for reboot "${boot_id}"
    remote.exec sudo snap watch "${REMOTE_CHG_ID}"

    echo "Verify the model"
    remote.exec snap model --verbose > rev-3-model
    MATCH 'model: +my-model' < rev-3-model
    MATCH 'revision: +3' < rev-3-model

    # seed system was created
    revno3_label="${label_base}-2"
    echo "Verify seed system with label $revno3_label"
    remote.exec "sudo cat /run/mnt/ubuntu-seed/systems/${revno3_label}/model" > revno-3-from-seed.model
    MATCH 'model: my-model' < revno-3-from-seed.model
    MATCH 'revision: 3' < revno-3-from-seed.model
    remote.exec "sudo cat /var/lib/snapd/modeenv" > modeenv
    MATCH "current_recovery_systems=.*,${revno3_label}" < modeenv
    MATCH "good_recovery_systems=.*,${revno3_label}" < modeenv
    remote.exec "sudo snap debug boot-vars --root-dir=/run/mnt/ubuntu-seed" | MATCH "snapd_good_recovery_systems=${label_base},${revno2_label},${revno3_label}"

    # because the system is considered 'seeded' we are able to switch to the
    # recover mode
    echo "Switch to recover mode of new seed system"
    boot_id="$(tests.nested boot-id)"
    remote.exec sudo snap reboot --recover "${revno3_label}" | MATCH 'Reboot into ".*" "recover" mode'
    remote.wait-for reboot "${boot_id}"
    # Verify we are in recover mode with the expected system label
    remote.exec 'sudo cat /proc/cmdline' | MATCH "snapd_recovery_mode=recover snapd_recovery_system=${revno3_label} "

    # we are in recover mode, so tools need to be set up again
    nested_prepare_tools

    boot_id="$(tests.nested boot-id)"
    echo "And back to run mode"
    remote.wait-for snap-command
    remote.exec "sudo snap wait system seed.loaded"
    remote.exec sudo snap reboot --run | MATCH 'Reboot into "run" mode.'
    remote.wait-for reboot "${boot_id}"
    remote.exec 'sudo cat /proc/cmdline' | MATCH "snapd_recovery_mode=run "

    echo "Verify all recovery systems are listed"
    remote.exec "sudo snap recovery" > recovery.out
    for label in "$label_base" "$revno2_label" "$revno3_label"; do
        MATCH "$label " < recovery.out
    done
