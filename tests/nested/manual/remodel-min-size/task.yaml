summary: verify remodel to a new gadget that uses min-size
details: |
  Execute a remodel scenario where we switch to a different gadget
  that does not have the same partition size for ubuntu-save as the
  previous one, but that uses min-size so it is compatible. The model
  name does not change, we remodel to a new revision of the model
  assertion that uses a different gadget to the one used when building
  the image.

systems: [ubuntu-22.04-64, ubuntu-24.04-64]

environment:
  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/test-snapd-remodel-auto-import.assert
  NESTED_ENABLE_TPM: false
  NESTED_ENABLE_SECURE_BOOT: false
  NESTED_USE_CLOUD_INIT: false
  NESTED_REPACK_KERNEL_SNAP: false
  NESTED_REPACK_GADGET_SNAP: false
  NESTED_REPACK_BASE_SNAP: false
  SNAPD_TEST_BRAND: test-snapd
  # store we are remodeling from
  SNAPD_STORE_FROM: CQvkdMjgbapk821Po2cF
  # device serial, no sub-store mapping rules needed for this one
  SERIAL: 9999-snapd-remodel-testing
  GADGET_NAME: test-snapd-remodel-pc
  NEW_GADGET_NAME: test-snapd-remodel-pc-min-size

prepare: |
  variant=$(tests.nested show version)

  # Modify gadget so it sends the suggested serial
  GADGET_D=$GADGET_NAME
  cp -av "$TESTSLIB/snaps/$GADGET_NAME-$variant" "$GADGET_D"
  test -n "$SERIAL"
  echo "$SERIAL" > "$GADGET_D"/serial
  snap pack "$GADGET_D"

  GADGET_SNAP=$(find . -maxdepth 1 -name "$GADGET_NAME"_\*.snap -printf "%f")
  mv "$GADGET_SNAP" "$(tests.nested get extra-snaps-path)"

  # Use UBUNTU_STORE_AUTH_DATA_FILENAME en var to authenticate against the store
  # with the remodel-store-viewer user. The file authentication is generated by using
  # snapcraft 6.x and running the command 'snapcraft export-login <filename>'
  # Every 12 months (in January) the auth file needs to be regenerated.
  export UBUNTU_STORE_AUTH_DATA_FILENAME="$TESTSLIB/remodel-store-viewer.auth"
  export NESTED_CUSTOM_MODEL="$TESTSLIB/assertions/test-snapd-remodel-pc-rev0-$variant.model"
  tests.nested build-image core
  tests.nested create-vm core

execute: |
  variant=$(tests.nested show version)
  boot_id=$(tests.nested boot-id)

  # wait until device is initialized and has a serial
  remote.wait-for device-initialized

  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  remote.exec "snap model --assertion" | MATCH "store: $SNAPD_STORE_FROM\$"
  remote.exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc$'
  remote.exec "snap model --assertion --serial" | MATCH "serial: ${SERIAL}\$"
  # check ubuntu-save size
  usaveSz=$(remote.exec "sudo blockdev --getsize64 /dev/disk/by-label/ubuntu-save")
  test "$usaveSz" -eq 16777216

  new_model_rev=test-snapd-remodel-pc-rev1-$variant.model
  remote.push "$TESTSLIB/assertions/$new_model_rev"
  CHANGE_ID=$(remote.exec "sudo snap remodel --no-wait $new_model_rev")
  test -n "$CHANGE_ID"
  # very long retry wait for the change to be in stable state, where stable
  # means that it's done or failed in which case we fail the test on the next
  # check just below
  retry -n 100 --wait 5 sh -c \
      "remote.exec sudo snap changes | MATCH '^${CHANGE_ID}\s+(Done|Undone|Error)'"
  # check that the change was successful
  remote.exec "sudo snap changes" | MATCH "^${CHANGE_ID}\s+Done"

  current_boot_id=$(tests.nested boot-id)
  # we should have rebooted a couple of times (at least twice for the recovery
  # system and the base), so boot-id should be different
  test "$boot_id" != "$current_boot_id"

  # the new gadget snap is installed
  remote.exec snap list "$NEW_GADGET_NAME" | MATCH gadget

  # for the model, only the revision changes
  remote.exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
  remote.exec "snap model --assertion" | MATCH "store: $SNAPD_STORE_FROM\$"
  remote.exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc$'
  remote.exec "snap model --assertion --serial" | MATCH "serial: ${SERIAL}\$"
  remote.exec "snap model --assertion" | MATCH '^revision: 1$'

  # check min-size and size are 16M/32M
  #shellcheck disable=SC2002
  remote.exec cat /snap/"$NEW_GADGET_NAME"/current/meta/gadget.yaml | MATCH 'min-size: 16M'
  #shellcheck disable=SC2002
  remote.exec cat /snap/"$NEW_GADGET_NAME"/current/meta/gadget.yaml | MATCH 'size: 32M'
  # check ubuntu-save size did not change
  usaveSz=$(remote.exec "sudo blockdev --getsize64 /dev/disk/by-label/ubuntu-save")
  test "$usaveSz" -eq 16777216
