summary: Test that config defaults are applied early when image is created.

details: |
    Snapd gadget snaps have influence over the default configuration of seeded
    snaps. The test verifies that a gadget snap can effectively apply default
    configuration settings to a system that is booted for the first time.

# core18 specific test (and nested vm is derived from host system)
systems: [ubuntu-18.04-64]

prepare: |
    # modify and repack gadget snap (add defaults section and install hook)
    snap download --channel=18/stable pc
    GADGET_SNAP=$(ls pc_*.snap)
    unsquashfs -no-progress "$GADGET_SNAP"
    rm -f "$GADGET_SNAP"
    cat defaults.yaml >> squashfs-root/meta/gadget.yaml
    mkdir -p squashfs-root/meta/hooks
    cp install squashfs-root/meta/hooks/
    mksquashfs squashfs-root "$GADGET_SNAP" -comp xz -no-fragments -no-progress
    rm -rf squashfs-root
    mv "$GADGET_SNAP" "$(tests.nested get extra-snaps-path)"

    tests.nested build-image core 

    # Modify seed to use devmode for pc gadget snap. This is needed for the
    # install hook to have access to /etc/systemd. Ideally we would use
    # system-files plug, but it wouldn't get autoconnected due to assertions.
    IMAGE_NAME="$(tests.nested get image-name core)"
    loops=$(kpartx -avs "$(tests.nested get images-path)/$IMAGE_NAME"  | cut -d' ' -f 3)
    part=$(echo "$loops" | tail -1)
    tmp=$(mktemp -d)
    mount "/dev/mapper/$part" "$tmp"
    sed -i "$tmp/system-data/var/lib/snapd/seed/seed.yaml" -E -e 's/^(\s+)file: pc_x1.snap/\1file: pc_x1.snap\n\1devmode: true\n/'
    umount "$tmp"
    kpartx -d "$(tests.nested get images-path)/$IMAGE_NAME"
    rmdir "$tmp"

    tests.nested create-vm core

execute: |
    remote.exec "sudo snap wait system seed.loaded"

    echo "Test that rsyslog was disabled early."
    # early config is witnessed by install hook of the pc gadget
    remote.exec "cat /var/snap/pc/common/debug.txt" | MATCH "rsyslog symlink: /dev/null"
    remote.exec "test -L /etc/systemd/system/rsyslog.service"

    echo "Check that the timezone is set"
    remote.exec "readlink -f /etc/localtime" | MATCH "Europe/Malta"
    remote.exec "cat /var/snap/pc/common/debug.txt" | MATCH "localtime symlink: /usr/share/zoneinfo/Europe/Malta"

    echo "Check that console-conf is disabled"
    remote.exec "cat /var/lib/console-conf/complete" | MATCH "console-conf has been disabled by the snapd system configuration"

    # hostname is set
    remote.exec "cat /etc/hostname" | MATCH "F00"
