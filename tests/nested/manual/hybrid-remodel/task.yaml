summary: Test remodeling on a hybrid system

details: |
  This test remodels on a hybrid system to install a new kernel snap and new
  application snaps.

systems: [ubuntu-22.04-64, ubuntu-24.04-64]

environment:
  NESTED_BUILD_SNAPD_FROM_CURRENT: true
  NESTED_REPACK_KERNEL_SNAP: true
  NESTED_ENABLE_OVMF: true

  NESTED_SIGN_SNAPS_FAKESTORE: true
  # for the fake store
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

prepare: |
  VERSION="$(tests.nested show version)"

  snap install remarshal lxd
  snap install --edge test-snapd-swtpm
  snap install snapcraft --classic

  case "${VERSION}" in
    22)
      snap_app_name=jq-core22
      snap_app_id="vFTrGWyktbEDwuYJjdsZykV270mqcNz8"
      app_channel="latest/edge"
    ;;
    24)
      snap_app_name=test-snapd-jq-core24
      snap_app_id="zBAzEImJzOAoGxmoG5o6Tl6ELZXMeUlt"
      app_channel="latest/stable"
    ;;
  esac
  snap download --channel="${app_channel}" "${snap_app_name}" --basename="${snap_app_name}"

  "${TESTSTOOLS}/store-state" setup-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"
  for key in "${TESTSLIB}"/assertions/{testrootorg-store.account-key,developer1.account,developer1.account-key}; do
    cp "${key}" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    snap ack "${key}"
  done

  "${TESTSTOOLS}"/store-state make-snap-installable --noack "${NESTED_FAKESTORE_BLOB_DIR}" "${snap_app_name}.snap" "${snap_app_id}"

  tests.nested prepare_essential_snaps

  extra_snaps="$(tests.nested get extra-snaps-path)"

  # shellcheck source=tests/lib/prepare.sh
  . "$TESTSLIB/prepare.sh"

  case "${VERSION}" in
    22)
      # use 23.10 instead
      snap download pc-kernel --channel=23.10/beta  --basename="pc-kernel-23.10"
      rm -rf pc-kernel-repacked/
      mkdir -p pc-kernel-repacked/
      uc20_build_initramfs_kernel_snap pc-kernel-23.10.snap pc-kernel-repacked/
      mv pc-kernel-repacked/pc-kernel_*.snap "${extra_snaps}/pc-kernel-23.10.snap"
      rmdir pc-kernel-repacked
      pc_kernel_orig="${extra_snaps}/pc-kernel-23.10.snap"
      "${TESTSTOOLS}"/store-state make-snap-installable --noack --revision 2 "${NESTED_FAKESTORE_BLOB_DIR}" "${pc_kernel_orig}" "pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza"
    ;;
    *)
      pc_kernel_orig="${extra_snaps}/pc-kernel.snap"
    ;;
  esac

  unsquashfs -d pc-kernel "${pc_kernel_orig}"

  sed -i 's/^\(version: .*\)/\1-oem/' pc-kernel/meta/snap.yaml

  # Re-sign the kernel to force a reseal
  # shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"
  KEY_NAME=$(nested_get_snakeoil_key)
  sha256sum pc-kernel/kernel.efi
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"
  nested_secboot_sign_kernel pc-kernel "${SNAKEOIL_KEY}" "${SNAKEOIL_CERT}"
  sha256sum pc-kernel/kernel.efi

  snap pack pc-kernel --filename="${extra_snaps}/pc-kernel-oem.snap"

  rm -rf pc-kernel
  "${TESTSTOOLS}"/store-state make-snap-installable --noack --revision 3 "${NESTED_FAKESTORE_BLOB_DIR}" "${extra_snaps}/pc-kernel-oem.snap" "pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza"

  if [ "$VERSION" == 22 ]; then
    PC_VERSION="23.10"
  else
    PC_VERSION="${VERSION}.04"
  fi
  snap download --basename=pc --channel="classic-${PC_VERSION}/stable" pc

  unsquashfs -d pc pc.snap
  rm -rf pc.snap
  case "${VERSION}" in
    24)
      sed -i 's/^base: core22$/base: core24/' pc/meta/snap.yaml
    ;;
  esac
  mkdir -p pc/meta/hooks/
  cp prepare-device pc/meta/hooks/
  chmod +x pc/meta/hooks/prepare-device
  echo "console=ttyS0 systemd.journald.forward_to_console=1" >>pc/cmdline.extra
  snap pack pc --filename="${extra_snaps}/pc-prepare-device.snap"
  rm -rf pc
  "${TESTSTOOLS}"/store-state make-snap-installable --noack --revision 2 "${NESTED_FAKESTORE_BLOB_DIR}" "${extra_snaps}/pc-prepare-device.snap" "UqFziVZDHLSyO3TqSWgNBoAdHbLI4dAH"

  for snap in "${extra_snaps}"/snapd*.snap; do
    "${TESTSTOOLS}"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "${snap}" latest/stable
  done
  "${TESTSTOOLS}"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "${extra_snaps}/core${VERSION}.snap" latest/edge
  "${TESTSTOOLS}"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "${pc_kernel_orig}" "${VERSION}/edge"
  "${TESTSTOOLS}"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "${extra_snaps}/pc-kernel-oem.snap" "${VERSION}-oem/stable"
  "${TESTSTOOLS}"/store-state add-to-channel "${NESTED_FAKESTORE_BLOB_DIR}" "${extra_snaps}/pc-prepare-device.snap" "${VERSION}/edge"

  getassert() {
    FILENAME=$1
    ID=$2
    SUM="$(snap info --verbose "$(realpath "${FILENAME}")" | sed '/^sha3-384: */{;s///;q;};d')"
    cat "${TESTSLIB}/assertions/developer1.account-key"
    echo
    SNAPPY_FORCE_SAS_URL="${NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL}" snap known --remote snap-declaration snap-id="${ID}" series=16
    echo
    SNAPPY_FORCE_SAS_URL="${NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL}" snap known --remote snap-revision snap-sha3-384="${SUM}"
  }

  getassert "${pc_kernel_orig}" "pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza" >pc-kernel.assert
  getassert "${extra_snaps}/pc-prepare-device.snap" "UqFziVZDHLSyO3TqSWgNBoAdHbLI4dAH" >pc.assert

  gendeveloper1 sign-model <"${TESTSLIB}/assertions/developer1-${VERSION}-classic-dangerous.json" >"${TESTSLIB}/assertions/developer1-${VERSION}-classic-dangerous.model"
  gendeveloper1 sign-model <"${TESTSLIB}/assertions/developer1-${VERSION}-classic-dangerous-rev1.json" >"${TESTSLIB}/assertions/developer1-${VERSION}-classic-dangerous-rev1.model"

  HYBRID_SYSTEM_MK_ROOT_FS="${PWD}/prepare-rootfs.sh" \
  SNAPPY_FORCE_SAS_URL="${NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL}" \
  "${TESTSTOOLS}"/setup_nested_hybrid_system.sh \
     --model "${TESTSLIB}/assertions/developer1-${VERSION}-classic-dangerous.model" \
     --gadget "${extra_snaps}/pc-prepare-device.snap" \
     --gadget-assertion pc.assert \
     --kernel "${pc_kernel_orig}" \
     --kernel-assertion pc-kernel.assert

  systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

restore: |
  systemctl stop fakedevicesvc.service || true
  "${TESTSTOOLS}/store-state" teardown-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"
  tests.systemd stop-unit --remove "nested-vm"

debug: |
  journalctl -u fakestore.service
  journalctl -u snapd.service

execute: |
  remote.wait-for device-initialized

  # install this so that we get reboot notifications
  remote.exec "sudo apt install -y update-notifier-common"

  VERSION="$(tests.nested show version)"

  remote.push "${TESTSLIB}/assertions/developer1-${VERSION}-classic-dangerous-rev1.model"

  # remodel and reboot. we need to reboot because we swapped the kernel snap
  change_id=$(remote.exec "sudo snap remodel --no-wait developer1-${VERSION}-classic-dangerous-rev1.model")
  retry -n 100 --wait 5 remote.exec "snap tasks ${change_id} | grep 'INFO Task set to wait until a system restart allows to continue'"
  remote.exec 'test -f /run/reboot-required'

  boot_id="$(tests.nested boot-id)"
  remote.exec 'sudo reboot' || true
  remote.wait-for reboot "${boot_id}"
  remote.exec snap watch "${change_id}"
  remote.exec 'snap changes' | MATCH "${change_id}\s+Done.+Refresh model assertion from revision 0 to 1"

  remote.exec "snap list" | MATCH "jq-core${VERSION}"

  case "$VERSION" in
    22|24)
      remote.exec 'snap list pc-kernel' | awk 'NR != 1 { print $4 }' | MATCH "${VERSION}-oem/stable"
      ;;
  esac

  # TODO: once we support installing recovery systems during the hybrid install,
  # we should switch this test to use a gadget that does not use "system-seed-null"
