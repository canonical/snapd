summary: Verify snapctl poweroff install-device hook usage

details: |
    This test checks support for shutting down the device at the end of install
    mode via the install-device hook

systems: [ubuntu-20.04-64]

environment:
    NESTED_IMAGE_ID: core20-install-device
    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_ENABLE_TPM: true
    NESTED_ENABLE_SECURE_BOOT: true

prepare: |
    # needed for inspecting the partitions
    snap install jq
    tests.cleanup defer snap remove jq

    KEY_NAME=$(tests.nested download snakeoil-key)
    SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
    SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

    echo "Grab and prepare the gadget snap"
    snap download --basename=pc --channel="20/edge" pc
    unsquashfs -d pc-gadget pc.snap

    echo "Sign the shim binary"
    tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

    echo "Add the install-device hook"
    mkdir -p pc-gadget/meta/hooks
    cp install-device pc-gadget/meta/hooks/install-device
    snap pack pc-gadget/ "$(tests.nested get extra-snaps-path)"

    tests.nested build-image core

restore: |
    # Cleanup restore is needed in this case because nested tests are not
    # doing automatic cleanups
    tests.cleanup restore

execute: |
    #shellcheck source=tests/lib/systemd.sh
    . "$TESTSLIB/systemd.sh"
    #shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"

    # we expect the VM to shut itself down so don't wait for SSH, etc. to become
    # available
    echo "Start the VM, which should automatically shut itself down"

    # below is extracted from nested_start_core_vm, we don't want the 
    # nested_prepare_ssh to run yet, since it will fail when the VM shuts itself
    # down, we need to manually run it later
    CURRENT_NAME="$(tests.nested get current-name)"
    CURRENT_IMAGE="$(tests.nested get images-path)/$CURRENT_NAME"
    IMAGE_NAME="$(tests.nested get image-name core)"
    IMAGE_FILE="$(tests.nested get images-path)/$IMAGE_NAME"
    cp -v "$IMAGE_FILE" "$CURRENT_IMAGE"

    NESTED_EXPECT_SHUTDOWN=1 nested_start_core_vm_unit "$IMAGE_FILE"

    echo "Wait for the VM to become inactive as it installs and shuts itself down"
    wait_for_service "$NESTED_VM" inactive

    echo "Check that the partitions were created on the VM's disk"
    sfdisk --json "$IMAGE_FILE" | jq -r '.partitiontable.partitions | .[].name' > partitions.txt
    # note that ubuntu-data and ubuntu-save have partition labels without the 
    # -enc suffix, but have filesystem labels of ubuntu-data-enc etc, here we
    # are just seeing the partition labels, we check the filesystem labels and
    # thus whether encryption happened below when the VM boots up
    MATCH "BIOS Boot" < partitions.txt
    MATCH "ubuntu-seed" < partitions.txt
    MATCH "ubuntu-boot" < partitions.txt
    MATCH "ubuntu-save" < partitions.txt
    MATCH "ubuntu-data" < partitions.txt

    echo "Now starting the VM again will proceed to run mode appropriately"
    tests.nested vm start

    # setup SSH since that was not done with the previous stage, as the device
    # shut down while still in install mode, we need to manually do this stage
    nested_prepare_ssh

    # the start-vm command just waits for SSH, it doesn't wait for the other 
    # things here, so wait for those too
    tests.nested wait-for snap-command
    # Wait for snap seeding to be done
    tests.nested exec "sudo snap wait system seed.loaded"
    # Wait for cloud init to be done
    tests.nested exec "cloud-init status --wait"

    echo "The device is using encrypted ubuntu-data and is in run mode now"
    tests.nested exec test -L /dev/disk/by-label/ubuntu-data-enc
    tests.nested exec cat /proc/cmdline | MATCH "snapd_recovery_mode=run"
