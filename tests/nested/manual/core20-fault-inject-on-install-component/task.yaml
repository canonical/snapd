summary: Ensure that a kernel component can be installed when a panic occurs during the process

details: |
    The test checks that if a fault is injected during the installation of a kernel component,
    then the change continues an is completed with a predictable outcome.

systems: [-ubuntu-1*, -ubuntu-20*, -ubuntu-22*]

environment: 
    TAG/kernel_panic_prepare_kernel_components: prepare-kernel-components
    FAULT/kernel_panic_prepare_kernel_components: panic

    NESTED_BUILD_SNAPD_FROM_CURRENT: true
    NESTED_REPACK_KERNEL_SNAP: false
    NESTED_ENABLE_OVMF: true

prepare: |
    # Modify kernel and create a component
    VERSION="$(tests.nested show version)"
    snap download --channel="$VERSION"/beta pc-kernel
    unsquashfs -d kernel pc-kernel_*.snap
    kern_ver=$(find kernel/modules/* -maxdepth 0 -printf "%f\n")
    comp_ko_dir=wifi-comp/modules/"$kern_ver"/wireless/
    mkdir -p "$comp_ko_dir"
    mkdir -p wifi-comp/meta/
    cp component.yaml wifi-comp/meta/
    hwsim_path=$(find kernel -name mac80211_hwsim.ko\*)
    cp "$hwsim_path" "$comp_ko_dir"
    snap pack wifi-comp

    # Create kernel without the kernel module
    rm "$hwsim_path"
    # depmod wants a lib subdir, fake it and remove after invocation
    mkdir kernel/lib
    ln -s ../modules kernel/lib/modules
    depmod -b kernel/ "$kern_ver"
    rm -rf kernel/lib
    rm pc-kernel_*.snap
    # append component meta-information
    printf 'components:\n  wifi-comp:\n    type: kernel-modules\n' >> kernel/meta/snap.yaml
    snap pack kernel

    cp pc-kernel_*.snap "$(tests.nested get extra-snaps-path)"
    tests.nested build-image core
    tests.nested create-vm core

    echo "Inject a $FAULT on $TAG"
    cat <<EOF > fault-inject.conf
    [Service]
    Environment=SNAPPY_TESTING=1
    Environment=SNAPD_FAULT_INJECT=$TAG:$FAULT
    EOF

    echo "Wait for the system to be seeded first"
    remote.exec "sudo snap wait system seed.loaded"

    remote.push fault-inject.conf
    remote.exec "sudo mkdir -p /etc/systemd/system/snapd.service.d"
    remote.exec "sudo cp -v fault-inject.conf /etc/systemd/system/snapd.service.d/"
    remote.exec "sudo systemctl daemon-reload"
    remote.exec "sudo systemctl restart snapd.service"

execute: |
    # install the component
    comp_file=pc-kernel+wifi-comp_1.0.comp
    remote.push "$comp_file"
    change_id="$(remote.exec sudo snap install --dangerous --no-wait "$comp_file")"

    echo "And snap kernel component is installed"
    remote.exec "snap watch $change_id" || true
    # shellcheck disable=SC2016
    retry --wait 1 -n 60 --env "CHANGE_ID=$change_id" sh -c 'remote.exec snap changes | MATCH "${CHANGE_ID} .* (Done|Error) .*"'

    # Check if the fault was injected
    remote.exec "test -e /var/lib/snapd/faults/$TAG:$FAULT"

    if [ "$FAULT" = panic ]; then
        echo "Ensure the panic was injected and triggered stamp file is present"
        remote.exec "sudo journalctl -u snapd | grep -A 3 panic" > output
        MATCH "$TAG":$FAULT < output
        MATCH "osutil.injectFault" < output
    fi

    FINAL_STATUS="$(remote.exec snap changes | grep -E "^$change_id .*" | awk ' {print $2} ')"
    KERNEL_VERSION=$(remote.exec uname -r)

    echo "Ensure the change has no steps with Error"
    [ "$FINAL_STATUS" = Done ]
    remote.exec "snap change $change_id" | NOMATCH "^Error .*"
    echo "Ensure the component is installed"
    remote.exec "test -e /var/lib/snapd/kernel/pc-kernel/x1/lib/modules/$KERNEL_VERSION/updates/wifi-comp"
