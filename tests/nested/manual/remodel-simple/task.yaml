summary: verify a simple UC20 remodel
details: |
  Execute a simple remodel scenario under the test-snapd brand. Both models use
  the same test-snapd-whitebox device view store. The new model requires
  additional snaps that are present in the test-snapd-whitebox store.

systems: [ubuntu-18.04-64, ubuntu-20.04-64]

environment:
  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $TESTSLIB/assertions/test-snapd-remodel-auto-import.assert
  NESTED_IMAGE_ID: uc20-remodel-testing
  NESTED_ENABLE_TPM: false
  NESTED_ENABLE_SECURE_BOOT: false
  NESTED_USE_CLOUD_INIT: false
  SNAPD_TEST_BRAND: test-snapd
  # store we are remodeling from
  SNAPD_STORE_WHITEBOX: CQvkdMjgbapk821Po2cF

prepare: |
    # shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB"/nested.sh
    UBUNTU_IMAGE="$GOHOME"/bin/ubuntu-image
    variant=18
    if os.query is-focal; then
        variant=20
    fi
    IMAGE_NAME="$(nested_get_image_name core)"
    # fetch the snapd snap from edge and repack the deb into the snap
    snap download --channel="latest/edge" snapd
    "$TESTSTOOLS"/snaps-state repack_snapd_deb_into_snap snapd

    snap pack "$TESTSLIB/snaps/test-snapd-remodel-pc-$variant"
    UBUNTU_STORE_AUTH_DATA_FILENAME="$TESTSLIB/remodel-store-viewer.auth" \
        "$UBUNTU_IMAGE" snap "$TESTSLIB/assertions/test-snapd-remodel-pc-$variant.model" \
            --snap test-snapd-remodel-pc_*.snap \
            --snap "$PWD/snapd-from-deb.snap" \
            --output-dir "$NESTED_IMAGES_DIR"
    # ubuntu-image dropped the --output parameter, so we have to rename
    # the image ourselves, the images are named after volumes listed in
    # gadget.yaml
    find "$NESTED_IMAGES_DIR/" -maxdepth 1 -name '*.img' | while read -r imgname; do
        if [ -e "$NESTED_IMAGES_DIR/$IMAGE_NAME" ]; then
            echo "Image $IMAGE_NAME file already present"
            exit 1
        fi
        mv "$imgname" "$NESTED_IMAGES_DIR/$IMAGE_NAME"
    done

    nested_create_assertions_disk
    nested_start_core_vm

restore: |
    # shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB"/nested.sh
    nested_shutdown

execute: |
    # shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB"/nested.sh

    variant=18
    if os.query is-focal; then
        variant=20
    fi

    boot_id="$(tests.nested boot-id)"

    tests.nested exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
    tests.nested exec "snap model --assertion" | MATCH "store: $SNAPD_STORE_WHITEBOX\$"
    tests.nested exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc$'
    tests.nested exec "snap model --assertion --serial" | MATCH 'serial: 1234-snapd-remodel-testing$'

    # the new model requires hello-world snap to be present, make sure that the
    # snap and its dependency core aren't installed yet
    not tests.nested exec "snap list hello-world"
    not tests.nested exec "snap list core"

    # snapd gets stuck ensuring prerequisites of hello-world, which is the
    # installation of core, workaround this problem by installing core
    # explicitly
    # TODO: drop this once prereq is fixed
    tests.nested exec "snap install core"

    tests.nested copy "$TESTSLIB/assertions/test-snapd-remodel-pc-just-model-$variant.model"
    CHANGE_ID="$(tests.nested exec "sudo snap remodel --no-wait test-snapd-remodel-pc-just-model-$variant.model")"
    test -n "$CHANGE_ID"
    # very long retry wait for the change to be in stable state, where stable
    # means that it's done or failed in which case we fail the test on the next
    # check just below
    retry -n 100 --wait 5 sh -c "tests.nested exec sudo snap changes | grep -E '^${CHANGE_ID}\s+(Done|Undone|Error)'"
    # check that the change was successful
    tests.nested exec sudo snap changes | MATCH "^${CHANGE_ID}\s+Done"

    current_boot_id="$( nested_get_boot_id )"
    if [ "$variant" = "20" ]; then
        # we should have rebooted a couple of times (at least twice for the recovery
        # system and the base), so boot-id should be different
        test "$boot_id" != "$current_boot_id"
    else
        # but there is no reboot on UC18
        test "$boot_id" == "$current_boot_id"
    fi

    # we are remodeling within the same brand and store
    tests.nested exec "snap model --assertion" | MATCH "brand-id: $SNAPD_TEST_BRAND\$"
    tests.nested exec "snap model --assertion" | MATCH "store: $SNAPD_STORE_WHITEBOX\$"
    # new model
    tests.nested exec "snap model --assertion" | MATCH '^model: test-snapd-remodel-pc-just-model$'
    # but the same serial
    tests.nested exec "snap model --assertion --serial" | MATCH 'serial: 1234-snapd-remodel-testing$'

    # both new snaps are installed now
    tests.nested exec "snap list hello-world"
    tests.nested exec "snap list core"
    # and it's possible to run hello-world
    tests.nested exec "hello-world" | MATCH 'Hello World!'
