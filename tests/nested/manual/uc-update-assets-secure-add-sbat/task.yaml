summary: Update shim from non-sbat to sbat through gadget in secure boot

details: |
  This will happen on UC20 and we need to make sure that it will
  continue to boot.

systems: [ubuntu-2*]

environment:
  NESTED_ENABLE_SECURE_BOOT: true

  UPDATE_BOOT/both: true
  UPDATE_SEED/both: true

  UPDATE_BOOT/seed: false
  UPDATE_SEED/seed: true

  UPDATE_BOOT/boot: true
  UPDATE_SEED/boot: false

  NESTED_IMAGE_ID: "add-sbat-${UPDATE_SEED}-${UPDATE_BOOT}"

prepare: |
  snap install yq

  tests.pkgs install git-buildpackage dpkg-dev quilt
  git clone https://git.launchpad.net/ubuntu/+source/shim -b applied/ubuntu/jammy

  # Download and build shim version without sbat support
  (
    cd shim
    git checkout importer/applied/15+1552672080.a4a1fbe-0ubuntu2-0-g5aa624c17de596f3d7e7ea526eea6532b60fa207
    # Newer GCC does build anymore this package without warning
    sed -i "s/-Werror //" Make.defaults
    apt build-dep -y ./
    debian/rules build
    cp shimx64.efi ../old-shimx64.efi
    debian/rules clean
    rm -rf .pc
  )
  # Download and build shim version with sbat support
  (
    cd shim
    git checkout -f importer/applied/15.4-0ubuntu9-0-g1d3b42fd5db818144cb2f60a2959ebd52881d5fd
    apt build-dep -y ./
    debian/rules build
    cp shimx64.efi ../new-shimx64.efi
    debian/rules clean
    rm -rf .pc
  )

  CHANNEL="$(tests.nested show version)/stable"
  snap download --basename=pc --channel="${CHANNEL}" pc
  unsquashfs -d pc pc.snap
  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

  # Remove signatures on grub
  tests.nested secboot-remove-signature pc/grubx64.efi

  # Remove sbat on grub if it did exist and Save that file
  objcopy --remove-section=.sbat pc/grubx64.efi || true
  cp pc/grubx64.efi grubx64.efi

  cp old-shimx64.efi pc/shim.efi.signed

  # Repack pc gadget for the initial image
  tests.nested secboot-sign file pc/shim.efi.signed "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  tests.nested secboot-sign file pc/grubx64.efi "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  old_shim_sha="$(sha256sum pc/shim.efi.signed | sed "s/ .*//")"
  old_grub_sha="$(sha256sum pc/grubx64.efi | sed "s/ .*//")"
  snap pack pc "$(tests.nested get extra-snaps-path)"

  tests.nested build-image core
  tests.nested create-vm core

  cat <<EOF >sbat.csv
  sbat,1,SBAT Version,sbat,1,https://github.com/rhboot/shim/blob/main/SBAT.md
  grub,1,Free Software Foundation,grub,2.06,https://www.gnu.org/software/grub/
  grub.ubuntu,1,Canonical,grub2,2.06-2ubuntu7,https://packages.ubuntu.com/source/jammy/grub2
  EOF
  sbatsize="$(($(stat -c %b sbat.csv)*$(stat -c %B sbat.csv)))"
  truncate --size "${sbatsize}" sbat.csv

  # Add .sbat at the end
  grubsize="$(($(stat -c %b grubx64.efi)*$(stat -c %B grubx64.efi)))"
  objcopy --add-section .sbat=sbat.csv --change-section-address .sbat="${grubsize}" grubx64.efi grubx64-sbat.efi

  cp new-shimx64.efi pc/shim.efi.signed
  cp grubx64-sbat.efi pc/grubx64.efi

  # Sign modified grub and shim
  tests.nested secboot-sign file pc/shim.efi.signed "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  tests.nested secboot-sign file pc/grubx64.efi "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"
  new_shim_sha="$(sha256sum pc/shim.efi.signed | sed "s/ .*//")"
  new_grub_sha="$(sha256sum pc/grubx64.efi | sed "s/ .*//")"

  if [ "${UPDATE_SEED}" = true ]; then
    yq -i '(.volumes.pc.structure[] | select(.role == "system-seed") | .update.edition) |= . + 1' pc/meta/gadget.yaml
  fi
  if [ "${UPDATE_BOOT}" = true ]; then
    yq -i '(.volumes.pc.structure[] | select(.role == "system-boot") | .update.edition) |= . + 1' pc/meta/gadget.yaml
  fi

  cat <<EOF >>expected-before
  ${old_shim_sha} */boot/efi/EFI/boot/bootx64.efi
  ${old_grub_sha} */boot/efi/EFI/boot/grubx64.efi
  EOF
  if [ "${UPDATE_SEED}" = true ]; then
    cat <<EOF >>expected-after
  ${new_shim_sha} */boot/efi/EFI/boot/bootx64.efi
  ${new_grub_sha} */boot/efi/EFI/boot/grubx64.efi
  EOF
  else
    cat <<EOF >>expected-after
  ${old_shim_sha} */boot/efi/EFI/boot/bootx64.efi
  ${old_grub_sha} */boot/efi/EFI/boot/grubx64.efi
  EOF
  fi

  cat <<EOF >>expected-before
  ${old_shim_sha} */run/mnt/ubuntu-boot/EFI/boot/bootx64.efi
  ${old_grub_sha} */run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
  EOF
  if [ "${UPDATE_BOOT}" = true ]; then
    cat <<EOF >>expected-after
  ${new_shim_sha} */run/mnt/ubuntu-boot/EFI/boot/bootx64.efi
  ${new_grub_sha} */run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
  EOF
  else
    cat <<EOF >>expected-after
  ${old_shim_sha} */run/mnt/ubuntu-boot/EFI/boot/bootx64.efi
  ${old_grub_sha} */run/mnt/ubuntu-boot/EFI/boot/grubx64.efi
  EOF
  fi

  snap pack pc --filename=pc_2.snap

  remote.exec systemctl --wait is-system-running || true
  remote.wait-for snap-command
  remote.exec "sudo snap wait system seed.loaded"

execute: |
  remote.exec "sha256sum -c" <expected-before

  remote.push pc_2.snap
  boot_id="$(tests.nested boot-id)"

  REMOTE_CHG_ID="$(remote.exec "sudo snap install --no-wait --dangerous pc_2.snap")"
  remote.wait-for reboot "${boot_id}"
  remote.exec sudo snap watch "$REMOTE_CHG_ID"

  remote.exec "sha256sum -c" <expected-after
