summary: Remodel to a model with a different kernel and then back to the original kernel again

details: |
  This test covers a few remodeling edge cases:
  * Switching the kernel to a new snap (changing kernel snap names, not just
    revision) works properly.
  * The drivers tree mounted at /usr/lib/modules is correctly updated and
    maintained across remodels.
  * When returning to a kernel that was left behind on the system because of a
    previous remodel, the drivers tree is reused.

  Note that the implementation of this last feature relies on the fact that
  switching the kernel snap during a remodel does not remove the old kernel's
  snap or drivers tree. We reuse the drivers tree that was originally created
  when the kernel was installed.

systems: [-ubuntu-1*, -ubuntu-20*, -ubuntu-22*]

environment:
  INITIAL_MODEL_JSON: $TESTSLIB/assertions/test-snapd-remodel-to-installed-kernel-24.json
  SECOND_MODEL_JSON: $TESTSLIB/assertions/test-snapd-remodel-to-installed-kernel-rev-1-24.json
  THIRD_MODEL_JSON: $TESTSLIB/assertions/test-snapd-remodel-to-installed-kernel-rev-2-24.json
  FOURTH_MODEL_JSON: $TESTSLIB/assertions/test-snapd-remodel-to-installed-kernel-rev-3-24.json
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true
  NESTED_BUILD_SNAPD_FROM_CURRENT: true
  NESTED_REPACK_GADGET_SNAP: true
  NESTED_REPACK_KERNEL_SNAP: true
  NESTED_REPACK_BASE_SNAP: true
  NESTED_REPACK_FOR_FAKESTORE: true
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_SIGN_SNAPS_FAKESTORE: true
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

prepare: |
    if [ "${TRUST_TEST_KEYS}" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # although nested_start_core_vm_unit usually installs this, the fake store
    # will already have been set up, so we need to install it here
    snap install test-snapd-swtpm --edge

    "${TESTSTOOLS}/store-state" setup-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"

    gendeveloper1 sign-model < "${INITIAL_MODEL_JSON}" > initial-model.assert

    cp "${TESTSLIB}/assertions/testrootorg-store.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp initial-model.assert "${NESTED_FAKESTORE_BLOB_DIR}/asserts"

    tests.nested prepare-essential-snaps

    export SNAPPY_FORCE_API_URL="${NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL}"
    ubuntu-image snap --image-size 10G ./initial-model.assert

    image_dir=$(tests.nested get images-path)
    image_name=$(tests.nested get image-name core)
    cp ./pc.img "${image_dir}/${image_name}"
    tests.nested configure-default-user

    # run the fake device service too, so that the device can be initialised
    systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

    tests.nested build-image core
    tests.nested create-vm core

    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    wait_for_first_boot_change

    remote.exec 'sudo systemctl stop snapd snapd.socket'

    remote.exec 'sudo cat /var/lib/snapd/state.json' | gojq '.data.auth.device."session-macaroon"="fake-session"' > state.json
    remote.push state.json
    remote.exec 'sudo mv state.json /var/lib/snapd/state.json'
    remote.exec 'sudo systemctl start snapd snapd.socket'

    # here unpack the kernel snap that was used to build the original image. we
    # take that kernel and create a component from one of its kernel modules.
    # upload the new kernel and component to the fake store.
    unsquashfs -d mac80211-hwsim "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel.snap"

    # we will use this copy of the original kernel soon
    cp -ar mac80211-hwsim efi-pstore

    sed -i -e '/^name:/ s/$/-mac80211-hwsim/' mac80211-hwsim/meta/snap.yaml
    snap pack --filename=pc-kernel-mac80211-hwsim.snap ./mac80211-hwsim
    "${TESTSTOOLS}"/build_kernel_with_comps.sh mac80211_hwsim wifi-comp pc-kernel-mac80211-hwsim.snap

    "${TESTSTOOLS}"/store-state make-snap-installable --noack \
      --revision 1 \
      "${NESTED_FAKESTORE_BLOB_DIR}" \
      ./pc-kernel-mac80211-hwsim.snap \
      'qYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza'

    "${TESTSTOOLS}"/store-state make-component-installable --noack \
      --snap-revision 1 \
      --component-revision 1 \
      --snap-id 'qYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza' \
      "${NESTED_FAKESTORE_BLOB_DIR}" \
      ./pc-kernel-mac80211-hwsim+wifi-comp.comp

    # do the same thing for a different kernel module.
    sed -i -e '/^name:/ s/$/-efi-pstore/' efi-pstore/meta/snap.yaml
    snap pack --filename=pc-kernel-efi-pstore.snap ./efi-pstore
    "${TESTSTOOLS}"/build_kernel_with_comps.sh efi_pstore efi-comp pc-kernel-efi-pstore.snap

    "${TESTSTOOLS}"/store-state make-snap-installable --noack \
      --revision 1 \
      "${NESTED_FAKESTORE_BLOB_DIR}" \
      ./pc-kernel-efi-pstore.snap \
      'rYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza'

    "${TESTSTOOLS}"/store-state make-component-installable --noack \
      --snap-revision 1 \
      --component-revision 1 \
      --snap-id 'rYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza' \
      "${NESTED_FAKESTORE_BLOB_DIR}" \
      ./pc-kernel-efi-pstore+efi-comp.comp

restore: |
  systemctl stop fakedevicesvc
  "${TESTSTOOLS}/store-state" teardown-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"

execute: |
  echo 'Swap to the first new kernel and component pc-kernel-mac80211-hwsim+wifi-comp'
  gendeveloper1 sign-model < "${SECOND_MODEL_JSON}" > second-model.assert
  remote.push second-model.assert

  boot_id="$(tests.nested boot-id)"
  change_id="$(remote.exec 'sudo snap remodel --no-wait second-model.assert')"
  remote.wait-for reboot "${boot_id}"

  # this remodel expects two reboots, once for testing the recovery system
  # and once for rebooting into the new kernel
  boot_id="$(tests.nested boot-id)"
  remote.wait-for reboot "${boot_id}"

  remote.exec "snap watch ${change_id}"
  remote.exec 'snap list pc-kernel-mac80211-hwsim' | awk '$NR != 1 { print $3 }' | MATCH '1'
  remote.exec 'snap components pc-kernel-mac80211-hwsim' | sed 1d | MATCH 'pc-kernel-mac80211-hwsim\+wifi-comp\s+installed'

  # make sure that the kernel module got installed and is loaded from our
  # component
  remote.exec sudo modprobe mac80211_hwsim
  remote.exec ip link show wlan0
  remote.exec modinfo --filename mac80211_hwsim | MATCH '/lib/modules/.*/updates/wifi-comp'

  echo 'Swap to the second new kernel and component pc-kernel-efi-pstore+efi-comp'
  gendeveloper1 sign-model < "${THIRD_MODEL_JSON}" > third-model.assert
  remote.push third-model.assert

  boot_id="$(tests.nested boot-id)"
  change_id="$(remote.exec 'sudo snap remodel --no-wait third-model.assert')"
  remote.wait-for reboot "${boot_id}"

  # same deal here, we expect two reboots
  boot_id="$(tests.nested boot-id)"
  remote.wait-for reboot "${boot_id}"

  remote.exec "snap watch ${change_id}"
  remote.exec 'snap list pc-kernel-efi-pstore' | awk '$NR != 1 { print $3 }' | MATCH '1'
  remote.exec 'snap components pc-kernel-efi-pstore' | sed 1d | MATCH 'pc-kernel-efi-pstore\+efi-comp\s+installed'

  remote.exec sudo modprobe efi_pstore
  remote.exec modinfo --filename efi_pstore | MATCH '/lib/modules/.*/updates/efi-comp'

  echo 'Swap back to the first new kernel and component pc-kernel-mac80211-hwsim+wifi-comp again'
  gendeveloper1 sign-model < "${FOURTH_MODEL_JSON}" > fourth-model.assert
  remote.push fourth-model.assert

  boot_id="$(tests.nested boot-id)"
  change_id="$(remote.exec 'sudo snap remodel --no-wait fourth-model.assert')"
  remote.wait-for reboot "${boot_id}"

  # same deal here, we expect two reboots
  boot_id="$(tests.nested boot-id)"
  remote.wait-for reboot "${boot_id}"

  remote.exec "snap watch ${change_id}"
  remote.exec 'snap list pc-kernel-mac80211-hwsim' | awk '$NR != 1 { print $3 }' | MATCH '1'
  remote.exec 'snap components pc-kernel-mac80211-hwsim' | sed 1d | MATCH 'pc-kernel-mac80211-hwsim\+wifi-comp\s+installed'

  remote.exec sudo modprobe mac80211_hwsim
  remote.exec ip link show wlan0
  remote.exec modinfo --filename mac80211_hwsim | MATCH '/lib/modules/.*/updates/wifi-comp'
