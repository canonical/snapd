summary: remodel to a model that contains components in an offline context

details: |
  This test remodels to a model that contains components. Specifically, this
  tests updating the kernel snap to a version that supports the newly required
  component and installing that component. This is done in an offline context,
  and the snaps an components are provided via local files.

systems: [-ubuntu-1*, -ubuntu-20*, -ubuntu-22*]

environment:
  INITIAL_MODEL_JSON: $TESTSLIB/assertions/test-snapd-component-remodel-initial-pc-VERSION.json
  NEW_MODEL_JSON: $TESTSLIB/assertions/test-snapd-component-remodel-new-pc-VERSION.json
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true
  NESTED_BUILD_SNAPD_FROM_CURRENT: true
  NESTED_REPACK_GADGET_SNAP: true
  NESTED_REPACK_KERNEL_SNAP: true
  NESTED_REPACK_BASE_SNAP: true
  NESTED_REPACK_FOR_FAKESTORE: true
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_SIGN_SNAPS_FAKESTORE: true
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

prepare: |
    if [ "${TRUST_TEST_KEYS}" = "false" ]; then
        echo "This test needs test keys to be trusted"
        exit
    fi

    # although nested_start_core_vm_unit usually installs this, the fake store
    # will already have been set up, so we need to install it here
    snap install test-snapd-swtpm --edge

    "${TESTSTOOLS}/store-state" setup-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"

    VERSION="$(tests.nested show version)"
    gendeveloper1 sign-model < "${INITIAL_MODEL_JSON/VERSION/${VERSION}}" > initial-model.assert

    cp "${TESTSLIB}/assertions/testrootorg-store.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp "${TESTSLIB}/assertions/developer1.account-key" "${NESTED_FAKESTORE_BLOB_DIR}/asserts"
    cp initial-model.assert "${NESTED_FAKESTORE_BLOB_DIR}/asserts"

    tests.nested prepare-essential-snaps

    export SNAPPY_FORCE_API_URL="${NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL}"
    ubuntu-image snap --image-size 10G ./initial-model.assert

    image_dir=$(tests.nested get images-path)
    image_name=$(tests.nested get image-name core)
    cp ./pc.img "${image_dir}/${image_name}"
    tests.nested configure-default-user

    # run the fake device service too, so that the device can be initialised
    systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

    tests.nested build-image core
    tests.nested create-vm core

    #shellcheck source=tests/lib/core-config.sh
    . "$TESTSLIB"/core-config.sh
    wait_for_first_boot_change

    remote.exec 'sudo systemctl stop snapd snapd.socket'

    remote.exec 'sudo cat /var/lib/snapd/state.json' | gojq '.data.auth.device."session-macaroon"="fake-session"' > state.json
    remote.push state.json
    remote.exec 'sudo mv state.json /var/lib/snapd/state.json'
    remote.exec 'sudo systemctl start snapd snapd.socket'

restore: |
    systemctl stop fakedevicesvc
    "${TESTSTOOLS}/store-state" teardown-fake-store "${NESTED_FAKESTORE_BLOB_DIR}"

execute: |
  unsquashfs "${NESTED_FAKESTORE_BLOB_DIR}/pc-kernel.snap"
  sed -i -e '/^version/ s/$/-with-comps/' squashfs-root/meta/snap.yaml
  snap pack --filename=pc-kernel-with-comps.snap ./squashfs-root
  "${TESTSTOOLS}"/build_kernel_with_comps.sh mac80211_hwsim wifi-comp pc-kernel-with-comps.snap

  kernel_id='pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza'

  # bump the available kernel version in the fake store
  "${TESTSTOOLS}"/store-state make-snap-installable --noack \
    --revision 2 \
    "${NESTED_FAKESTORE_BLOB_DIR}" \
    ./pc-kernel-with-comps.snap \
    "${kernel_id}"

  "${TESTSTOOLS}"/store-state make-component-installable --noack \
    --snap-revision 2 \
    --component-revision 1 \
    --snap-id "${kernel_id}" \
    "${NESTED_FAKESTORE_BLOB_DIR}" \
    ./pc-kernel+wifi-comp.comp

  VERSION="$(tests.nested show version)"
  gendeveloper1 sign-model < "${NEW_MODEL_JSON/VERSION/${VERSION}}" > new-model.assert
  remote.push new-model.assert

  boot_id="$(tests.nested boot-id)"
  remote.exec 'SNAPPY_FORCE_API_URL=http://10.0.2.2:11028 snap download pc-kernel+wifi-comp --basename=pc-kernel'
  change_id="$(remote.exec "sudo snap remodel --no-wait --offline \
    --snap=./pc-kernel.snap \
    --snap=./pc-kernel+wifi-comp.comp \
    --assertion=./pc-kernel.assert \
    new-model.assert")"
  remote.wait-for reboot "${boot_id}"

  # this remodel expects two reboots, once for testing the recovery system
  # and once for rebooting into the new kernel
  boot_id="$(tests.nested boot-id)"
  remote.wait-for reboot "${boot_id}"

  remote.exec "snap watch ${change_id}"
  remote.exec 'snap list pc-kernel' | awk '$NR != 1 { print $3 }' | MATCH '2'
  remote.exec 'snap components pc-kernel' | sed 1d | MATCH 'pc-kernel\+wifi-comp\s+installed'

  # make sure that the kernel module got installed and is loaded from our
  # component
  remote.exec sudo modprobe mac80211_hwsim
  remote.exec ip link show wlan0
  remote.exec modinfo --filename mac80211_hwsim | MATCH '/lib/modules/.*/updates/wifi-comp'
