summary: |
  Test that devmode confined snaps can execute other snaps.

details: |
  For xenial the test covers running core and non-core based devmode snaps from core based strict snap and
  and for boinic the test covers running a non-core based devmode snap from a non-core based strict snap as
  well as running core and non-core based devmode snaps from a core based strict snap.

systems: [ubuntu-1*]

environment:
  # not needed to build snapd from source to use here, we have to manually
  # build it ourselves anyways
  NESTED_BUILD_SNAPD_FROM_CURRENT: false

  # TODO: we should probably have a smaller / simpler test-snapd-* snap for
  # testing devmode confinement with base: core
  BASE_CORE_DEVMODE_SNAP: godd
  BASE_NON_CORE_DEVMODE_SNAP: test-snapd-tools-core18

  BASE_CORE_STRICT_SNAP: test-snapd-sh
  BASE_NON_CORE_STRICT_SNAP: test-snapd-sh-core18

  # build the snap with lxd
  SNAPCRAFT_BUILD_ENVIRONMENT: lxd

  # pin LXD to 5.20/stable to ensure to prevent snapcraft problem with handling new version naming that may include "LTS"
  LXD_SNAP_CHANNEL: 5.20/stable

prepare: |
  # load the fuse kernel module before installing lxd
  modprobe fuse

  # install lxd so we can build the snapd snap
  "$TESTSTOOLS"/lxd-state prepare-snap
  snap install snapcraft --channel=4.x/candidate --classic

  # TODO: do we need to address the spread system prepare shenanigans as 
  # mentioned in tests/main/snapd-snap ?

  # shellcheck disable=SC2164
  pushd "$PROJECT_PATH"
  echo "Build the snap"
  snap run snapcraft snap --output snapd-from-branch.snap
  popd

  mv "$PROJECT_PATH/snapd-from-branch.snap" "$PWD/snapd-from-branch.snap"

  # meh it doesn't work well to use quotas and "&&" in the arguments to sh -c
  # with defer, so just put what we want to run in a script and execute that
  cat >> snapcraft-cleanup.sh <<EOF
  #!/bin/sh
  cd $PROJECT_PATH
  snap run snapcraft clean
  EOF
  chmod +x snapcraft-cleanup.sh
  tests.cleanup defer sh -c "$PWD/snapcraft-cleanup.sh"

  unsquashfs -d snapd-from-branch snapd-from-branch.snap
  snapddir=snapd-from-branch

  # now repack the core snap with this snapd snap
  snap download core --edge --basename=core-from-edge
  unsquashfs -d edge-core-snap core-from-edge.snap
  coredir=edge-core-snap

  # backup the meta dir
  mv "$coredir/meta" "$coredir/meta-backup" 
  # copy everything from the snapd snap into the core snap
  cp -ar "$snapddir"/* "$coredir"

  # restore the meta dir
  rm -r "$coredir/meta"
  mv "$coredir/meta-backup" "$coredir/meta" 

  # set the version for the core snap to be the version from the snapd snap
  SNAPD_SNAP_VERSION=$(grep -Po "version: \K.*" "$snapddir/meta/snap.yaml")
  CORE_SNAP_VERSION=$(grep -Po "version: \K.*" "$coredir/meta/snap.yaml")
  sed -i -e "s/$CORE_SNAP_VERSION/$SNAPD_SNAP_VERSION/" "$coredir/meta/snap.yaml"

  # pack the core snap
  snap pack --filename=core-from-branch.snap "$coredir"

  rm -r "$coredir"
  rm -r "$snapddir"

  tests.nested build-image core 
  tests.nested create-vm core

execute: |
  # TODO: should we also just test the classic cases on the system that is 
  # driving the nested VM? That would save some time/resources

  # wait for snap seeding to be done
  remote.wait-for snap-command
  remote.exec "sudo snap wait system seed.loaded"

  # push both snaps to the vm
  remote.push core-from-branch.snap

  remote.push snapd-from-branch.snap

  if os.query is-xenial; then
    # on UC16, initially we will only have the core snap installed, run those
    # tests first

    # this will reboot as we refresh to our core snap
    boot_id="$( tests.nested boot-id )"
    REMOTE_CHG_ID="$(remote.exec sudo snap install --no-wait --dangerous core-from-branch.snap)"
    remote.wait-for reboot "${boot_id}"
    remote.exec sudo snap watch "${REMOTE_CHG_ID}"

    remote.exec sudo snap install --devmode --beta "$BASE_CORE_DEVMODE_SNAP"
    remote.exec sudo snap install "$BASE_CORE_STRICT_SNAP"

    # umask is the command we execute to avoid yet another layer of quoting
    OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | remote.exec "snap run --shell ${BASE_CORE_DEVMODE_SNAP}")
    if [ "$OUTPUT" != "0002" ]; then
      echo "test failed"
      exit 1
    fi

    # now install the snapd snap and run those tests
    echo "install the snapd snap"
    remote.exec sudo snap install --dangerous snapd-from-branch.snap

    # trigger regeneration of profiles
    remote.exec sudo systemctl stop snapd.socket snapd.service
    remote.exec sudo rm -f /var/lib/snapd/system-key
    remote.exec sudo systemctl start snapd.socket snapd.service

    # also install the non-core base snap, note that we can install and use it
    # even without the snapd snap, but we cannot execute other snaps from this 
    # devmode snap without also installing the snapd snap, as inside non-core
    # base snaps, there is a symlink 
    # /usr/bin/snap -> /snap/snapd/current/usr/bin/snap
    # which effectively requires the snapd snap to be installed to execute other
    # snaps from inside the devmode non-core based snap
    remote.exec sudo snap install --devmode "$BASE_NON_CORE_DEVMODE_SNAP"

    # umask is the command we execute to avoid yet another layer of quoting
    OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | remote.exec "snap run --shell ${BASE_CORE_DEVMODE_SNAP}")
    if [ "$OUTPUT" != "0002" ]; then
      echo "test failed"
      exit 1
    fi

    OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | remote.exec "snap run --shell ${BASE_NON_CORE_DEVMODE_SNAP}.sh")
    if [ "$OUTPUT" != "0002" ]; then
      echo "test failed"
      exit 1
    fi

  elif os.query is-bionic; then
    # on UC18, initially we will only have the snapd snap installed, run those
    # tests first
    remote.exec sudo snap install  --dangerous snapd-from-branch.snap

    # snaps that don't depend on the core snap
    remote.exec sudo snap install --devmode "$BASE_NON_CORE_DEVMODE_SNAP"
    remote.exec sudo snap install "$BASE_NON_CORE_STRICT_SNAP"


    # umask is the command we execute to avoid yet another layer of quoting
    OUTPUT=$(echo "snap run ${BASE_NON_CORE_STRICT_SNAP}.sh -c umask" | remote.exec "snap run --shell ${BASE_NON_CORE_DEVMODE_SNAP}.sh" )
    if [ "$OUTPUT" != "0002" ]; then
      echo "test failed"
      exit 1
    fi

    # now install the core snap and run those tests
    echo "install the core snap"
    remote.exec sudo snap install --dangerous core-from-branch.snap

    # trigger regeneration of profiles
    remote.exec sudo systemctl stop snapd.socket snapd.service
    remote.exec sudo rm -f /var/lib/snapd/system-key
    remote.exec sudo systemctl start snapd.socket snapd.service

    # snap that does depend on the core snap
    remote.exec sudo snap install --devmode --beta "$BASE_CORE_DEVMODE_SNAP"
    remote.exec sudo snap install "$BASE_CORE_STRICT_SNAP"

    OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | remote.exec "snap run --shell ${BASE_CORE_DEVMODE_SNAP}")
    if [ "$OUTPUT" != "0002" ]; then
      echo "test failed"
      exit 1
    fi

    OUTPUT=$(echo "snap run ${BASE_CORE_STRICT_SNAP}.sh -c umask" | remote.exec "snap run --shell ${BASE_NON_CORE_DEVMODE_SNAP}.sh")
    if [ "$OUTPUT" != "0002" ]; then
      echo "test failed"
      exit 1
    fi

  else
    echo "unsupported system for this test"
    exit 1
  fi
