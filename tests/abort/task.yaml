summary: Check task abort
environment:
  SNAP_NAME: hello-world
restore: |
  echo Resetting snapd state...
  systemctl stop snapd || true
  umount /var/lib/snapd/snaps/*.snap 2>&1 || true
  rm -rf /snap/*
  rm -rf /var/lib/snapd/*
  rm -f /etc/systemd/system/snap-*.{mount,service}
  rm -f /etc/systemd/system/multi-user.target.wants/snap-*.mount
  systemctl start snapd
execute: |
  echo "Abort with invalid id"
  invalidID="10000000"
  expected="error: cannot find change with id \"$invalidID\""
  actual=$(sudo snap abort $invalidID 2>&1) || FAILED="abort-invalid"
  [ "$FAILED" != "abort-invalid" ] && exit 1
  echo "$actual" | grep -Pq "$expected" || exit 1

  echo "Abort with valid id - error"
  subdirPath="/snap/$SNAP_NAME/current/foo"
  sudo mkdir -p $subdirPath
  snap install $SNAP_NAME || FAILED=install
  [ "$FAILED" != "install" ] && exit 1
  id="1"
  expected="error: cannot abort change $id with nothing pending"
  actual=$(sudo snap abort $id 2>&1) || FAILED="abort-error"
  [ "$FAILED" != "abort-error" ] && exit 1
  echo "$actual" | grep -Pq "$expected" || exit 1

  sudo rm -rf $subdirPath

  echo "Abort with valid id - done"
  sudo snap install $SNAP_NAME
  id="2"
  expected="error: cannot abort change $id with nothing pending"
  actual=$(sudo snap abort $id 2>&1) || FAILED="abort-done"
  [ "$FAILED" != "abort-done" ] && exit 1
  echo "$actual" | grep -Pq "$expected" || exit 1
