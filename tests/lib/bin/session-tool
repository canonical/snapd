#!/bin/sh -e
if [ "$(id -u)" -ne 0 ]; then
    echo "session-tool needs to be invoked as root" >&2
    exit 1
fi
if [ -z "$(command -v busctl)" ]; then
    echo "session-tool requires busctl" >&2
    exit 1
fi
if [ $# -eq 0 ]; then
	echo "usage: session-tool [-u USER] [--] <CMD>"
	exit 1
fi
user=root
while [ $# -gt 0 ]; do
	case "$1" in
		--)
			shift
			break
			;;
		-u)
			if [ $# -eq 1 ]; then
				echo "session-tool: option -u requires an argument" >&2
				exit 1
			fi
			user="$2"
			shift 2
			;;
		-*)
			echo "session-tool: unsupported argument $1" >&2
			exit 1
			;;
		*)
			break
			;;
	esac
done

# This fixes a bug in some older Debian systems where /root/.profile contains
# unconditional invocation of mesg, which on non-tty shells prints "mesg
# ttyname failed inappropriate ioctl for device" which pollutes output from
# invoked programs.
# TODO: move this to spread wide project setup.
test -f /root/.profile && sed -i -e 's/mesg n .*true/tty -s \&\& mesg n/g' /root/.profile

read -r uuid < /proc/sys/kernel/random/uuid
unit_name="session-tool-$uuid.service"
tmp_dir="/tmp/session-tool-$uuid"
mkdir "$tmp_dir"
mkfifo -m 0666 "$tmp_dir/dbus-monitor.pipe" "$tmp_dir/ready.pipe" "$tmp_dir/result.pipe" "$tmp_dir/stdin.pipe" "$tmp_dir/stdout.pipe" "$tmp_dir/stderr.pipe"
trap 'rm -rf $tmp_dir' EXIT

# Run dbus-monitor waiting for systemd JobRemoved signal. Process the output
# with awk, forwarding the result of the service to a fifo.
monitor_expr="type='signal', sender='org.freedesktop.systemd1', interface='org.freedesktop.systemd1.Manager', path='/org/freedesktop/systemd1', member='JobRemoved'"
stdbuf -oL dbus-monitor --system --monitor "$monitor_expr" > "$tmp_dir/dbus-monitor.pipe" &
dbus_monitor_pid=$!

awk_expr="
BEGIN {
	found=0;
	ready=0;
}

# Once we get the NameAcquired message we are sure dbus-monitor is connected
# and will receive JobRemoved once it is sent. The reason we are getting this
# message despite the filter we establish above is that it is sent directly to
# us, which bypasses DBus filter expressions.
/member=NameAcquired/ {
	if (!ready) {
		ready=1;
		print ready > \"$tmp_dir/ready.pipe\";
		close(\"$tmp_dir/ready.pipe\");
	}
}

# This part matches an argument to JobRemoved that contains the name of the
# session-tool-xxx.service name we picked earlier. Once we see this we are sure
# the job is gone.
/   string \"$unit_name\"/ {
	found=1;
	print \"found service file\";
	fflush();
	next;
}

# This matches any string argument but only takes effect once we found our
# JobRemoved message. The order of arguments to JobRemoved is such that the
# immediate successor of the service name is the result word. This is
# translated to a pass / fail exit code from session-tool. Scanning this part
# terminates awk.
/string \".*\"/ {
	if (found==1) {
		print \"found result\";
		print \$2 > \"$tmp_dir/result.pipe\";
		fflush(\"\");
		close(\"$tmp_dir/result.pipe\");
		exit;
	}
}
"
awk -W interactive "$awk_expr" <"$tmp_dir/dbus-monitor.pipe" >"$tmp_dir/awk.log" 2>&1 &
awk_pid=$!

# Wait for dbus-monitor to start.
cat "$tmp_dir/ready.pipe" >/dev/null

# Use busctl to spawn a command. The command is wrapped in shell, runuser -l
# and redirects to capture output. Sadly busctl doesn't support passing file
# descriptors https://github.com/systemd/systemd/issues/14954 As a workaround
# we pass a set of pipes. This is good for non-interactive work.
cat >"$tmp_dir/stdin.pipe" &
cat <"$tmp_dir/stdout.pipe" >&1 &
cat <"$tmp_dir/stderr.pipe" >&2 &
busctl \
	--allow-interactive-authorization=no --quiet \
	--system \
	-- \
	call \
	 org.freedesktop.systemd1 \
	/org/freedesktop/systemd1 \
	 org.freedesktop.systemd1.Manager \
	StartTransientUnit "ssa(sv)a(sa(sv))" \
	"$unit_name" fail 4 \
		Description s "session-tool running $* as $user" \
		Type s oneshot \
		Environment as 1 TERM=xterm-256color \
		ExecStart "a(sasb)" 1 \
			/bin/sh 3 /bin/sh -c "exec runuser -l $user - -c \"$*\" <$tmp_dir/stdin.pipe >$tmp_dir/stdout.pipe 2>$tmp_dir/stderr.pipe" false \
	0
# FIXME: ^ the line above invokes runuser via sh has broken quoting.
# This is done so that we can configure file redirects. Once Ubuntu 16.04 is no
# longer supported we can use Standard{Input,Output,Error}=file:path property
# of systemd, or perhaps even StandardInputFileDescriptor and pass a file
# descriptor to the fifos we open in the script above.

# Wait for the service to terminate. The trigger is a successful read
# from the result fifo. In case we are signaled in one of the familiar
# ways, kill the started service with the same signal. The reading occurs
# in a loop as the signal will first interrupt the read process, which will
# fail and return nothing.
trap 'systemctl kill --signal=INT $unit_name' INT
trap 'systemctl kill --signal=TERM $unit_name' TERM
trap 'systemctl kill --signal=QUIT $unit_name' QUIT
result=""
for sig in INT TERM QUIT; do
	result=$(cat "$tmp_dir/result.pipe" 2>/dev/null) && break
	trap - "$sig"
done
trap - INT TERM QUIT

# Kill dbus-monitor that otherwise runs until it notices the pipe is no longer
# connected, which happens after a longer while.
kill $dbus_monitor_pid || true
wait $dbus_monitor_pid || true
wait $awk_pid

case "$result" in
	'"done"') exit 0; ;;
	'"failed"') exit 1; ;;
	'"canceled"') exit 1; ;;
esac
