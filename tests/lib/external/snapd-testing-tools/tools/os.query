#!/bin/bash

show_help() {
    echo "usage: os.query is-core, is-classic"
    echo "       os.query is-core16, is-core18, is-core20, is-core22, is-core24"
    echo "       os.query is-core-gt, is-core-ge, is-core-lt, is-core-le"
    echo "       os.query is-trusty, is-xenial, is-bionic, is-focal, is-jammy"
    echo "       os.query is-ubuntu [ID], is-debian [ID], is-fedora [ID], is-amazon-linux [ID], is-arch-linux, is-centos [ID], is-opensuse [ID]"
    echo "       os.query is-ubuntu-gt [ID], is-ubuntu-ge [ID], is-ubuntu-lt [ID], is-ubuntu-le [ID]"
    echo "       os.query is-pc-amd64, is-pc-i386, is-arm, is-armhf, is-arm64, is-s390x"
    echo ""
    echo "Get general information about the current system"
}

is_core() {
    # We need to check $SPREAD_SYSTEM var because in snapd the os-release file does
    # not contain the ubuntu-core info while the system is being prepared
    if [ -n "$SPREAD_SYSTEM" ]; then
        [[ "$SPREAD_SYSTEM" == ubuntu-core-* ]]
    else
        grep -qFx 'ID=ubuntu-core' /etc/os-release
    fi
}

is_core16() {
    # We need to check $SPREAD_SYSTEM var because in snapd the os-release file does
    # not contain the ubuntu-core info while the system is being prepared
    if [ -n "$SPREAD_SYSTEM" ]; then
        [[ "$SPREAD_SYSTEM" == ubuntu-core-16-* ]]
    else
        grep -qFx 'ID=ubuntu-core' /etc/os-release && grep -qFx 'VERSION_ID="16"' /etc/os-release
    fi
}

is_core18() {
    # We need to check $SPREAD_SYSTEM var because in snapd the os-release file does
    # not contain the ubuntu-core info while the system is being prepared
    if [ -n "$SPREAD_SYSTEM" ]; then
        [[ "$SPREAD_SYSTEM" == ubuntu-core-18-* ]]
    else
        grep -qFx 'ID=ubuntu-core' /etc/os-release && grep -qFx 'VERSION_ID="18"' /etc/os-release
    fi
}

is_core20() {
    # We need to check $SPREAD_SYSTEM var because in snapd the os-release file does
    # not contain the ubuntu-core info while the system is being prepared
    if [ -n "$SPREAD_SYSTEM" ]; then
        [[ "$SPREAD_SYSTEM" == ubuntu-core-20-* ]]
    else
        grep -qFx 'ID=ubuntu-core' /etc/os-release && grep -qFx 'VERSION_ID="20"' /etc/os-release
    fi
}

is_core22() {
    # We need to check $SPREAD_SYSTEM var because in snapd the os-release file does
    # not contain the ubuntu-core info while the system is being prepared
    if [ -n "$SPREAD_SYSTEM" ]; then
        [[ "$SPREAD_SYSTEM" == ubuntu-core-22-* ]]
    else
        grep -qFx 'ID=ubuntu-core' /etc/os-release && grep -qFx 'VERSION_ID="22"' /etc/os-release
    fi
}

is_core24() {
    # We need to check $SPREAD_SYSTEM var because in snapd the os-release file does
    # not contain the ubuntu-core info while the system is being prepared
    if [ -n "$SPREAD_SYSTEM" ]; then
        [[ "$SPREAD_SYSTEM" == ubuntu-core-24-* ]]
    else
        grep -qFx 'ID=ubuntu-core' /etc/os-release && grep -qFx 'VERSION_ID="24"' /etc/os-release
    fi
}

is_core_gt() {
    compare_ubuntu "${1:-}" "-gt"
}

is_core_ge() {
    compare_ubuntu "${1:-}" "-ge"
}

is_core_lt() {
    compare_ubuntu "${1:-}" "-lt"
}

is_core_le() {
    compare_ubuntu "${1:-}" "-le"
}

is_classic() {
    ! is_core
}

is_trusty() {
    grep -qFx 'ID=ubuntu' /etc/os-release && grep -qFx 'VERSION_ID="14.04"' /etc/os-release
}

is_xenial() {
    grep -qFx 'UBUNTU_CODENAME=xenial' /etc/os-release
}

is_bionic() {
    grep -qFx 'UBUNTU_CODENAME=bionic' /etc/os-release
}

is_focal() {
    grep -qFx 'UBUNTU_CODENAME=focal' /etc/os-release
}

is_jammy() {
    grep -qFx 'UBUNTU_CODENAME=jammy' /etc/os-release
}

is_ubuntu() {
    VERSION=$1
    if [ -z "$VERSION" ]; then
        grep -qFx 'ID=ubuntu' /etc/os-release || grep -qFx 'ID=ubuntu-core' /etc/os-release
    else
        grep -qFx 'ID=ubuntu' /etc/os-release && grep -qFx "VERSION_ID=\"$VERSION\"" /etc/os-release
    fi
}

is_ubuntu_gt() {
    compare_ubuntu "${1:-}" "-gt"
}

is_ubuntu_ge() {
    compare_ubuntu "${1:-}" "-ge"
}

is_ubuntu_lt() {
    compare_ubuntu "${1:-}" "-lt"
}

is_ubuntu_le() {
    compare_ubuntu "${1:-}" "-le"
}

compare_ubuntu() {
    VERSION=$1
    OPERAND=$2

    if [ -z "$VERSION" ]; then
        echo "os.query: version id is expected"
        exit 1
    fi

    if ! grep -q 'ID=ubuntu' /etc/os-release; then
        echo "os.query: comparing non ubuntu system"
        return 1
    fi

    NUM_RE='^[0-9]+$'
    NUM_VERSION="$(echo "$VERSION" | tr -d '".')"
    if ! [[ $NUM_VERSION =~ $NUM_RE ]] ; then
       echo "os.query: invalid version format \"$VERSION\" provided"
       exit 1
    fi

    SYS_VERSION="$(grep 'VERSION_ID' /etc/os-release)"
    SYS_VERSION="$(echo "${SYS_VERSION#*=}" | tr -d '".')"
    if ! [[ $SYS_VERSION =~ $NUM_RE ]] ; then
       echo "os.query: invalid version format \"$SYS_VERSION\" retrieved from system"
       exit 1
    fi

    test "$SYS_VERSION" "$OPERAND" "$NUM_VERSION"
}


is_debian() {
    VERSION=$1
    if [ -z "$VERSION" ]; then
        grep -qFx 'ID=debian' /etc/os-release
    elif [ "$VERSION" == "sid" ]; then
        if [ -n "$SPREAD_SYSTEM" ]; then
            [[ "$SPREAD_SYSTEM" == debian-sid-* ]]
        else
            grep -qFx 'ID=debian' /etc/os-release && grep -qE '^PRETTY_NAME=.*/sid"$' /etc/os-release
        fi
    else
        grep -qFx 'ID=debian' /etc/os-release && grep -qFx "VERSION_ID=\"$VERSION\"" /etc/os-release
    fi
}

is_fedora() {
    VERSION=$1
    if [ -z "$VERSION" ]; then
        grep -qFx 'ID=fedora' /etc/os-release
    elif [ "$VERSION" == "rawhide" ]; then
        if [ -n "$SPREAD_SYSTEM" ]; then
            [[ "$SPREAD_SYSTEM" == fedora-rawhide-* ]]
        else
            grep -qFx 'ID=fedora' /etc/os-release && grep -qFx "REDHAT_BUGZILLA_PRODUCT_VERSION=rawhide" /etc/os-release
        fi
    else
        grep -qFx 'ID=fedora' /etc/os-release && grep -qFx "VERSION_ID=$VERSION" /etc/os-release
    fi
}

is_amazon_linux() {
    VERSION=$1
    if [ -z "$VERSION" ]; then
        grep -qFx 'ID="amzn"' /etc/os-release
    else
        grep -qFx 'ID="amzn"' /etc/os-release && grep -qFx "VERSION_ID=\"$VERSION\"" /etc/os-release
    fi
}

is_centos() {
    VERSION=$1
    if [ -z "$VERSION" ]; then
        grep -qFx 'ID="centos"' /etc/os-release
    else
        grep -qFx 'ID="centos"' /etc/os-release && grep -qFx "VERSION_ID=\"$VERSION\"" /etc/os-release
    fi
}

is_arch_linux() {
    grep -qFx 'ID=arch' /etc/os-release
}

is_opensuse() {
    VERSION=$1
    if [ -z "$VERSION" ]; then
        grep -qFx 'ID="opensuse-leap"' /etc/os-release || grep -qFx 'ID="opensuse-tumbleweed"' /etc/os-release
    elif [ "$VERSION" == "tumbleweed" ]; then
        grep -qFx 'ID="opensuse-tumbleweed"' /etc/os-release
    else
        grep -qFx 'ID="opensuse-leap"' /etc/os-release && grep -qFx "VERSION_ID=\"$VERSION\"" /etc/os-release
    fi
}

is_pc_amd64() {
    uname -m | grep -qFx 'x86_64'
}

is_pc_i386() {
    uname -m | grep -Eq '(i686|i386)'
}

is_arm() {
    uname -m | grep -Eq '(^arm.*|^aarch*)'
}

is_armhf() {
    uname -m | grep -qx 'armv7.*'
}

is_arm64() {
    uname -m | grep -Eq '(aarch64.*|armv8.*)'
}

is_s390x() {
    uname -m | grep -qFx 's390x'
}


main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi

    local subcommand="$1"
    local action=
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                action=$(echo "$subcommand" | tr '-' '_')
                shift
                break
                ;;
        esac
    done

    if [ -z "$(declare -f "$action")" ]; then
        echo "os.query: no such command: $subcommand" >&2
        show_help
        exit 1
    fi

    "$action" "$@"
}

main "$@"
