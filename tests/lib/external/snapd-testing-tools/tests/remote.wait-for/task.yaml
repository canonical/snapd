summary: smoke test for the remote.wait-for tool

backends: [google-nested]

systems: [ubuntu-20.04-64]

environment:
    user: test
    pass: ubuntu
    host: localhost
    port: 8022
    unit: nested-vm
    TARGET/xenial: xenial
    TARGET/bionic: bionic

prepare: |
    if [ "$TARGET" = xenial ]; then
        wget -O pc.img.xz https://storage.googleapis.com/snapd-spread-tests/images/booted/pc-amd64-16-stable-core_beta_2.56.2.img.xz
    elif [ "$TARGET" = bionic ]; then
        wget -O pc.img.xz https://storage.googleapis.com/snapd-spread-tests/images/booted/pc-amd64-18-stable-snapd_beta_2.56.2.img.xz
    fi
    unxz pc.img.xz

    service_line="kvm -nographic -snapshot -smp 2 -m 1500 -net nic,model=virtio -net user,hostfwd=tcp::$port-:22 -serial mon:stdio $PWD/pc.img"
    tests.systemd create-and-start-unit "$unit" "$service_line"

    remote.setup config --host "$host" --port "$port" --user "$user" --pass "$pass"

restore: |
    tests.systemd stop-unit --remove "$unit"
    rm -f pc.img "$(remote.setup get-config-path)"

execute: |
    remote.wait-for | MATCH 'usage: remote.wait-for ssh'
    remote.wait-for -h | MATCH 'usage: remote.wait-for ssh'
    remote.wait-for --help | MATCH 'usage: remote.wait-for ssh'

    # check the vm already started
    remote.wait-for ssh

    # Disable the refreshes for the vm and wait-for
    remote.refresh disable-refreshes
    remote.wait-for refresh

    # Check if the device has been initialized
    remote.wait-for device-initialized

    # Check if the device has snap command
    remote.wait-for snap-command

    # Check waiting when reboot
    remote.exec "sudo reboot" || true
    remote.wait-for no-ssh --wait 1 -n 20
    remote.wait-for ssh --wait 1 -n 60

    # Check waiting for reboot
    initial_boot_id="$(remote.exec "cat /proc/sys/kernel/random/boot_id")"
    remote.exec "sudo reboot" || true
    remote.wait-for reboot --wait 5 -n 20 "$initial_boot_id"

    # Check waiting for reboot with not enough time
    # shellcheck disable=SC2016
    remote.retry --wait 1 -n 10 'test -n "$(cat /proc/sys/kernel/random/boot_id)"'    
    second_boot_id="$(remote.exec "cat /proc/sys/kernel/random/boot_id")"

    remote.exec "sudo reboot" || true
    # shellcheck disable=SC2251
    ! remote.wait-for reboot --wait 0.5 -n 5 "$second_boot_id"

    # Check again if the device has been initialized and the snap command
    remote.wait-for device-initialized --wait 1 -n 60
    remote.wait-for snap-command

    # shellcheck disable=SC2016
    remote.retry --wait 1 -n 10 'test -n "$(cat /proc/sys/kernel/random/boot_id)"'
    third_boot_id="$(remote.exec "cat /proc/sys/kernel/random/boot_id")"

    # Check boot ids are different
    test "$initial_boot_id" != "$second_boot_id"
    test "$second_boot_id" != "$third_boot_id"
    
    # Check waiting for refresh in case no refresh in progress
    remote.wait-for refresh
