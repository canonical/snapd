summary: smoke test for the remote.wait-for tool

backends: [google-nested]

systems: [ubuntu-20.04-64]

environment:
    user: test
    pass: ubuntu
    host: localhost
    port: 8022
    unit: nested-vm
    TARGET/xenial: xenial
    TARGET/bionic: bionic

prepare: |
    if [ "$TARGET" = xenial ]; then
        wget -O pc.img.xz https://storage.googleapis.com/snapd-spread-tests/images/booted/pc-amd64-16-stable-core_beta_2.56.2.img.xz
    elif [ "$TARGET" = bionic ]; then
        wget -O pc.img.xz https://storage.googleapis.com/snapd-spread-tests/images/booted/pc-amd64-18-stable-snapd_beta_2.56.2.img.xz
    fi
    unxz pc.img.xz

    service_line="kvm -nographic -snapshot -smp 2 -m 1500 -net nic,model=virtio -net user,hostfwd=tcp::$port-:22 -serial mon:stdio $PWD/pc.img"
    tests.systemd create-and-start-unit "$unit" "$service_line"

    remote.setup config --host "$host" --port "$port" --user "$user" --pass "$pass"

restore: |
    tests.systemd stop-unit --remove "$unit"
    rm -f pc.img "$(remote.setup get-config-path)"

execute: |
    remote.refresh | MATCH 'usage: remote.refresh snap'
    remote.refresh -h | MATCH 'usage: remote.refresh snap'
    remote.refresh --help | MATCH 'usage: remote.refresh snap'

    # check the vm already started
    remote.wait-for ssh
    remote.wait-for device-initialized
    remote.wait-for snap-command

    # Check waiting when reboot
    remote.refresh full

    if [ "$TARGET" = xenial ]; then
        remote.refresh snap kernel --channel latest/beta
        remote.wait-for refresh
        remote.refresh snap core --channel stable
        remote.wait-for refresh
    elif [ "$TARGET" = bionic ]; then
        remote.refresh snap kernel --channel 18/beta
        remote.wait-for refresh
        remote.refresh snap snapd --channel stable
        remote.wait-for refresh
    fi
