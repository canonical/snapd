name: test-snapd-ovmf
base: core24
confinement: strict
version: edk2-stable202411
summary: OVMF build of EDK2 with test keys
description: |
  Build of OVMF firmware with enrolled test keys for use in snapd CI.
  This snap contains:
    - fw/
      - OVMF_CODE.fd: Firmware
      - OVMF_VARS.fd: Non volatile memory for setup mode (secure boot is disabled but can be enabled).
      - OVMF_VARS.enrolled.fd. Non volatile memory with test keys enrolled.
    - secboot/
      - PK.{key,crt}: platform key
      - KEK.{key,crt}: key exchange key
      - DB.{key,crt}: main key
  The keys that are enrolled are:
    - The PK, KEK and DB from secboot/
    - The deprecated snakeoil key used to sign development builds
    - The kernel keys for edge channels
    - The Microsoft MicCorKEK and MicCorUEFCA keys
    - An initial dbx which contains just a throw-away key

parts:
  ovmf:
    build-packages:
      - uuid-dev
      - nasm
      - acpica-tools
    plugin: nil
    source: https://github.com/tianocore/edk2.git
    source-tag: edk2-stable202411
    override-build: |
      set +eu
      . ./edksetup.sh
      set -eu

      make -C BaseTools/Source/C -j"${CRAFT_PARALLEL_BUILD_COUNT}"

      build_args=(
        --buildtarget=RELEASE
        --tagname=GCC5
        -D TPM1_ENABLE
        -D TPM2_ENABLE
        -D TPM2_CONFIG_ENABLE
        -D SECURE_BOOT_ENABLE
      )
      case "${CRAFT_ARCH_BUILD_FOR}" in
        amd64)
          build_args+=(
            --platform='OvmfPkg/OvmfPkgIa32X64.dsc'
            --arch=IA32
            --arch=X64
            -D SMM_REQUIRE
          )
          ARCH=X64
          OVMF=OVMF
          PLATFORM_DIR=Ovmf3264
          CODE=CODE
        ;;
        arm64)
          build_args+=(
            --platform=ArmVirtPkg/ArmVirtQemu.dsc
            --arch=AARCH64
          )
          ARCH=AARCH64
          OVMF=QEMU
          PLATFORM_DIR=ArmVirtQemu-AARCH64
          CODE=EFI
        ;;
      esac
      build -n "${CRAFT_PARALLEL_BUILD_COUNT}" \
        "${build_args[@]}"

      case "${CRAFT_ARCH_BUILD_FOR}" in
        arm64)
          truncate --size=64M \
            "Build/${PLATFORM_DIR}/RELEASE_GCC5/FV/${OVMF}_${CODE}.fd" \
            "Build/${PLATFORM_DIR}/RELEASE_GCC5/FV/${OVMF}_VARS.fd"
        ;;
      esac

      install -Dm644 -t "${CRAFT_PART_INSTALL}/fw" \
        "Build/${PLATFORM_DIR}/RELEASE_GCC5/FV/${OVMF}_${CODE}.fd" \
        "Build/${PLATFORM_DIR}/RELEASE_GCC5/FV/${OVMF}_VARS.fd" \
        "Build/${PLATFORM_DIR}/RELEASE_GCC5/${ARCH}/Shell.efi"

  import-snakeoil:
    # We also enroll the snakeoil key for transition. But we should
    # need to do that.  We can sign our kernels with DB.key instead.
    plugin: dump
    source: snakeoil
    organize:
      PkKek-1-snakeoil.pem: snakeoil/PkKek-1-snakeoil.pem
      kernel-edge-20-22.crt: snakeoil/kernel-edge-20-22.crt
      kernel-edge-24.crt: snakeoil/kernel-edge-24.crt
    prime:
      - -*

  efitools:
    build-packages:
      - gnu-efi
      - libssl-dev
      - sbsigntool
      - help2man
      - libfile-slurp-perl
    after:
      - import-snakeoil
    plugin: nil
    source: https://git.kernel.org/pub/scm/linux/kernel/git/jejb/efitools.git
    source-tag: v1.9.2
    override-pull: |
      craftctl default
      patch -p1 <"${CRAFT_PROJECT_DIR}/efitools-updatevars-temporary-constants.patch"
      patch -p1 <"${CRAFT_PROJECT_DIR}/efitools-ms-kek.patch"
    override-build: |
      cp "${CRAFT_STAGE}/snakeoil/PkKek-1-snakeoil.pem" snakeoil.crt
      cp "${CRAFT_STAGE}/snakeoil/kernel-edge-20-22.crt" kernel-edge-20-22.crt
      cp "${CRAFT_STAGE}/snakeoil/kernel-edge-24.crt" kernel-edge-24.crt
      # Make sure we have Snake Oil as origanization name to trigger work-arounds in secboot
      openssl req -new -x509 -newkey rsa:2048 -subj "/CN=DB/O=Snake Oil/" -keyout DB.key -out DB.crt -days 3650 -nodes -sha256
      make -j1 EXTRAKEYS="revoked snakeoil kernel-edge-20-22 kernel-edge-24" MYGUID="7bea37ed-f339-470a-aefe-c6b1bef55040" all revoked-hash-blacklist.esl
      ./sign-efi-sig-list -c KEK.crt -k KEK.key dbx revoked-hash-blacklist.esl initial-dbx.auth
      install -Dm644 -t "${CRAFT_PART_INSTALL}/secboot" \
        LockDown-signed.efi UpdateVars-signed.efi \
        {PK,KEK,DB}.{key,crt} \
        snakeoil-update.auth \
        kernel-edge-20-22-update.auth \
        kernel-edge-24-update.auth \
        ms-kek-pkupdate.auth \
        ms-uefi-update.auth \
        initial-dbx.auth
    prime:
      - -secboot/LockDown-signed.efi
      - -secboot/UpdateVars-signed.efi
      - -secboot/*-update.auth
      - -secboot/initial-dbx.auth

  lockdown-image:
    build-packages:
      - dosfstools
      - mtools
    after:
      - ovmf
      - efitools
    plugin: nil
    source: lockdown-image
    override-build: |
      mkdir -p ./root/efi/EFI/BOOT
      sbsign "${CRAFT_STAGE}/fw/Shell.efi" --key "${CRAFT_STAGE}/secboot/DB.key" --cert "${CRAFT_STAGE}/secboot/DB.crt" --output ./root/efi/EFI/BOOT/BOOTX64.EFI
      cp "${CRAFT_STAGE}/secboot/LockDown-signed.efi" ./root/efi/LockDown.efi
      cp "${CRAFT_STAGE}/secboot/UpdateVars-signed.efi" ./root/efi/UpdateVars.efi
      cp "${CRAFT_STAGE}/secboot"/*-*update.auth ./root/efi/
      cp "${CRAFT_STAGE}/secboot/initial-dbx.auth" ./root/efi/

      rm -f lockdown.img
      truncate --size 100M lockdown.img
      systemd-repart --empty=require --dry-run=no --offline=true --definitions=./repart.d --root=./root lockdown.img

      install -Dm644 -t "${CRAFT_PART_INSTALL}" lockdown.img
    prime:
      - -lockdown.img

  ovmf-secboot:
    build-packages:
      - ipxe-qemu
      - to amd64:
          - qemu-system-x86
      - to arm64:
          - qemu-system-arm
    after:
      - lockdown-image
    plugin: nil
    source: lockdown-image
    override-build: |
      case "${CRAFT_ARCH_BUILD_FOR}" in
        amd64)
          OVMF=OVMF
          MACHINE=q35
          CODE=CODE
          qemu=qemu-system-x86_64
        ;;
        arm64)
          OVMF=QEMU
          MACHINE=virt
          CODE=EFI
          qemu=qemu-system-aarch64
        ;;
      esac
      cp "${CRAFT_STAGE}/fw/${OVMF}_VARS.fd" .

      "${qemu}" -nographic -m 4G -smp 2 -M "${MACHINE}" -cpu max \
        -drive "if=pflash,unit=0,file=${CRAFT_STAGE}/fw/${OVMF}_${CODE}.fd,readonly=on,format=raw" \
        -drive "if=pflash,unit=1,file=${OVMF}_VARS.fd,format=raw" \
        -drive "if=virtio,file=${CRAFT_STAGE}/lockdown.img,format=raw" </dev/null

      install -Dm644 "${OVMF}_VARS.fd" "${CRAFT_PART_INSTALL}/fw/${OVMF}_VARS.enrolled.fd"
