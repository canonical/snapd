#!/bin/sh

echo "Getting attributes from connect-plug-consumer hook"

if ! output=$(snapctl get --slot :consumer producer-attr1); then
    echo "Expected connect-plug-consumer to be able to read the value of 'producer-attr1' attribute of the slot"
    exit 1
fi
expected_output="producervalue1"
if [ "$output" != "$expected_output" ]; then
    echo "Expected output to be '$expected_output', but it was '$output'"
    exit 1
fi

# Read 'producer-attr3' attribute of the slot
if ! output=$(snapctl get --slot :consumer producer-attr3); then
    echo "Expected connect-plug-consumer be able to read the value of the 'producer-attr3' attribute of the slot"
    exit 1
fi
expected_output="producervalue3-validated"
if [ "$output" != "$expected_output" ]; then
    echo "Expected output to be '$expected_output', but it was '$output'"
    exit 1
fi

# Read own 'consumer-attr1' attribute
if ! output=$(snapctl get :consumer consumer-attr1); then
    echo "Expected connect-plug-foo be able to read the value of own 'consumer-attr1' attribute"
    exit 1
fi
expected_output="consumervalue1"
if [ "$output" != "$expected_output" ]; then
    echo "Expected output to be '$expected_output', but it was '$output'"
    exit 1
fi

# Read own 'consumer-attr3' attribute
if ! output=$(snapctl get :consumer consumer-attr3); then
    echo "Expected connect-plug-consumer be able to read the value of own 'consumer-attr3' attribute"
    exit 1
fi
expected_output="consumervalue3-validated"
if [ "$output" != "$expected_output" ]; then
    echo "Expected output to be '$expected_output', but it was '$output'"
    exit 1
fi


# Failure on unknown plug
if snapctl get :unknown target; then
    echo "Expected snapctl get to fail on unknown plug"
    exit 1
fi

# Attributes cannot be set in connect- hooks
if snapctl set :consumer consumer-attr4=foo; then
    echo "Expected snapctl set to fail when run from connect-plug hook"
    exit 1
fi
