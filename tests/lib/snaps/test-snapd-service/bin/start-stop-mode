#!/usr/bin/python3
import os
import signal
import socket
import subprocess
import sys
import time
import types


# Re-implement sd_notify to avoid the need to tweak apparmor permissions to run systemd-notify(1)
def sd_notify(unset_environment: bool, state: str) -> None:
    addr = os.getenv("NOTIFY_SOCKET")
    if addr is None:
        return
    with socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM) as sock:
        sock.connect(addr)
        sock.sendmsg([state.encode("UTF-8")])
    if unset_environment:
        os.unsetenv("NOTIFY_SOCKET")

def main() -> None:
    # Keep track of the need to keep waiting for signals
    loop = True

    # When one of the signals given below arrives log a message and stop the loop.
    def on_signal(signum: int, tb: types.FrameType) -> None:
        print("got {}".format(signal.Signals(signum).name.lower()))
        nonlocal loop
        loop = False

    for signum in signal.SIGUSR1, signal.SIGUSR2, signal.SIGHUP:
        signal.signal(signum, on_signal)

    # Tell systemd that we are considered ready now
    try:
        sd_notify(False, "READY=1\n")
    except PermissionError:
        raise SystemExit("cannot send systemd notification message")

    # Keep looping until a signal arrives, logging message to show we are alive.
    while loop:
        print("running {} process".format(sys.argv[1] if len(sys.argv) > 1 else "???"))
        time.sleep(1)


if __name__ == "__main__":
    main()
