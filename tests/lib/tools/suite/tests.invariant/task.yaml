summary: tests.invariant is detecting problems

execute: |
    # Invariant tool presents the usage screen when invoked without arguments
    # or with the -h or --help options.
    tests.invariant | MATCH 'usage: tests.invariant check \[INVARIANT...\]'
    tests.invariant -h | MATCH 'usage: tests.invariant check \[INVARIANT...\]'
    tests.invariant --help | MATCH 'usage: tests.invariant check \[INVARIANT...\]'

    # When invoked with "check" argument, it runs either all invariants
    # or the specified set of invariants.
    tests.invariant check | MATCH 'tests.invariant: root-files-in-home ok'
    tests.invariant check root-files-in-home | MATCH 'tests.invariant: root-files-in-home ok'

    # Unknown invariant names are reported.
    tests.invariant check foo 2>&1 | MATCH 'tests.invariant: unknown invariant foo'
    not tests.invariant check foo 2>/dev/null

    # The root-files-in-home invariant detects files owned by root anywhere in /home/
    tests.invariant check root-files-in-home | MATCH 'tests.invariant: root-files-in-home ok'
    touch /home/test/invariant-canary
    tests.cleanup defer rm -f /home/test/invariant-canary
    chown root /home/test/invariant-canary
    tests.invariant check root-files-in-home 2>&1 | MATCH 'tests.invariant: root-files-in-home not-ok'
    tests.invariant check root-files-in-home 2>&1 | MATCH 'tests.invariant: the following files should not be owned by root'
    tests.invariant check root-files-in-home 2>&1 | MATCH '/home/test/invariant-canary'
    tests.invariant check root-files-in-home 2>&1 | MATCH 'tests.invariant: system is corrupted'
    not tests.invariant check root-files-in-home 2>/dev/null

    # Chown is the solution.
    chown test /home/test/invariant-canary
    tests.invariant check root-files-in-home | MATCH 'tests.invariant: root-files-in-home ok'

    # The root-files-in-home invariant ignores /home/gopath which comes from spread.yaml
    test -d /home/gopath
    test "$(stat -c %u /home/gopath)" -eq 0

    # The root-files-in-home invariant ignores /home/ubuntu which comes from
    # GCE cloud-init data, but is sometimes root-owned for unknown reason.
    if [ -d /home/ubuntu ]; then
        old_uid="$(stat -c %u /home/ubuntu)"
        chown root /home/ubuntu
        tests.cleanup defer chown "$old_uid" /home/ubuntu
    else
        mkdir -p /home/ubuntu
        tests.cleanup defer rmdir /home/ubuntu
        chown root /home/ubuntu
    fi
    tests.invariant check root-files-in-home | MATCH 'tests.invariant: root-files-in-home ok'

    # Invariant tool detects leftovers from crashed snap-confine.
    mkdir "$TESTSTMP"/snap.rootfs_tests.invariant
    tests.invariant check crashed-snap-confine 2>&1 | MATCH 'tests.invariant: crashed-snap-confine not-ok'
    tests.invariant check crashed-snap-confine 2>&1 | MATCH 'tests.invariant: it seems snap-confine has crashed'
    rmdir "$TESTSTMP"/snap.rootfs_tests.invariant

    # This filters out 14.04 and ubuntu-core, respectively.
    if [ "$(command -v systemd-run)" != "" ] && [ "$(command -v dbus-launch)" != "" ]; then
        # Invariant tool detects leaked dbus-daemon.
        systemd-run --service-type=forking --unit superfluous-dbus.service dbus-launch --sh-syntax
        # shellcheck disable=SC2016
        retry sh -c 'test "$(systemctl is-active superfluous-dbus.service)" = active'
        tests.invariant check stray-dbus-daemon 2>&1 | MATCH 'tests.invariant: stray-dbus-daemon not-ok'
        systemctl stop superfluous-dbus.service
        tests.invariant check stray-dbus-daemon 2>&1 | MATCH 'tests.invariant: stray-dbus-daemon ok'
    fi
