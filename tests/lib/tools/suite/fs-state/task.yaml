summary: smoke test for the fs-state tool

execute: |
    # Check help
    "$TESTSTOOLS"/fs-state -h | MATCH "usage: fs-state mock-dir"
    "$TESTSTOOLS"/fs-state --help | MATCH "usage: fs-state mock-dir"
    "$TESTSTOOLS"/fs-state | MATCH "usage: fs-state mock-dir"

    # Mocking a non-existing directory creates that directory and in addition,
    # creates a marker file with the .fake suffix. This marker file identifies
    # mock objects.
    not test -e new-dir
    "$TESTSTOOLS"/fs-state mock-dir new-dir
    test -d new-dir
    test -f new-dir.fake
    # There's no .back directory because the mocked directory did not replace
    # any existing directory.
    not test -d new-dir.back
    # Mocked directory can be restored. When this happens the .fake marker file
    # is removed and the mocked directory goes away.
    "$TESTSTOOLS"/fs-state restore-dir new-dir
    not test -d new-dir
    not test -f new-dir.fake

    # Mocking an existing directory not only creates the .fake marker file but
    # also preserves the original with the suffix .back.
    mkdir existing-dir
    touch existing-dir/unrelated
    "$TESTSTOOLS"/fs-state mock-dir existing-dir
    test -d existing-dir
    test -f existing-dir.fake
    test -d existing-dir.back
    # The newly created mock directory is entirely empty.
    not test -f existing-dir/unrelated
    # Restoring removes the mock directory and replaces it with the preserved
    # .back directory.
    "$TESTSTOOLS"/fs-state restore-dir existing-dir
    test -d existing-dir
    test -f existing-dir/unrelated
    not test -f existing-dir.fake
    rm -rf existing-dir

    # Restoring a dir which is not mocked fails with an error message.
    mkdir non-mocked-dir
    not "$TESTSTOOLS"/fs-state restore-dir non-mocked-dir
    "$TESTSTOOLS"/fs-state restore-dir non-mocked-dir 2>&1 | MATCH "fs-state: cannot restore non-mocked directory: non-mocked-dir"
    rm -rf non-mocked-dir

    # Mocking a non-existing file creates the file and creates a marker file
    # with the .fake suffix. This marker file identifies mock objects.
    "$TESTSTOOLS"/fs-state mock-file new-file
    test -f new-file
    test -f new-file.fake
    test ! -f new-file.back
    # Mocked file can be restored. When this happens the .fake marker file
    # is removed and the mocked file goes away.
    "$TESTSTOOLS"/fs-state restore-file new-file
    test ! -f new-file
    test ! -f new-file.fake
    test ! -f new-file.back

    # Mocking an existing file not only creates the .fake marker file but
    # also preserves the original with the suffix .back.
    echo content > existing-file
    "$TESTSTOOLS"/fs-state mock-file existing-file
    test -f existing-file
    test -f existing-file.fake
    test -f existing-file.back
    not diff existing-file existing-file.back
    # Restoring removes the mock file and replaces it with the preserved
    # .back file.
    "$TESTSTOOLS"/fs-state restore-file existing-file
    test -f existing-file
    test ! -f existing-file.fake
    test ! -f existing-file.back

    # Restoring a file which is not mocked fails with an error message.
    touch non-mocked-file
    not "$TESTSTOOLS"/fs-state restore-file non-mocked-file
    "$TESTSTOOLS"/fs-state restore-file non-mocked-file 2>&1 | MATCH "fs-state: cannot restore non-mocked file: non-mocked-file"
