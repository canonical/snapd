#!/bin/bash

show_help() {
	echo "usage: tests.invariant check [INVARIANT...]"
	echo
	echo "Supported invariants:"
	echo "    root-files-in-home: most of /home/* does not contain root-owned files"
	echo "    crashed-snap-confine: $TESTSTMP/snap.rootfs_* does not exist"
	echo "    lxcfs-mounted: /var/lib/lxcfs is a mount point"
	echo "    stray-dbus-daemon: at most one dbus-daemon is running"
	echo "    leftover-defer-sh: defer.sh must not be left over by tests"
	echo "    broken-snaps: snaps must not be left around that are in a broken state"
}

if [ $# -eq 0 ]; then
	show_help
	exit 1
fi

action=
while [ $# -gt 0 ]; do
	case "$1" in
		-h|--help)
			show_help
			exit 0
			;;
		--)
			shift
			break
			;;
		check)
			action=check
			shift
			;;
		-*)
			echo "tests.invariant: unsupported argument $1" >&2
			exit 1
			;;
		*)
			break
			;;
	esac
done

check_root_files_in_home() {
	n="$1" # invariant name
	# This find expression looks for root owned file in /home with the following exceptions:
	# - The /home/ubuntu directory is root owned but is not used by the tests so we ignore it
	# - The /home/gopath and everything inside it comes from spread.yaml and is too inconvenient to change
	# As a note, the working theory for the origin of /home/ubuntu is cloud-init and data from GCE.
	find /home -mindepth 1 -user root -a ! -path "/home/ubuntu" -a ! -path "$GOHOME" -a ! -path "$GOHOME/*" 2>/dev/null >"$TESTSTMP/tests.invariant.$n"
	if [ -s "$TESTSTMP/tests.invariant.$n" ]; then
		echo "tests.invariant: the following files should not be owned by root" >&2
		cat "$TESTSTMP/tests.invariant.$n" >&2
		return 1
	fi
}

check_crashed_snap_confine() {
	n="$1" # invariant name
	find "$TESTSTMP" -name 'snap.rootfs_*' > "$TESTSTMP/tests.invariant.$n"
	# NOTE: it may be a mount point but we are not checking that here.
	if [ -s "$TESTSTMP/tests.invariant.$n" ]; then
		echo "tests.invariant: it seems snap-confine has crashed" >&2
		cat "$TESTSTMP/tests.invariant.$n" >&2
		return 1
	fi
}

check_lxcfs_mounted() {
	n="$1" # invariant name
	"$TESTSTOOLS"/mountinfo.query /var/lib/lxcfs > "$TESTSTMP/tests.invariant.$n"
	if [ -s "$TESTSTMP/tests.invariant.$n" ]; then
		echo "tests.invariant: it seems lxcfs is mounted" >&2
		cat "$TESTSTMP/tests.invariant.$n" >&2
		return 1
	fi
}

check_stray_dbus_daemon() {
	n="$1" # invariant name
	(
		skipped_system=0
		skipped_root_session=0
		for pid in $(pgrep -x dbus-daemon); do
			cmdline="$(tr '\0' ' ' < "/proc/$pid/cmdline")"
			# Ignore one dbus-daemon responsible for the system bus.
			if echo "$cmdline" | grep -q 'dbus-daemon --system' && [ "$skipped_system" -eq 0 ]; then
				skipped_system=1
				continue
			fi
			if echo "$cmdline" | grep -q 'dbus-daemon --session' && [ "$(stat -c %u "/proc/$pid")" -eq 0 ] && [ "$skipped_root_session" -eq 0 ]; then
				skipped_root_session=1
				continue
			fi
			# Ignore dbus-daemon running the session of the "external" user.
			# This may happen when testing a core device using the ad-hoc
			# backend. This user is never used by tests explicitly.
			user="$(stat -c %U "/proc/$pid")"
			if [ "$user" = "external" ]; then
				continue
			fi
			# Report stray dbus-daemon.
			echo "pid:$pid user:$user cmdline:$cmdline"
		done
	) > "$TESTSTMP/tests.invariant.$n"
	if [ -s "$TESTSTMP/tests.invariant.$n" ]; then
		echo "tests.invariant: more than one dbus-daemon running" >&2
		cat "$TESTSTMP/tests.invariant.$n" >&2
		return 1
	fi
}

check_leftover_defer_sh() {
	n="$1" # invariant name
	(
		find "$PROJECT_PATH" -name defer.sh > "$TESTSTMP/tests.invariant.$n"
	) > "$TESTSTMP/tests.invariant.$n"
	if [ -s "$TESTSTMP/tests.invariant.$n" ]; then
		echo "tests.invariant: leftover defer.sh script" >&2
		cat "$TESTSTMP/tests.invariant.$n" >&2
		return 1
	fi
}

check_broken_snaps() {
	n="$1" # invariant name
	(
		# fist column is the snap name, revision is 3rd
		snap list --all | awk '/,?broken,?/ {print $1,$3}' | while read -r name rev; do
			echo "snap $name ($rev) is broken"
		done
	) > "$TESTSTMP/tests.invariant.$n"
	if [ -s "$TESTSTMP/tests.invariant.$n" ]; then
		echo "tests.invariant: broken snaps" >&2
		cat "$TESTSTMP/tests.invariant.$n" >&2
		return 1
	fi
}

check_invariant() {
	case "$1" in
		root-files-in-home)
			check_root_files_in_home "$1"
			;;
		crashed-snap-confine)
			check_crashed_snap_confine "$1"
			;;
		lxcfs-mounted)
			check_lxcfs_mounted "$1"
			;;
		stray-dbus-daemon)
			check_stray_dbus_daemon "$1"
			;;
		leftover-defer-sh)
			check_leftover_defer_sh "$1"
			;;
		broken-snaps)
			check_broken_snaps "$1"
			;;
		*)
			echo "tests.invariant: unknown invariant $1" >&2
			exit 1
			;;
	esac
}

main() {
	ALL_INVARIANTS="root-files-in-home crashed-snap-confine lxcfs-mounted stray-dbus-daemon leftover-defer-sh broken-snaps"

	case "$action" in
		check)
			ok=1
			if [ $# -gt 0 ]; then
				INV_LIST="$*"
			else
				INV_LIST="$ALL_INVARIANTS"
			fi
			for inv in $INV_LIST; do
				if check_invariant "$inv"; then
					echo "tests.invariant: $inv ok"
				else
					echo "tests.invariant: $inv not-ok" >&2
					ok=0
				fi
			done
			if [ $ok -eq 0 ]; then
				echo "tests.invariant: system is corrupted" >&2
				exit 1
			fi
			;;
		*)
			echo "tests.invariant: unknown action $action" >&2
			exit 1
			;;
	esac
}

main "$@"
