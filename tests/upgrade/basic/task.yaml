summary: Check that upgrade works
restore: |
    if [ "$REMOTE_STORE" = staging ]; then
        echo "skip upgrade tests while talking to the staging store"
        exit 0
    fi
    rm -f /var/tmp/myevil.txt
execute: |
    if [ "$REMOTE_STORE" = staging ]; then
        echo "skip upgrade tests while talking to the staging store"
        exit 0
    fi
    . "$TESTSLIB/apt.sh"
    . "$TESTSLIB/snaps.sh"

    echo Install previous version...
    dpkg -l snapd snap-confine || true
    apt-get install -y snapd

    prevsnapdver=$(snap --version|grep "snapd ")

    if [[ "$SPREAD_SYSTEM" = debian-* ]] ; then
        # For debian we install the latest core snap independently until
        # the bug fix is on stable once 2.27 landed
        snap install core
    fi

    echo Install sanity check snaps with it
    snap install test-snapd-tools
    snap install test-snapd-auto-aliases
    install_local_classic test-snapd-classic-confinement

    echo Sanity check installs
    test-snapd-tools.echo Hello | grep Hello
    test-snapd-tools.env | grep SNAP_NAME=test-snapd-tools
    test_snapd_wellknown1|MATCH "ok wellknown 1"
    test_snapd_wellknown2|MATCH "ok wellknown 2"

    echo Do upgrade
    # allow-downgrades prevents errors when new versions hit the archive, for instance,
    # trying to install 2.11ubuntu1 over 2.11+0.16.04
    if [[ "$SPREAD_SYSTEM" == ubuntu-14.04-* ]]; then
        # apt_install_local uses dpkg directly which happily downgrades
        apt_install_local ${GOPATH}/snapd*.deb
    else
        # not using apt_install_local here as this will not have
        # --allow-downgrades
        apt install -y --allow-downgrades ${GOPATH}/snapd*.deb
    fi

    snapdver=$(snap --version|grep "snapd ")
    [ "$snapdver" != "$prevsnapdver" ]

    echo Sanity check already installed snaps after upgrade
    snap list | grep core
    snap list | grep test-snapd-tools
    test-snapd-tools.echo Hello | grep Hello
    test-snapd-tools.env | grep SNAP_NAME=test-snapd-tools
    test-snapd-classic-confinement.recurse 5

    # only test if confinement works and we actually have apparmor available
    # FIXME: this will be converted to a better check once we added the
    # plumbing for that into the snap command.
    if [ -e /sys/kernel/security/apparmor ]; then
        echo Hello > /var/tmp/myevil.txt
        test-snapd-tools.cat /var/tmp/myevil.txt && exit 1 || true
    fi

    # check that automatic aliases survived
    test_snapd_wellknown1|MATCH "ok wellknown 1"
    test_snapd_wellknown2|MATCH "ok wellknown 2"
    snap aliases|MATCH "test-snapd-auto-aliases.wellknown1 +test_snapd_wellknown1 +-"
    snap aliases|MATCH "test-snapd-auto-aliases.wellknown2 +test_snapd_wellknown2 +-"

    echo Check migrating to types in state
    coreType=$(jq -r '.data.snaps["core"].type' /var/lib/snapd/state.json)
    testSnapType=$(jq -r '.data.snaps["test-snapd-tools"].type' /var/lib/snapd/state.json)
    [ "$coreType" = "os" ]
    [ "$testSnapType" = "app" ]
