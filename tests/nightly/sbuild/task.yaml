summary: Ensure snapd builds correctly in sbuild

# takes a while
priority: 500

environment:
    BUILD_MODE/normal: normal
    BUILD_MODE/any: any

systems: [debian-sid-*]

execute: |
    echo "Create a sid sbuild env"
    eatmydata sbuild-createchroot --include=eatmydata,ccache,gnupg sid /srv/chroot/sid-amd64-sbuild http://deb.debian.org/debian

    echo "Allow test user to run sbuild"
    sbuild-adduser test

    BUILD_PARAM="--verbose --debug"
    if [ "$BUILD_MODE" == "any" ]; then
        BUILD_PARAM="$BUILD_PARAM --arch-any"
    fi

    echo "Build mode: $BUILD_MODE"
    su -c "sbuild $BUILD_PARAM -d sid --run-autopkgtest $SPREAD_PATH/../*.dsc" test

restore: |
    rm --recursive --one-file-system /srv/chroot/sid-amd64-sbuild
    rm -f /etc/schroot/chroot.d/sid-amd64-sbuild-*

debug: |
    # Test that there's a log file and a symbolic link pointing to it.
    # The non-symlink has a time-stamp and we can match on the "Z" timezone
    # marker to find it.
    test "$(find . -maxdepth 1 -name '*Z.build' | wc -l)" -ge 1 &&  tail -n 100 ./*Z.build
    cat <<EOM
    Use release-tools/debian-package-builder to interactively fix build
    issues. The debug shell created there shows the true layout of the source
    code as it exists during the build inside a debian system, inside the
    environment created by sbuild.

    In particular note that the source code exists twice in the build tree,
    and only the specific copy is being used.
    EOM
