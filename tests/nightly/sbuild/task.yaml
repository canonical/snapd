summary: Ensure snapd builds correctly in sbuild

systems: [debian-sid-*]

# takes a while
priority: 500

environment:
    # amd64 normal build
    BUILD_MODE/normal: normal
    ARCH/normal: amd64
    # i386 normal build
    BUILD_MODE/i386: normal
    ARCH/i386: i386
    # Only build arch:all
    BUILD_MODE/all: all
    ARCH/all: amd64

restore: |
    rm --recursive --one-file-system /srv/chroot/"sid-$ARCH-sbuild"
    rm -f /etc/schroot/chroot.d/"sid-$ARCH-sbuild-"*

debug: |
    # Test that there's a log file and a symbolic link pointing to it.
    # The non-symlink has a time-stamp and we can match on the "Z" timezone
    # marker to find it.
    test "$(find . -maxdepth 1 -name '*Z.build' | wc -l)" -ge 1 &&  tail -n 100 ./*Z.build
    cat <<EOM
    Use release-tools/debian-package-builder to interactively fix build
    issues. The debug shell created there shows the true layout of the source
    code as it exists during the build inside a debian system, inside the
    environment created by sbuild.

    In particular note that the source code exists twice in the build tree,
    and only the specific copy is being used.
    EOM

execute: |
    echo "Create a sid sbuild env"
    eatmydata sbuild-createchroot --include=eatmydata,ccache,gnupg --arch="$ARCH" sid /srv/chroot/"sid-$ARCH-sbuild" http://deb.debian.org/debian

    echo "Allow test user to run sbuild"
    sbuild-adduser test

    BUILD_PARAM="--verbose"
    if [ "$BUILD_MODE" == "all" ]; then
        BUILD_PARAM="$BUILD_PARAM --arch-all --no-arch-any"
    fi

    echo "Build mode: $BUILD_MODE"
    su -c "sbuild $BUILD_PARAM --arch=$ARCH -d sid --run-autopkgtest $SPREAD_PATH/../*.dsc" test
