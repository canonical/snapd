summary: Ensure that the ubuntu-core -> core transition works with two cores

# autopkgtest run only a subset of tests that deals with the integration
# with the distro
backends: [-autopkgtest]

# we never test on core because the transition can only happen on "classic"
# we disable on ppc64el because the downloads are very slow there
systems: [-ubuntu-core-*, -ubuntu-*-ppc64el]

warn-timeout: 1m
kill-timeout: 5m

debug: |
    snap changes
    #shellcheck source=tests/lib/changes.sh
    . "$TESTSLIB"/changes.sh
    snap change "$(change_id 'Transition ubuntu-core to core')" || true

execute: |
    echo "install a snap"
    snap install test-snapd-python-webserver
    snap interfaces -i network | MATCH ":network.*test-snapd-python-webserver"

    #shellcheck source=tests/lib/names.sh
    . "$TESTSLIB/names.sh"
    cp /var/lib/snapd/state.json /var/lib/snapd/state.json.old
    jq -r '.data.snaps["core"].type="xxx"' < /var/lib/snapd/state.json.old > /var/lib/snapd/state.json

    systemctl stop snapd.service snapd.socket
    systemctl start snapd.service snapd.socket

    snap download "--${CORE_CHANNEL}" ubuntu-core
    snap ack ./ubuntu-core_*.assert
    snap install ./ubuntu-core_*.snap

    cp /var/lib/snapd/state.json /var/lib/snapd/state.json.old
    jq -r '.data.snaps["core"].type="os"' < /var/lib/snapd/state.json.old > /var/lib/snapd/state.json

    snap list ubuntu-core
    snap list core

    echo "Ensure transition is triggered"
    # wait for steady state or ensure-state-soon will be pointless
    retry -n 40 --wait .5 sh -c 'snap changes | NOMATCH ".*.Doing.*"'
    snap debug ensure-state-soon

    echo "Wait for transition from ubuntu-core to core"
    retry -n 240 --wait 1 sh -c 'snap changes | MATCH ".*Done.*Transition ubuntu-core to core"'

    if snap list ubuntu-core; then
        echo "ubuntu-core still installed, transition failed"
        exit 1
    fi
    snap interfaces -i network | MATCH ":network.*test-snapd-python-webserver"
