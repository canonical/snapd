project: snapd

environment:
    GOPATH: /home/gopath
    REUSE_PROJECT: "$(HOST: echo $REUSE_PROJECT)"
    PROJECT_PATH: $GOPATH/src/github.com/snapcore/snapd
    # /usr/lib/go-1.6/bin for trusty (needs to be last as we use
    # a different go in gccgo tests)
    PATH: $GOPATH/bin:/snap/bin:$PATH:/usr/lib/go-1.6/bin
    TESTSLIB: $PROJECT_PATH/tests/lib
    SNAPPY_TESTING: 1
    # we run the entire suite with re-exec on (the default) and modify
    # the core snap so that it contains our new code.  So we run new
    # snapd from the deb that re-execs into new snapd in core.  To
    # test purely from the deb, set "export SPREAD_SNAP_REEXEC=0"
    SNAP_REEXEC: "$(HOST: echo ${SPREAD_SNAP_REEXEC:-})"
    MODIFY_CORE_SNAP_FOR_REEXEC: "$(HOST: echo ${SPREAD_MODIFY_CORE_SNAP_FOR_REEXEC:-1})"
    SPREAD_STORE_USER: "$(HOST: echo $SPREAD_STORE_USER)"
    SPREAD_STORE_PASSWORD: "$(HOST: echo $SPREAD_STORE_PASSWORD)"
    LANG: "$(echo ${LANG:-C.UTF-8})"
    LANGUAGE: "$(echo ${LANGUAGE:-en})"
    # important to ensure adhoc and linode/qemu behave the same
    SUDO_USER: ""
    SUDO_UID: ""
    TRUST_TEST_KEYS: "true"
    MANAGED_DEVICE: "false"
    CORE_CHANNEL: "$(HOST: echo ${SPREAD_CORE_CHANNEL:-edge})"
    # slight abuse
    GENERATE_14_04: "$(HOST: while [ `pwd` != / ] && [ ! -f spread.yaml ]; do cd ..; done && ./generate-packaging-dir ubuntu 14.04)"

backends:
    linode:
        key: "$(HOST: echo $SPREAD_LINODE_KEY)"
        halt-timeout: 2h
        systems:
            - ubuntu-14.04-64:
                kernel: GRUB 2
            - ubuntu-16.04-64:
                kernel: GRUB 2
                workers: 2
            - ubuntu-16.04-32:
                kernel: GRUB 2
                workers: 2
            - ubuntu-core-16-64:
                kernel: Direct Disk
                image: ubuntu-16.04-64
            # FIXME restore of ubuntu-core does not properly reset
            # boot variables and key snaps to their pristine state.
            - ubuntu-core-16-64-fixme:
                kernel: Direct Disk
                image: ubuntu-16.04-64
    qemu:
        environment:
            APT_PROXY: "$(HOST: echo $APT_PROXY)"
        systems:
            - ubuntu-14.04-32:
                username: ubuntu
                password: ubuntu
            - ubuntu-14.04-64:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.04-32:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.04-64:
                username: ubuntu
                password: ubuntu
            - ubuntu-core-16-64:
                image: ubuntu-16.04-64
                username: ubuntu
                password: ubuntu
            - ubuntu-16.10-64:
                username: ubuntu
                password: ubuntu
            - ubuntu-17.04-64:
                username: ubuntu
                password: ubuntu
    autopkgtest:
        type: adhoc
        allocate: |
            echo "Allocating ad-hoc $SPREAD_SYSTEM"
            if [ -z "${ADT_ARTIFACTS}" ]; then
                FATAL "adhoc only works inside autopkgtest"
                exit 1
            fi
            echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/99-spread-users
            ADDRESS localhost:22
        discard: |
            echo "Discarding ad-hoc $SPREAD_SYSTEM"
        systems:
            - ubuntu-16.04-amd64:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.04-i386:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.04-ppc64el:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.04-armhf:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.10-amd64:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.10-i386:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.10-ppc64el:
                username: ubuntu
                password: ubuntu
            - ubuntu-16.10-armhf:
                username: ubuntu
                password: ubuntu
            - ubuntu-17.04-amd64:
                username: ubuntu
                password: ubuntu
            - ubuntu-17.04-i386:
                username: ubuntu
                password: ubuntu
            - ubuntu-17.04-ppc64el:
                username: ubuntu
                password: ubuntu
            - ubuntu-17.04-armhf:
                username: ubuntu
                password: ubuntu
    external:
        type: adhoc
        environment:
            SPREAD_EXTERNAL_ADDRESS: "$(HOST: echo ${SPREAD_EXTERNAL_ADDRESS:-localhost:8022})"
            MANAGED_DEVICE: "true"
        allocate: |
            ADDRESS $SPREAD_EXTERNAL_ADDRESS
        systems:
            - ubuntu-core-16-64:
                environment:
                    TRUST_TEST_KEYS: "false"
                username: test
                password: ubuntu
            - ubuntu-core-16-arm-64:
                username: test
                password: ubuntu
            - ubuntu-core-16-arm-32:
                username: test
                password: ubuntu

path: /home/gopath/src/github.com/snapcore/snapd

exclude:
    - .git

prepare-each: |
    # systemd on 14.04 does not know about --rotate
    # or --vacuum-time.
    # TODO: Find a way to clean out systemd logs on
    # systemd 204.
    if [[ "$SPREAD_SYSTEM" != ubuntu-14.04-* ]]; then
        journalctl --rotate
        sleep .1
        journalctl --vacuum-time=1ms
    fi
    dmesg -c > /dev/null

debug-each: |
    journalctl -u snapd
    dmesg | grep DENIED || true

prepare: |
    . "$TESTSLIB/prepare-project.sh"

restore: |
    if [ "$SPREAD_BACKEND" = external ]; then
        # start and enable autorefresh
        systemctl enable --now snapd.refresh.timer
    fi

suites:
    tests/main/:
        summary: Full-system tests for snapd
        systems: [-ubuntu-core-16-64-fixme]
        prepare: |
            . $TESTSLIB/prepare.sh
            if [[ "$SPREAD_SYSTEM" == ubuntu-core-16-* ]]; then
                prepare_all_snap
            else
                prepare_classic
            fi
        restore: |
            $TESTSLIB/reset.sh
            if [[ "$SPREAD_SYSTEM" != ubuntu-core-16-* ]]; then
                apt-get purge -y snapd snap-confine ubuntu-core-launcher
            fi
        restore-each: |
            $TESTSLIB/reset.sh --reuse-core

    tests/regression/:
        summary: Regression tests for snapd
        systems: [-ubuntu-core-16-64-fixme]
        prepare: |
            . $TESTSLIB/prepare.sh
            if [[ "$SPREAD_SYSTEM" == ubuntu-core-16-* ]]; then
                prepare_all_snap
            else
                prepare_classic
            fi
        restore: |
            $TESTSLIB/reset.sh
            if [[ "$SPREAD_SYSTEM" != ubuntu-core-16-* ]]; then
                apt-get purge -y snapd snap-confine ubuntu-core-launcher
            fi
        restore-each: |
            $TESTSLIB/reset.sh --reuse-core

    tests/upgrade/:
        summary: Tests for snapd upgrade
        systems: [-ubuntu-core-16-64-fixme]
        restore:
            apt-get purge -y snapd snap-confine ubuntu-core-launcher
        restore-each: |
            $TESTSLIB/reset.sh
