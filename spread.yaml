project: snapd

environment:
    GOPATH: /home/gopath
    REUSE_PROJECT: "$(HOST: echo $REUSE_PROJECT)"
    PROJECT_PATH: $GOPATH/src/github.com/snapcore/snapd
    PATH: $GOPATH/bin:/snap/bin:$PATH
    TESTSLIB: $PROJECT_PATH/tests/lib
    SNAP_REEXEC: 0
    SPREAD_STORE_USER: "$(HOST: echo $SPREAD_STORE_USER)"
    SPREAD_STORE_PASSWORD: "$(HOST: echo $SPREAD_STORE_PASSWORD)"
    LANG: "$(echo ${LANG:-C.UTF-8})"
    LANGUAGE: "$(echo ${LANGUAGE:-en})"
    # important to ensure adhoc and linode/qemu behave the same
    SUDO_USER: ""
    SUDO_UID: ""
    TRUST_TEST_KEYS: "true"
    MANAGED_DEVICE: "false"
    CORE_CHANNEL: "$(HOST: echo ${SPREAD_CORE_CHANNEL:-edge})"
    DELTA_REF: 2.17
    DELTA_PREFIX: snapd-$DELTA_REF/

backends:
    linode:
        key: "$(HOST: echo $SPREAD_LINODE_KEY)"
        halt-timeout: 2h
        systems:
            - ubuntu-16.04-64:
                kernel: GRUB 2
                workers: 2
            - ubuntu-16.04-32:
                kernel: GRUB 2
                workers: 2
            - ubuntu-core-16-64:
                kernel: Direct Disk
                image: ubuntu-16.04-64
            # FIXME restore of ubuntu-core does not properly reset
            # boot variables and key snaps to their pristine state.
            - ubuntu-core-16-64-fixme:
                kernel: Direct Disk
                image: ubuntu-16.04-64
    qemu:
        systems:
            - ubuntu-16.04-64:
                username: ubuntu
                password: ubuntu
            - ubuntu-core-16-64:
                image: ubuntu-16.04-64
                username: ubuntu
                password: ubuntu
            - ubuntu-16.10-64:
                username: ubuntu
                password: ubuntu
    autopkgtest:
        type: adhoc
        allocate: |
            echo "Allocating ad-hoc $SPREAD_SYSTEM"
            if [ -z "${ADT_ARTIFACTS}" ]; then
                FATAL "adhoc only works inside autopkgtest"
                exit 1
            fi
            echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/99-spread-users
            ADDRESS localhost:22
        discard: |
            echo "Discarding ad-hoc $SPREAD_SYSTEM"
        systems:
            - ubuntu-16.04-64:
                username: ubuntu
                password: ubuntu

    external:
        type: adhoc
        environment:
            SPREAD_EXTERNAL_ADDRESS: "$(HOST: echo ${SPREAD_EXTERNAL_ADDRESS:-localhost:8022})"
            MANAGED_DEVICE: "true"
        allocate: |
            ADDRESS $SPREAD_EXTERNAL_ADDRESS
        systems:
            - ubuntu-core-16-64:
                environment:
                    TRUST_TEST_KEYS: "false"
                username: test
                password: ubuntu
            - ubuntu-core-16-arm-64:
                username: test
                password: ubuntu
            - ubuntu-core-16-arm-32:
                username: test
                password: ubuntu

path: /home/gopath/src/github.com/snapcore/snapd

exclude:
    - .git
    - cmd/snap/snap
    - cmd/snapd/snapd
    - cmd/snapctl/snapctl
    - cmd/snap-exec/snap-exec

prepare-each: |
    journalctl --rotate
    sleep .1
    journalctl --vacuum-time=1ms
    dmesg -c > /dev/null

debug-each: |
    journalctl -u snapd
    dmesg | grep DENIED

rename:
    # Move content into a directory, so that deltas computed by repack benefit
    # from the content looking similar to codeload.github.com.
    - s,^,$DELTA_PREFIX,S

repack: |
    # For Linode, compute a delta based on a known git reference that can be
    # obtained directly from GitHub. There's nothing special about that reference,
    # other than it will often be in the local repository's history already.
    # The more recent the reference, the smaller the delta.
    if ! echo $SPREAD_BACKENDS | grep linode; then
        cat <&3 >&4
    elif ! git show-ref $DELTA_REF > /dev/null; then
        cat <&3 >&4
    else
        trap "rm -f delta-ref.tar current.delta" EXIT
        git archive -o delta-ref.tar --format=tar --prefix=$DELTA_PREFIX $DELTA_REF
        xdelta3 -s delta-ref.tar <&3 > current.delta
        tar c current.delta >&4
    fi

prepare: |
    # Unpack delta, or move content out of the prefixed directory (see rename and repack above).
    if [ -f current.delta ]; then
        apt-get install xdelta3
        curl -s -o - https://codeload.github.com/snapcore/snapd/tar.gz/$DELTA_REF | gunzip > delta-ref.tar
        xdelta3 -d -s delta-ref.tar current.delta | tar x --strip-components=1
        rm -f delta-ref.tar current.delta
    elif [ -d $DELTA_PREFIX ]; then
        find $DELTA_PREFIX -mindepth 1 -maxdepth 1 -exec mv {} . \;
        rmdir $DELTA_PREFIX
    fi

    # Set REUSE_PROJECT to reuse the previous prepare when also reusing the server.
    [ "$REUSE_PROJECT" != 1 ] || exit 0

    # check that we are not updating
    . "$TESTSLIB/boot.sh"
    if [ "$(bootenv snap_mode)" = "try" ]; then
        echo "Ongoing reboot upgrade process, please try again when finished"
        exit 1
    fi

    # Disable burst limit so resetting the state quickly doesn't create problems.
    mkdir -p /etc/systemd/system/snapd.service.d
    cat <<EOF > /etc/systemd/system/snapd.service.d/local.conf
    [Unit]
    StartLimitInterval=0
    [Service]
    Environment=SNAPD_DEBUG_HTTP=7 SNAP_REEXEC=0
    EOF
    mkdir -p /etc/systemd/system/snapd.socket.d
    cat <<EOF > /etc/systemd/system/snapd.socket.d/local.conf
    [Unit]
    StartLimitInterval=0
    EOF

    if [ "$SPREAD_BACKEND" = external ]; then
        # build test binaries
        if [ ! -f $GOPATH/bin/snapbuild ]; then
            mkdir -p $GOPATH/bin
            snap install --devmode --edge classic
            classic "sudo apt update && apt install -y git golang-go build-essential"
            classic "GOPATH=$GOPATH go get ../..${PROJECT_PATH}/tests/lib/snapbuild"
            snap remove classic
        fi
        # stop and disable autorefresh
        systemctl disable --now snapd.refresh.timer
        exit 0
    fi

    # apt update is hanging on security.ubuntu.com with IPv6.
    sysctl -w net.ipv6.conf.all.disable_ipv6=1
    trap "sysctl -w net.ipv6.conf.all.disable_ipv6=0" EXIT

    apt-get purge -y snapd || true
    apt-get update
    # utilities
    apt-get install -y devscripts expect gdebi-core jq rng-tools software-properties-common git

    # in 16.04: apt build-dep -y ./
    apt-get install -y $(gdebi --quiet --apt-line ./debian/control)

    # update vendoring
    go get -u github.com/kardianos/govendor
    govendor sync

    # increment version so upgrade can work
    dch -i "testing build"

    if ! id test >& /dev/null; then
        # manually setting the UID and GID to 12345 because we need to
        # know the numbers match for when we set up the user inside
        # the all-snap, which has its own user & group database.
        # Nothing special about 12345 beyond it being high enough it's
        # unlikely to ever clash with anything, and easy to remember.
        addgroup --quiet --gid 12345 test
        adduser --quiet --uid 12345 --gid 12345 --disabled-password --gecos '' test
    fi

    owner=$( stat -c "%U:%G" /home/test )
    if [ "$owner" != "test:test" ]; then
        echo "expected /home/test to be test:test but it's $owner"
        exit 1
    fi
    unset owner

    echo 'test ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
    chown test.test -R ..
    su -l -c "cd $PWD && DEB_BUILD_OPTIONS='nocheck testkeys' dpkg-buildpackage -tc -b -Zgzip" test

    # Build snapbuild.
    apt-get install -y git
    go get ./tests/lib/snapbuild

    # Build fakestore.
    go get ./tests/lib/fakestore/cmd/fakestore
    # Build fakedevicesvc.
    go get ./tests/lib/fakedevicesvc

restore: |
    if [ "$SPREAD_BACKEND" = external ]; then
        # start and enable autorefresh
        systemctl enable --now snapd.refresh.timer
    fi

suites:
    tests/main/:
        summary: Full-system tests for snapd
        systems: [-ubuntu-core-16-64-fixme]
        prepare: |
            . $TESTSLIB/prepare.sh
            if [[ "$SPREAD_SYSTEM" == ubuntu-core-16-* ]]; then
                prepare_all_snap
            else
                prepare_classic
            fi
        restore: |
            $TESTSLIB/reset.sh
            if [[ "$SPREAD_SYSTEM" != ubuntu-core-16-* ]]; then
                apt-get purge -y snapd || true
            fi
        restore-each: |
            $TESTSLIB/reset.sh --reuse-core

    tests/upgrade/:
        summary: Tests for snapd upgrade
        systems: [-ubuntu-core-16-64-fixme]
        restore:
            apt-get purge -y snapd || true
        restore-each: |
            $TESTSLIB/reset.sh

# vim:ts=4:sw=4:et
