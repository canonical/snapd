name: snapd
type: snapd
summary: Daemon and tooling that enable snap packages
description: |
  Install, configure, refresh and remove snap packages. Snaps are
  'universal' packages that work across many different Linux systems,
  enabling secure distribution of the latest apps and utilities for
  cloud, servers, desktops and the internet of things.

  Start with 'snap list' to see installed snaps.
adopt-info: snapd
# build-base is needed here for snapcraft to build this snap as with "modern"
# snapcraft
build-base: core22
package-repositories:
  - type: apt
    ppa: snappy-dev/image
grade: stable
license: GPL-3.0
confinement: strict

# Note that this snap is unusual in that it has no "apps" section.
#
# It is started via re-exec on classic systems and via special
# handling in the core18 snap on Ubuntu Core Systems.
#
# Because snapd itself manages snaps it must currently run totally
# unconfined (even devmode is not enough).
#
# See the comments from jdstrand in
# https://forum.snapcraft.io/t/5547/10

parts:
  dynamic-linker:
    plugin: nil
    build-packages:
      - gawk
      - bison
      - quilt
      - python3-pyelftools
    source: https://git.launchpad.net/ubuntu/+source/glibc
    source-branch: ubuntu/jammy-updates
    source-type: git
    <<:
      - &dynamic-linker
        build-environment:
          - to amd64:
              - DYNAMIC_LINKER: ld-linux-x86-64.so.2
          - to s390x:
              - DYNAMIC_LINKER: ld64.so.1
          - to arm64:
              - DYNAMIC_LINKER: ld-linux-aarch64.so.1
          - to armhf:
              - DYNAMIC_LINKER: ld-linux-armhf.so.3
          - to riscv64:
              - DYNAMIC_LINKER: ld-linux-riscv64-lp64d.so.1
          - to ppc64el:
              - DYNAMIC_LINKER: ld64.so.2
    override-pull: |
      craftctl default
      QUILT_PATCHES=debian/patches quilt push -a

    override-build: |
      rm -rf build
      mkdir -p build
      cd build
      unset LDFLAGS
      unset CPPFLAGS
      export CFLAGS="-pipe -O2 -g"
      cat <<EOF >configparms
      libdir=/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
      slibdir=/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
      rtldir=/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
      EOF
      "${CRAFT_PART_SRC_WORK}/configure" --prefix=/snap/snapd/current/usr
      make -j"${CRAFT_PARALLEL_BUILD_COUNT}" -C .. objdir="${PWD}" "${PWD}/linkobj/libc_pic.a"
      make elf/ldso_install DESTDIR="${CRAFT_PART_INSTALL}"
      strip "${CRAFT_PART_INSTALL}/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/${DYNAMIC_LINKER}"
      install -Dm755 -t "${CRAFT_PART_INSTALL}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}" "${CRAFT_PART_INSTALL}/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/${DYNAMIC_LINKER}"
    stage:
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ld*.so*

  runtime:
    plugin: nil
    stage-packages:
      - libbrotli1
      - libc6
      - libcap2
      - libexpat1
      - libfreetype6
      - libgcc-s1
      - liblz4-1
      - liblzma5
      - liblzo2-2
      - libpng16-16
      - libseccomp2
      - libudev1
      - libzstd1
      - squashfs-tools
      - xdelta3
      - zlib1g
      # This is needed for using os/user on Ubuntu Core
      # TODO: do not use os/user, but io.systemd.NameServiceSwitch through dbus
      - libnss-extrausers
    stage:
      - -usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ld*.so*
      - -lib32
      - -lib64
      - -usr/lib32
      - -usr/lib64
      - -etc/ld.so.conf.d
      - -usr/share/man
      - -usr/share/lintian
      - -usr/share/lintian/**
    override-build: |
      craftctl default
      mv "${CRAFT_PART_INSTALL}/usr/lib/libnss_extrausers.so.2" "${CRAFT_PART_INSTALL}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/"
      cp -rT "${CRAFT_PART_INSTALL}/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}" "${CRAFT_PART_INSTALL}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}"
      rm -rf "${CRAFT_PART_INSTALL}/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}"
      rm -f "${CRAFT_PART_INSTALL}/lib/${DYNAMIC_LINKER}"
      find "${CRAFT_PART_INSTALL}/usr/share/doc" \( -not -type d -not -name "copyright" -delete \) -o \( -type d -empty -delete \)
    <<:
      - *dynamic-linker
    override-prime: |
      craftctl default
      python3 "${CRAFT_PROJECT_DIR}/build-aux/snap/local/patch-dl.py" "/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/${DYNAMIC_LINKER}"

  apparmor:
    plugin: autotools
    build-packages:
      - autoconf-archive
      - bison
      - flex
      - gettext
      - g++
      - pkg-config
      - wget
    source: https://gitlab.com/apparmor/apparmor/-/archive/v4.0.2/apparmor-v4.0.2.tar.gz
    source-checksum: sha256/0b847751b8c0e2344169ec2065cad6251063c5c5ff311953e194bbf25686d981
    override-build: |
      # For some reason, some snapcraft version remove the "build-aux" folder
      # and move the contents up when the data is uploaded; this conditional
      # manages it.
      LOCAL_APPARMOR_DIR="${CRAFT_PROJECT_DIR}"/build-aux/snap/local/apparmor/
      if [ ! -d $LOCAL_APPARMOR_DIR ]; then
        LOCAL_APPARMOR_DIR="${CRAFT_PROJECT_DIR}"/snap/local/apparmor/
      fi
      # apply prompting patch from the build-aux folder - this is the same as
      # what is used in the Ubuntu 24.10 (oracular) version
      patch -p1 < "${LOCAL_APPARMOR_DIR}"/parser-add-support-for-prompting.patch
      # apply compatibility fix for older kernels
      patch -p1 < "${LOCAL_APPARMOR_DIR}"/apparmor-parser-fix-protocol-error-on-older-kernels-caused-by.patch

      cd "${CRAFT_PART_BUILD}"/libraries/libapparmor
      ./autogen.sh
      ./configure --prefix=/usr --libdir="/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}" --disable-man-pages --disable-perl --disable-python --disable-ruby
      make -j"${CRAFT_PARALLEL_BUILD_COUNT}"
      make -C src install DESTDIR="${CRAFT_PART_INSTALL}"
      make -C include install DESTDIR="${CRAFT_PART_INSTALL}"
      cd ${CRAFT_PART_BUILD}/parser
      # copy in a pregenerated list of network address families so that the
      # parser gets built to support as many as possible even if glibc in
      # the current build environment does not support them
      cp "${LOCAL_APPARMOR_DIR}"/af_names.h .
      make -j"${CRAFT_PARALLEL_BUILD_COUNT}"
      install -Dm755 -t "${CRAFT_PART_INSTALL}/usr/lib/snapd" apparmor_parser
      install -Dm644 -t "${CRAFT_PART_INSTALL}/usr/lib/snapd/apparmor" parser.conf
      cd "${CRAFT_PART_BUILD}/profiles"
      make -j"${CRAFT_PARALLEL_BUILD_COUNT}"
      mkdir -p "${CRAFT_PART_INSTALL}/usr/lib/snapd/apparmor.d"
      cp -a apparmor.d/abi "${CRAFT_PART_INSTALL}/usr/lib/snapd/apparmor.d"
      cp -a apparmor.d/abstractions "${CRAFT_PART_INSTALL}/usr/lib/snapd/apparmor.d"
      cp -a apparmor.d/tunables "${CRAFT_PART_INSTALL}/usr/lib/snapd/apparmor.d"
    prime:
      # We are statically linked
      - -usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/**
      - -usr/include
    <<:
      - *dynamic-linker
    override-prime: |
      craftctl default
      python3 "${CRAFT_PROJECT_DIR}/build-aux/snap/local/patch-dl.py" "/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/${DYNAMIC_LINKER}"

  snapd:
    plugin: nil
    source: .
    build-snaps:
      - go/1.18/stable # the default Go toolchain
    after:
      - apparmor
    build-packages:
      - git
      - dpkg-dev
      - autoconf
      - autoconf-archive
      - automake
      - xfslibs-dev
      - libudev-dev
      - libcap-dev
      - libseccomp-dev
      - pkg-config
    override-pull: |
      craftctl default
      # set version, this needs dpkg-parsechangelog (from dpkg-dev) and git
      VERSION="$(./mkversion.sh --output-only)"
      if [ -f fips-build ] ; then
          echo "-- appending FIPS tag to version $VERSION"
          VERSION="$VERSION-fips"
      fi
      if [ -f test-build ]; then
          VERSION="1337.${VERSION}"
      fi
      craftctl set version="$VERSION"

      ./get-deps.sh --skip-unused-check
    override-build: |
      # this should be passed through build environment, but we're already
      # anchoring dynamic linker env variables
      GO_TOOLCHAIN_FIPS_CHANNEL="1.18-fips/stable"

      VERSION="$(craftctl get version)"
      if [ -f fips-build ] ; then
          # use the fips channel of Go
          snap refresh --channel "$GO_TOOLCHAIN_FIPS_CHANNEL" go
      fi
      # make sure to set the version we declared in pull
      ./mkversion.sh "$VERSION"

      # double check the toolchain
      echo "--- go version $(go version)"
      echo "--- go is at $(which go)"

      cd "${CRAFT_PART_BUILD}/cmd"

      autoreconf -fvi
      ./configure \
        --prefix=/usr \
        --libexec=/usr/lib/snapd \
        --without-unit-tests \
        --enable-static-libapparmor \
        --disable-host-binaries \
        --enable-nvidia-multiarch \
        --with-host-arch-triplet=$(dpkg-architecture -qDEB_HOST_MULTIARCH) \
        $(test "$(uname -m)" = x86_64 && echo --with-host-arch-32bit-triplet=$(dpkg-architecture -ai386 -qDEB_HOST_MULTIARCH))

      make -j"${CRAFT_PARALLEL_BUILD_COUNT}"
      make DESTDIR="${CRAFT_PART_INSTALL}" install

      cd "${CRAFT_PART_BUILD}"

      # Disable buildvcs:
      #  * We do not use it
      #  * When building in a git worktree, snapcraft does not share
      #    the main directory, and it fails.
      EXTRA_GO_FLAGS="-buildvcs=false"

      CMDS=(bin/snap
            lib/snapd/snapd
            # core-initrd for UC20 still depends on snap-bootstrap
            # being started from snap because of broken re-execution
            # and fixes that were not yet backported
            lib/snapd/snap-bootstrap
            lib/snapd/snap-exec
            lib/snapd/snap-failure
            lib/snapd/snap-fde-keymgr
            lib/snapd/snap-preseed
            lib/snapd/snap-recovery-chooser
            lib/snapd/snap-repair
            lib/snapd/snap-seccomp
            lib/snapd/snap-update-ns
            lib/snapd/snapctl
            lib/snapd/snapd-apparmor)
      for cmd in "${CMDS[@]}"; do
        case "${cmd}" in
           # FIXME: some binaries need to be run confined in apps. But
           # instead we should allow apps to access dynamic linkers
           # and libraries from snapd.
           lib/snapd/snap-exec|lib/snapd/snapctl)
             export CGO_ENABLED=0
             GO_LD_FLAGS=()
             CHECK_STATIC=1
             ;;
           lib/snapd/snap-update-ns)
             export CGO_ENABLED=1
             GO_LD_FLAGS=(-ldflags '-extldflags "-static"')
             CHECK_STATIC=1
             ;;
           *)
             export CGO_ENABLED=1
             case "${CRAFT_ARCH_BUILD_FOR}" in
               armhf)
                 # https://bugs.launchpad.net/ubuntu/+source/snapd/+bug/1822738
                 BUILDMODE=()
                 ;;
               *)
                 BUILDMODE=(-buildmode=pie)
                 ;;
             esac
             GO_LD_FLAGS=("${BUILDMODE[@]}")
             unset CHECK_STATIC
             ;;
        esac

        TAGS=()

        # general build tags, note that version 1337 is used only in CI and
        # triggers testing specific build tags which produce binaries that are
        # insecure for use in production systems
        case "${cmd}" in
          bin/snap)
            TAGS+=(nomanagers)
            case "${VERSION}" in
              1337.*)
                TAGS+=(withtestkeys faultinject)
                ;;
            esac
            ;;
          *)
            case "${VERSION}" in
              1337.*)
                TAGS+=(withtestkeys withbootassetstesting faultinject)
                ;;
            esac
            ;;
        esac

        # FIPS specific build tags
        if [ -f fips-build ]; then
          case "${cmd}" in
            # per snapd FIPS spec, FIPS build tags are only relevant for snapd,
            # snap, snap-repair and snap-bootstrap
            bin/snap|lib/snapd/snapd|lib/snapd/snap-repair|lib/snapd/snap-bootstrap)
              TAGS+=(goexperiment.opensslcrypto)
              ;;
          esac
        fi

        output="${CRAFT_PART_INSTALL}/usr/${cmd}"
        go build -mod=vendor -tags "${TAGS[*]}" "${GO_LD_FLAGS[@]}" ${EXTRA_GO_FLAGS-} -o "${output}" "github.com/snapcore/snapd/cmd/$(basename ${cmd})"
        if [ "${CHECK_STATIC-}" = 1 ]; then
          if objdump -p "${output}" | grep INTERP; then
            echo "${output} is not static!" 1>&2
            exit 1
          fi
        fi
        unset CGO_ENABLED
      done

      make -C data -j"${CRAFT_PARALLEL_BUILD_COUNT}" all
      # wrappers/core18.go expects units in fixed paths so even when
      # systemd package will those, they have to continue to match our
      # paths. We force the value here in case we change the default.
      make -C data install DESTDIR="${CRAFT_PART_INSTALL}" SYSTEMDUSERUNITDIR=/usr/lib/systemd/user SYSTEMDSYSTEMUNITDIR=/lib/systemd/system
      # UC depends on this name (symlink)
      mv "${CRAFT_PART_INSTALL}/etc/profile.d/snapd.sh" "${CRAFT_PART_INSTALL}/etc/profile.d/apps-bin-path.sh"

      install -Dm644 data/info "${CRAFT_PART_INSTALL}/usr/lib/snapd/info"
      install -Dm644 data/preseed.json "${CRAFT_PART_INSTALL}/usr/lib/snapd/preseed.json"

      install -Dm644 -t "${CRAFT_PART_INSTALL}/usr/lib/snapd" data/completion/bash/complete.sh data/completion/bash/etelpmoc.sh
      install -Dm644 -t "${CRAFT_PART_INSTALL}/usr/share/bash-completion/completions" ./data/completion/bash/snap

      # TODO: For now snapd expects a renamed apparmor profile to
      # work-around LP#1673247. We should fix that since the snapd
      # should not need that work-around.
      mv "${CRAFT_PART_INSTALL}/etc/apparmor.d/usr.lib.snapd.snap-confine" "${CRAFT_PART_INSTALL}/etc/apparmor.d/usr.lib.snapd.snap-confine.real"

      # copy helper for collecting debug output
      cp -av debug-tools/snap-debug-info.sh ${CRAFT_PART_INSTALL}/usr/lib/snapd/

      if sh -x ./mkversion.sh --output-only | grep "dirty"; then
        mkdir -p "${CRAFT_PART_INSTALL}/usr/lib/snapd"
        (
          echo "dirty git tree during build detected:"
          git status
          git diff
        ) > "${CRAFT_PART_INSTALL}/usr/lib/snapd/dirty-git-tree-info.txt"
      fi

      find "${CRAFT_PART_INSTALL}/usr/lib/snapd" "${CRAFT_PART_INSTALL}/usr/bin" -type f -exec strip {} ";"
    <<:
      - *dynamic-linker
    override-prime: |
      craftctl default
      python3 "${CRAFT_PROJECT_DIR}/build-aux/snap/local/patch-dl.py" "/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/${DYNAMIC_LINKER}"

  libcrypto-fips:
    plugin: nil
    source: .
    after:
      - snapd
    override-pull: |
      craftctl default
      if [ -f fips-build ]; then
        # grab the core22 from fips-updates channel
        snap download --channel fips-updates/stable --basename core22-fips core22
      fi
    override-build: |
      # TODO this is really a hack as we should likely be using on LP; The snapd
      # snap should include the information about a particular openssl version
      # which was included in the build but the core22 FIPS variant snap has
      # been stripped off of the manifest.
      if [ -f fips-build ]; then
        unsquashfs -d core22-fips-squashfs-root core22-fips.snap \
          'usr/lib/*-linux-gnu*/engines-3' \
          'usr/lib/*-linux-gnu*/ossl-modules-3' \
          'usr/lib/*-linux-gnu*/libssl.so.3' \
          'usr/lib/*-linux-gnu*/libcrypto.so.3'
        cp -av core22-fips-squashfs-root/* "${CRAFT_PART_INSTALL}"
      fi

  check-linker:
    plugin: nil
    build-packages:
      - patchelf
    after:
      # Must run after everything else
      - snapd
      - runtime
      - apparmor
      - dynamic-linker
    <<:
      - *dynamic-linker
    override-prime: |
      python3 "${CRAFT_PROJECT_DIR}/build-aux/snap/local/verify-dl.py" "${CRAFT_PRIME}" "/snap/snapd/current/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/${DYNAMIC_LINKER}" ";"
