name: snapd
type: snapd
summary: Daemon and tooling that enable snap packages
description: |
  Install, configure, refresh and remove snap packages. Snaps are
  'universal' packages that work across many different Linux systems,
  enabling secure distribution of the latest apps and utilities for
  cloud, servers, desktops and the internet of things.

  Start with 'snap list' to see installed snaps.
adopt-info: snapd
# build-base is needed here for snapcraft to build this snap as with "modern"
# snapcraft
build-base: core22
package-repositories:
  - type: apt
    ppa: snappy-dev/image
grade: stable
license: GPL-3.0
confinement: classic
architectures:
 - build-on: amd64
   build-for: i386
 - build-on: amd64
   build-for: amd64
 - build-on: arm64
   build-for: arm64
 - build-on: armhf
   build-for: armhf
 - build-on: ppc64el
   build-for: ppc64el
 - build-on: riscv64
   build-for: riscv64
 - build-on: s390x
   build-for: s390x

# Note that this snap is unusual in that it has no "apps" section.
#
# It is started via re-exec on classic systems and via special
# handling in the core18 snap on Ubuntu Core Systems.
#
# Because snapd itself manages snaps it must currently run totally
# unconfined (even devmode is not enough).
#
# See the comments from jdstrand in
# https://forum.snapcraft.io/t/5547/10
parts:
  build-base:
    plugin: nil
    source: keyrings
    build-packages:
      - to i386:
        - debootstrap
        - fakeroot
      - else:
        - wget
      - gawk
    build-environment:
      - RELEASE: "22.04.2"
      - BASE: ubuntu-base-${RELEASE}-base-${CRAFT_TARGET_ARCH}.tar.gz
      - DIR_URL: https://cdimage.ubuntu.com/ubuntu-base/releases/${RELEASE}/release
      - URL: ${DIR_URL}/${BASE}
      - SHA256: ${DIR_URL}/SHA256SUMS
      - SIG: ${SHA256}.gpg
      - DEPENDENCIES: >-
          make
          gcc
          binutils
          gawk
          python3
          python3-jinja2
          meson
          bison
          flex
          ninja-build
          libc6-dev
          gperf
          autoconf
          automake
          gettext
          libtool
          pkg-config
          libglib2.0-dev
          g++
          autopoint
          git
    override-pull: |
      craftctl default
      case "${CRAFT_TARGET_ARCH}" in
        i386)
        ;;
        *)
          wget "${SHA256}" "${SIG}" "${URL}"
          gpg --no-default-keyring \
              --keyring ./cd-image-keying.gpg \
              --verify SHA256SUMS.gpg SHA256SUMS
          awk -v "file=${BASE}" '$2=="*"file' SHA256SUMS | sha256sum -c
        ;;
      esac
    override-build: |
      rm -rf "${CRAFT_PART_INSTALL}/build-base"
      mkdir -p "${CRAFT_PART_INSTALL}/build-base"
      case "${CRAFT_TARGET_ARCH}" in
        i386)
          fakeroot debootstrap --arch=i386 --include "$(echo ${DEPENDENCIES} | sed 's/ /,/g')" bullseye "${CRAFT_PART_INSTALL}/build-base"
          ;;
        *)
          tar -x --xattrs-include=* -f "${BASE}" -C "${CRAFT_PART_INSTALL}/build-base"
          mkdir -p "${CRAFT_PART_INSTALL}/build-base/snap/snapd/current"
          "${CRAFT_PROJECT_DIR}/build-aux/snap/local/mount-ns.sh" spawn "${CRAFT_PART_INSTALL}/build-base" -- bash <<EOF
      set -eu
      apt update
      DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ${DEPENDENCIES}
      EOF
        ;;
      esac
    override-stage: |
      # Default stage patches files
      rm -rf "${CRAFT_STAGE}/build-base"
      cp -raT "${CRAFT_PART_INSTALL}/build-base" "${CRAFT_STAGE}/build-base"
    override-prime: |
      # Do nothing

  linux-headers:
    after:
     - build-base
    plugin: nil
    build-packages:
      - rsync
    source-type: git
    source:  https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/jammy
    source-branch: master
    source-depth: 1
    override-build: |
      make INSTALL_HDR_PATH="${CRAFT_PART_INSTALL}" headers_install
    override-stage: |
      mkdir -p "${CRAFT_STAGE}/build-base/snap/snapd/current"
      cp -raT "${CRAFT_PART_INSTALL}" "${CRAFT_STAGE}/build-base/snap/snapd/current"
    override-prime: |
      # Do nothing

  glibc:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - linux-headers
      - build-base
    build-packages:
      - attr
      - quilt
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/glibc
    source-branch: ubuntu/jammy-updates
    <<:
      - &common-env
        build-environment:
          - to i386:
              - SETARCH: setarch i686
              - DYNAMIC_LINKER: ld-linux.so.2
          - to amd64:
              - DYNAMIC_LINKER: ld-linux-x86-64.so.2
          - to s390x:
              - DYNAMIC_LINKER: ld64.so.1
          - to arm64:
              - DYNAMIC_LINKER: ld-linux-aarch64.so.1
          - to armhf:
              - DYNAMIC_LINKER: ld-linux-armhf.so.3
          - to riscv64:
              - DYNAMIC_LINKER: ld-linux-riscv64-lp64d.so.1
          - to ppc64el:
              - DYNAMIC_LINKER: ld64.so.2
          - PKG_CONFIG_PATH: /snap/snapd/current/lib/pkgconfig:/snap/snapd/current/share/pkgconfig
          - IN_BUILD_BASE: '"${CRAFT_PROJECT_DIR}/build-aux/snap/local/mount-ns.sh" spawn "${CRAFT_STAGE}/build-base"  --bind . /build -- ${SETARCH-} bash'
          - DEB_CFLAGS: $(DEB_HOST_ARCH=${SNAPCRAFT_TARGET_ARCH} dpkg-buildflags --get CFLAGS)
          - DEB_CPPFLAGS: $(DEB_HOST_ARCH=${SNAPCRAFT_TARGET_ARCH} dpkg-buildflags --get CPPFLAGS)
          - DEB_LDFLAGS: $(DEB_HOST_ARCH=${SNAPCRAFT_TARGET_ARCH} dpkg-buildflags --get LDFLAGS)
          - CFLAGS: -isystem /snap/snapd/current/include ${DEB_CFLAGS}
          - CPPFLAGS: -isystem /snap/snapd/current/include ${DEB_CPPFLAGS}
          - LDFLAGS: -Wl,-I/snap/snapd/current/lib/${DYNAMIC_LINKER} -L/snap/snapd/current/lib -B/snap/snapd/current/lib/ ${DEB_LDFLAGS}
      - &common-pull
        override-pull: |
            "${CRAFT_PROJECT_DIR}/build-aux/snap/local/get.sh"
      - &common-stage
        override-stage: |
            craftctl default
            mkdir -p "${CRAFT_STAGE}/build-base/snap/snapd/current"
            cp -raT "${CRAFT_PART_INSTALL}" "${CRAFT_STAGE}/build-base/snap/snapd/current"
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      mkdir build
      cd build
      ../configure --prefix=/snap/snapd/current --with-headers="/snap/snapd/current/include" --without-selinux CFLAGS="-g -O2" CPPFLAGS="" LDFLAGS=""
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libc6 "${CRAFT_PART_INSTALL}"/lib/libc.so.* "${CRAFT_PART_INSTALL}"/lib/libm.so.* "${CRAFT_PART_INSTALL}"/lib/ld*.so.*
    stage:
      - lib/libc.so.*
      - lib/libm.so.*
      - lib/ld*.so.*

  libcap:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/libcap2
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      make -j$(nproc) prefix="/snap/snapd/current" DYNAMIC=yes GOLANG=no lib=lib
      make -j1 DESTDIR="/build/tmp-inst" install GOLANG=no prefix="/snap/snapd/current" lib=lib
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libcap2 "${CRAFT_PART_INSTALL}"/lib/libcap.so.*
    stage:
      - lib/libcap.so.*

  libinih:
    plugin: nil
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/libinih
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      meson setup build --buildtype=debugoptimized --prefix=/snap/snapd/current -Dwith_INIReader=false --libdir=lib
      cd build
      ninja
      DESTDIR="/build/tmp-inst" meson install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
    stage:
      - lib/lib*.so.*
    override-prime: |
      # We actually do not need those at runtime

  util-linux:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/util-linux
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      ./configure --prefix=/snap/snapd/current
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libuuid1 "${CRAFT_PART_INSTALL}"/lib/libuuid.so.*
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libblkid1 "${CRAFT_PART_INSTALL}"/lib/libblkid.so.*
    stage:
      - lib/libuuid.so.*
      - lib/libblkid.so.*
    override-prime: |
      # We actually do not need those at runtime

  openssl:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/openssl
    source-branch: applied/ubuntu/jammy-updates
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      case "${CRAFT_TARGET_ARCH}" in
        armhf)
          OPENSSL_TARGET=linux-armv4
          ;;
      esac
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      ./Configure ${OPENSSL_TARGET-} --prefix=/snap/snapd/current --libdir=lib shared threads
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libssl3 "${CRAFT_PART_INSTALL}"/lib/lib*.so.*
    stage:
      - lib/lib*.so.*
    override-prime: |
      # We actually do not need those at runtime

  xfsprogs:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
      - libinih
      - util-linux
      - systemd
    source-type: git
    source: https://git.launchpad.net/ubuntu/+source/xfsprogs
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      cp install-sh install-sh.bak
      AUTOHEADER=/bin/true autoreconf -fvi
      mv install-sh.bak install-sh
      ./configure --prefix=/snap/snapd/current
      make -j$(nproc) V=1 default
      make -j1 DESTDIR="/build/tmp-inst" install install-dev
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" xfsprogs "${CRAFT_PART_INSTALL}"/lib/lib*.so.*
    stage:
      - lib/lib*.so.*
    override-prime: |
      # We actually do not need those at runtime

  libseccomp:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/libseccomp
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      ./configure --prefix=/snap/snapd/current
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libseccomp2 "${CRAFT_PART_INSTALL}"/lib/libseccomp.so.*
    stage:
      - lib/libseccomp.so.*

  apparmor:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    # FIXME: What was the reason for using this version?
    # Can we just use ubuntu source instead?
    source: https://launchpad.net/apparmor/3.0/3.0.7/+download/apparmor-3.0.7.tar.gz
    #source-type: git
    #source:  https://git.launchpad.net/ubuntu/+source/apparmor
    #source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      #- *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build/libraries/libapparmor
      autoreconf -fvi
      ./configure --prefix=/snap/snapd/current
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      # FIXME: enable if we use launchpad source
      #"${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libapparmor1 "${CRAFT_PART_INSTALL}"/lib/libapparmor.so.*
    stage:
      - lib/libapparmor.so.*

  systemd:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
      - libcap
    source-type: git
    source: https://git.launchpad.net/ubuntu/+source/systemd
    source-branch: applied/ubuntu/jammy-updates
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      meson setup build --buildtype=debugoptimized --prefix=/snap/snapd/current -Drootprefix=/snap/snapd/current -Dsplit-usr=false --libdir=lib
      cd build
      ninja
      DESTDIR="/build/tmp-inst" meson install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libudev1 "${CRAFT_PART_INSTALL}"/lib/libudev.so.*
    stage:
      - lib/libudev.so.*

  go:
    after:
    - build-base
    build-packages:
      - curl
      - golang
    plugin: nil
    build-environment:
    - GOOS: linux
    - GOROOT_FINAL: /usr/local/go
    - to i386:
        - GOARCH: 386
    - to amd64:
        - GOARCH: amd64
    - to arm64:
        - GOARCH: arm64
    - to armhf:
        - GOARCH: arm
    - to riscv64:
        - GOARCH: riscv64
    - to ppc64el:
        - GOARCH: ppc64le
    - to s390x:
        - GOARCH: s390x
    source: https://go.dev/dl/go1.18.10.src.tar.gz
    source-type: tar
    source-checksum: sha256/9cedcca58845df0c9474ae00274c44a95c9dfaefb132fc59921c28c7c106f8e6
    override-build: |
      # Work around bootstrap.bash building outside of the build directory
      rm -rf "${CRAFT_PART_BUILD}/../go-${GOOS}-${GOARCH}-bootstrap"
      cd src
      bash bootstrap.bash
      mkdir -p "${CRAFT_PART_INSTALL}/build-base/usr/local/go"
      cp -raT "${CRAFT_PART_BUILD}/../go-${GOOS}-${GOARCH}-bootstrap" "${CRAFT_PART_INSTALL}/build-base/usr/local/go"
    override-prime: |
      # We actually do not need those at runtime

  snapd:
    plugin: nil
    source: .
    # these packages are needed to call mkversion.sh in override-pull, all other
    # dependencies are installed using apt-get build-dep
    build-packages:
      - git
      - dpkg-dev
      - golang
    after:
      - go
      - apparmor
      - glibc
      - libcap
      - libseccomp
      - xfsprogs
      - systemd
    override-pull: |
      craftctl default
      # set version, this needs dpkg-parsechangelog (from dpkg-dev) and git
      craftctl set version="$(./mkversion.sh --output-only)"
      ./get-deps.sh --skip-unused-check
    <<: *common-env
    override-build: |
      ./mkversion.sh
      ${IN_BUILD_BASE} <<EOF
      set -eu
      set -x
      export PATH="/usr/local/go/bin:\${PATH}"
      objdump -s -j.interp /usr/local/go/bin/go || true
      ldd /usr/local/go/bin/go || true
      command -v go || true
      go version || true
      cd /build/cmd
      autoreconf -fvi
      ./configure --prefix=/snap/snapd/current/usr --libexec=/snap/snapd/current/lib/snapd --without-unit-tests
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install

      cd /build
      # Work-around for snapcraft not working with git worktrees
      # We detect it with .git being a file rather than a directory
      if [ -f .git ]; then
        EXTRA_GO_FLAGS="-buildvcs=false"
      fi

      export CGO_CFLAGS="-I/snap/snapd/current/include"
      export CGO_LDFLAGS="-Xlinker -I/snap/snapd/current/lib/${DYNAMIC_LINKER} -L/snap/snapd/current/lib -B/snap/snapd/current/lib/"
      CMDS=(bin/snap
            lib/snapd/snapd
            lib/snapd/snap-failure
            lib/snapd/snap-seccomp
            lib/snapd/snap-update-ns
            lib/snapd/snap-exec
            lib/snapd/snapd-apparmor
            lib/snapd/snapctl)
      for cmd in "\${CMDS[@]}"; do
        go build -mod=vendor \${EXTRA_GO_FLAGS-} -o "/build/tmp-inst/snap/snapd/current/usr/\${cmd}" "github.com/snapcore/snapd/cmd/\$(basename \${cmd})"
      done

      make -C data -j$(nproc) all
      make -C data install DESTDIR=/build/tmp-inst/snap/snapd/current SYSTEMDSYSTEMUNITDIR="lib/systemd/system/"
      EOF

      cp -raT "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      install -Dm644 "${CRAFT_PART_BUILD}/tmp-inst/etc/apparmor.d/snap.snapd.current.lib.snapd.snap-confine" "${CRAFT_PART_INSTALL}/etc/apparmor.d/usr.lib.snapd.snap-confine.real"

      install -Dm644 data/info "${CRAFT_PART_INSTALL}/usr/lib/snapd/info"
      install -Dm644 data/preseed.json "${CRAFT_PART_INSTALL}/usr/lib/snapd/preseed.json"

      if sh -x ./mkversion.sh --output-only | grep "dirty"; then
        mkdir -p "${CRAFT_PART_INSTALL}/lib/snapd"
        (
          echo "dirty git tree during build detected:"
          git status
          git diff
        ) > "${CRAFT_PART_INSTALL}/lib/snapd/dirty-git-tree-info.txt"
      fi

  # xdelta is used to enable delta downloads (even if the host does not have it)
  xdelta3:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/xdelta3
    source-branch: applied/ubuntu/jammy
    <<: *common-env
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      autoreconf -fvi
      ./configure --prefix=/snap/snapd/current
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" xdelta3 "${CRAFT_PART_INSTALL}"/bin/*
    stage:
      - bin/*

  zlib:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/zlib
    source-branch: applied/ubuntu/jammy-updates
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      ./configure --prefix=/snap/snapd/current
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" zlib1g "${CRAFT_PART_INSTALL}"/lib/lib*.so.*
    stage:
      - lib/lib*.so.*

  xz-utils:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/xz-utils
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      autoreconf -fvi
      ./configure --prefix=/snap/snapd/current
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" liblzma5 "${CRAFT_PART_INSTALL}"/lib/lib*.so.*
    stage:
      - lib/lib*.so.*

  lz4:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/lz4
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      make -j$(nproc) CFLAGS="\${CFLAGS}" LDFLAGS="\${LDFLAGS}"
      make -j1 DESTDIR="/build/tmp-inst" PREFIX=/snap/snapd/current install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" liblz4-1 "${CRAFT_PART_INSTALL}"/lib/lib*.so.*
    stage:
      - lib/lib*.so.*

  libzstd:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/libzstd
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      make V=1 -C lib -j$(nproc) CFLAGS="\${CFLAGS} -fPIC" LDFLAGS="\${LDFLAGS} -shared -fvisibility=hidden" libzstd
      make V=1 -C lib -j1 DESTDIR="/build/tmp-inst" PREFIX=/snap/snapd/current install-shared install-includes install-pc
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" libzstd1 "${CRAFT_PART_INSTALL}"/lib/lib*.so.*
    stage:
      - lib/lib*.so.*

  lzo2:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/lzo2
    source-branch: applied/ubuntu/jammy
    <<:
      - *common-env
      - *common-pull
      - *common-stage
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build
      autoreconf -fvi
      ./configure --prefix=/snap/snapd/current --enable-shared
      make -j$(nproc)
      make -j1 DESTDIR="/build/tmp-inst" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" liblzo2-2 "${CRAFT_PART_INSTALL}"/lib/lib*.so.*
    stage:
      - lib/lib*.so.*

  # squashfs-tools are used by `snap pack`
  squashfs-tools:
    plugin: nil
    stage-packages:
      # This is to trigger manifest generation. Files will not end up in snap
      - base-files
    after:
      - glibc
      - zlib
      - xz-utils
      - lz4
      - libzstd
      - lzo2
    source-type: git
    source:  https://git.launchpad.net/ubuntu/+source/squashfs-tools
    source-branch: applied/ubuntu/jammy
    <<: *common-env
    override-build: |
      ${IN_BUILD_BASE} <<EOF
      set -eu
      cd /build/squashfs-tools
      make -j$(nproc) EXTRA_CFLAGS="\${CFLAGS}" EXTRA_LDFLAGS="\${LDFLAGS}" LZMA_XZ_SUPPORT=1 XZ_SUPPORT=1 LZO_SUPPORT=1 LZ4_SUPPORT=1 ZSTD_SUPPORT=1 XATTR_SUPPORT=1 GZIP_SUPPORT=1
      make -j1 INSTALL_DIR="/build/tmp-inst/snap/snapd/current/bin" install
      EOF
      rm -rf "${CRAFT_PART_INSTALL}"
      mv -T "${CRAFT_PART_BUILD}/tmp-inst/snap/snapd/current" "${CRAFT_PART_INSTALL}"
      "${CRAFT_PROJECT_DIR}/build-aux/snap/local/make-origin.sh" squashfs-tools "${CRAFT_PART_INSTALL}"/bin/*
    stage:
      - bin/*
