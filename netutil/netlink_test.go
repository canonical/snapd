// -*- Mode: Go; indent-tabs-mode: t -*-

/*
 * Copyright (C) 2020 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package netutil_test

import (
	"log"
	"net"
	"os"
	"testing"

	. "gopkg.in/check.v1"

	"github.com/snapcore/snapd/netutil"
	"github.com/snapcore/snapd/testutil"
)

func Test(t *testing.T) { TestingT(t) }

// netlinkCaptureRaw are the raw bytes from the netlink interface
//
// Captured via modified netlink.go and running:
// $ ifconfig enp9s0:1 192.168.2.2 && route add default gw 192.168.2.1 && route del default  &&  ifconfig enp9s0:1 down
// Convered via "xxd --include netlink-capture.raw"
var netlinkCaptureRaw = [][]byte{
	{
		// RTM_NEWROUTE: adding RT_TABLE_LOCAL: 192.168.2.2
		0x3c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0xff, 0x02, 0xfe, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_NEWROUTE: adding RT_TABLE_LOCAL: 192.168.2.0/255
		0x3c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0xff, 0x02, 0xfd, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0xff, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_NEWROUTE: adding RT_TABLE_MAIN: 192.168.2.2
		0x3c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0xfe, 0x02, 0xfd, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xfe, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0x00, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_NEWROUTE: adding RT_TABLE_MAIN: 192.168.2.0/255
		0x3c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0xff, 0x02, 0xfd, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0x00, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_NEWROUTE: adding RT_TABLE_LOCAL: default gw 192.168.2.1
		0x34, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xfe, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x05, 0x00, 0xc0, 0xa8, 0x02, 0x01, 0x08, 0x00, 0x04, 0x00,
		0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_DELROUTE: removing RT_TABLE_LOCAL: default gw 192.168.2.1
		0x34, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xfe, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x05, 0x00, 0xc0, 0xa8, 0x02, 0x01, 0x08, 0x00, 0x04, 0x00,
		0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_DELROUTE: RT_TABLE_LOCAL: 192.168.2.0/255
		0x3c, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0xfe, 0x02, 0xfd, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xfe, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0x00, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_DELROUTE: RT_TABLE_MAIN: 192.168.2.0/255
		0x3c, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0xff, 0x02, 0xfd, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0xff, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_DELROUTE: RT_TABLE_MAIN: 192.168.2.2
		0x3c, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0xff, 0x02, 0xfd, 0x03,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0x00, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	}, {
		// RTM_DELROUTE: RT_TABLE_LOCAL: 192.168.2.2
		0x3c, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0xff, 0x02, 0xfe, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x01, 0x00, 0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x07, 0x00,
		0xc0, 0xa8, 0x02, 0x02, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
	},
}

type netlinkSuite struct {
	testutil.BaseTest
}

var _ = Suite(&netlinkSuite{})

const mockNetlinkSocketPath = "mock-netlink.socket"

func mockNetlinkSocketOpener() (int, error) {
	addr, err := net.ResolveUnixAddr("unix", mockNetlinkSocketPath)
	if err != nil {
		return -1, err
	}
	conn, err := net.DialUnix("unix", nil, addr)
	if err != nil {
		return -1, err
	}
	f, err := conn.File()
	if err != nil {
		return -1, err
	}
	mockNetlinkSocketFd := f.Fd()
	return int(mockNetlinkSocketFd), nil
}

func (ns *netlinkSuite) mockNetlinkSocket(c *C, ready chan struct{}, data [][]byte) {
	os.Remove(mockNetlinkSocketPath)
	l, err := net.Listen("unix", mockNetlinkSocketPath)
	if err != nil {
		log.Fatal(err)
	}
	ns.AddCleanup(func() { l.Close() })
	close(ready)

	conn, err := l.Accept()
	c.Assert(err, IsNil)
	for _, b := range data {
		conn.Write(b)
	}
	ns.AddCleanup(func() { conn.Close() })
}

func (ns *netlinkSuite) TestRoutesMonitorNoData(c *C) {
	ready := make(chan struct{})
	go ns.mockNetlinkSocket(c, ready, nil)
	<-ready

	restore := netutil.MockOpenNetlinkFd(mockNetlinkSocketOpener)
	defer restore()

	defaultGwAdded := func(s string) {
		c.Fatalf("unexpected call")
	}
	defaultGwRemoved := func(s string) {
		c.Fatalf("unexpected call")
	}
	m := netutil.NewRoutesMonitor(defaultGwAdded, defaultGwRemoved)
	err := m.Connect()
	c.Assert(err, IsNil)
	m.Run()
	m.Stop()

	// stop does not generate an error
	errCh := netutil.GetRoutesMonitorNetlinkErrorsChannel(m)
	err = <-errCh
	c.Assert(err, IsNil)
}

func (ns *netlinkSuite) TestRoutesMonitorSmoke(c *C) {
	ready := make(chan struct{})
	go ns.mockNetlinkSocket(c, ready, netlinkCaptureRaw)
	<-ready

	restore := netutil.MockOpenNetlinkFd(mockNetlinkSocketOpener)
	defer restore()

	ch := make(chan struct{})
	var added, removed []string
	defaultGwAdded := func(s string) {
		added = append(added, s)
		ch <- struct{}{}
	}
	defaultGwRemoved := func(s string) {
		removed = append(removed, s)
		ch <- struct{}{}
	}
	m := netutil.NewRoutesMonitor(defaultGwAdded, defaultGwRemoved)
	err := m.Connect()
	c.Assert(err, IsNil)
	m.Run()
	ns.AddCleanup(m.Stop)

	<-ch
	c.Assert(added, DeepEquals, []string{"192.168.2.1"})
	<-ch
	c.Assert(removed, DeepEquals, []string{"192.168.2.1"})
}
