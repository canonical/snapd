# This entry is injected by snap-confine. It represents the tmpfs
# created at / during construction of the mount namespace, before
# snap-update-ns is even invoked.
tmpfs / tmpfs x-snapd.origin=rootfs 0 0
# This is the result of a content interface connection, all of
# test-snapd-content at revision x1 is shared to test-snapd-content-layout at
# revision x2, to directory $SNAP/attached-content.
/snap/test-snapd-content/x1 /snap/test-snapd-content-layout/x2/attached-content none bind,ro 0 0
# This is a writable mimic created on /usr/share/secureboot, so that the
# subdirectory "potato" can be created inside. There's nothing special about
# the path. It was used as there are relatvely few elements that need to be
# re-created inside, making the behavior of the algorithm easier to follow.
tmpfs /usr/share/secureboot tmpfs x-snapd.synthetic,x-snapd.needed-by=/usr/share/secureboot/potato,mode=0755,uid=0,gid=0 0 0
# This is the only existing sub-directory of /usr/share/secureboot being
# re-created by the writable mimic. Note that the name and directory are a lie
# (or simplification) as this entry exists so that we know it needs to be
# unmounted. The real source is somewhat more complicated and cannot be
# expressed with the limited syntax of fstab mount entries.
/usr/share/secureboot/updates /usr/share/secureboot/updates none rbind,x-snapd.synthetic,x-snapd.needed-by=/usr/share/secureboot/potato,x-snapd.detach 0 0
# This is the layout entry replicating the attached content. This is the root
# of all evil, as the very popular behavior used by nearly all the snaps relies
# on an implementation detail that was never envisioned to work this way.
#
# Notice that it uses the attached-content directory as source, it has no idea
# or relation to the connected content and is happy to replicate an empty
# unconnected directory.
/snap/test-snapd-content-layout/x2/attached-content /usr/share/secureboot/potato none rbind,rw,x-snapd.origin=layout 0 0
