#!/usr/bin/python3

import subprocess
import sys
import time

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk

import dbus
import dbus.service
import dbus.mainloop.glib

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

class PromptDialog(Gtk.Dialog):
    RESPONSE_ALLOW = 22
    RESPONSE_DENY = 23
    RESPONSE_MORE_INFO = 24

    def __init__(self, app, icon, path, operation):
        super().__init__(title=f"Security notification")
        # self.set_default_size(600, 400)
        self.set_border_width(24)

        outer_hbox = Gtk.Box(spacing=6)
        img_vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        app_image = Gtk.Image.new_from_icon_name(icon, Gtk.IconSize.DIALOG)
        img_vbox.pack_start(app_image, False, False, 6)
        outer_hbox.pack_start(img_vbox, False, False, 6)
        self.get_content_area().add(outer_hbox)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        outer_hbox.pack_start(vbox, False, False, 6)

        header_label = Gtk.Label()
        header_label.set_markup(f"<b>{app} would like to access a folder</b>")
        vbox.pack_start(header_label, False, False, 6)

        details = Gtk.Label()
        details.set_markup(f"{app} would like to access {path} for {operation}.")
        vbox.pack_start(details, True, True, 6)

        self.add_button("Always allow", self.RESPONSE_ALLOW)
        self.add_button("Deny", self.RESPONSE_DENY)
        # TODO: add "more info"
        self.show_all()


AGENT_INTERFACE = "io.snapcraft.PromptAgent"
class Agent(dbus.service.Object):
    AA_PROMPT_IFACE = "io.snapcraft.AppArmorPrompt"
    AA_PROMPT_PATH = "/io/snapcraft/AppArmorPrompt"

    def __init__(self, bus, object_path, connection=None):
        super(Agent, self).__init__(bus, object_path, connection)
        self.bus = bus
        self.object_path = object_path
    def init(self):
        self._register_agent()
        bus_obj = bus.get_object("org.freedesktop.DBus", "/org/freedesktop/DBus")
        bus_obj.connect_to_signal("NameOwnerChanged", self._name_owner_changed_cb)
    def _register_agent(self):
        prompt_obj = self.bus.get_object(
            self.AA_PROMPT_IFACE, self.AA_PROMPT_PATH)
        prompt_obj.RegisterAgent(self.object_path)
    def _name_owner_changed_cb(name, old_owner, new_owner):
        if name != aa_prompt_iface:
            return
        if new_owner != "":
            self._register_agent()

    @dbus.service.method(AGENT_INTERFACE, in_signature="sa{ss}", out_signature="ba{ss}")
    def Prompt(self, path, info):
        print(f"Prompt() called with {path} {info}")
        prompt_allow = False
        extra_constraints = {}
        # XXX: spec says we get the snap/app from info
        app = info.get("label","no-label")
        icon = info.get("icon", "no-icon")
        operation = info.get("operation", "unknown operation")
        dialog = PromptDialog(app, icon, path, operation)
        res = dialog.run()
        if res == PromptDialog.RESPONSE_ALLOW:
            prompt_allow = True
        elif res == PromptDialog.RESPONSE_DENY:
            extra_constraints["always-prompt"] = "yes"
            prompt_allow = False
        else:
            print(f"unknown dialog result {res}")
        dialog.destroy()

        # TODO: implement extra_constraints 
        return prompt_allow, extra_constraints


def test_mode():
    agent = Agent(None,None)
    allow, constraints = agent.Prompt("some-path", {})
    print(allow,constraints)


# this is a workaround a the bug in 23.04 where
#   After=gnome-session-initialized.target
# is missing in the startup script.
# XXX: how about kde, xfce etc?
def wait_for_graphical_session_target():
    ret = subprocess.call(
        ["systemctl", "--user",
         "is-active", "graphical-session.target"])
    if ret != 0:
        time.sleep(5)
        subprocess.check_call(["systemctl", "--user",
                               "restart", "snapd.aa-prompt-ui.service"])

def main():
    # workaround bug wt
    wait_for_graphical_session_target()
    # create agent prompt
    # XXX: do we need the path ?
    buspath = "/io/snapcraft/PromptAgent"
    bus = dbus.SystemBus()
    agent = Agent(bus, buspath)
    agent.init()
    print(f"Agent ready on {agent._locations}")
    loop = GLib.MainLoop()
    loop.run()


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--test-mode":
        test_mode()
    else:
        main()
