// -*- Mode: Go; indent-tabs-mode: t -*-

/*
 * Copyright (C) 2016 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package kmod_test

import (
	"io/ioutil"
	"path/filepath"

	"github.com/snapcore/snapd/dirs"
	"github.com/snapcore/snapd/interfaces/backendtest"
	"github.com/snapcore/snapd/interfaces/kmod"
	"github.com/snapcore/snapd/osutil"
	"github.com/snapcore/snapd/testutil"
	. "gopkg.in/check.v1"
)

type kmodSuite struct {
	backendtest.BackendSuite
}

var _ = Suite(&kmodSuite{})

func (s *kmodSuite) SetUpTest(c *C) {
	s.Backend = &kmod.Backend{}
	s.BackendSuite.SetUpTest(c)
}

func (s *kmodSuite) TearDownTest(c *C) {
	s.BackendSuite.TearDownTest(c)
}

func (s *kmodSuite) TestModprobeCall(c *C) {
	cmd := testutil.MockCommand(c, "modprobe", "")
	defer cmd.Restore()

	err := kmod.LoadModules([][]byte{
		[]byte("module1"),
		[]byte("module2"),
	})
	c.Assert(err, IsNil)
	c.Assert(cmd.Calls(), DeepEquals, [][]string{
		{"modprobe", "--syslog", "module1"},
		{"modprobe", "--syslog", "module2"},
	})
}

func (s *kmodSuite) TestSyncModulesFile(c *C) {
	modules := [][]byte{
		[]byte("module1"),
		[]byte("module2")}
	var (
		err     error
		changed bool
	)
	snapName := "foo"
	err, changed = kmod.SyncModulesFile(modules, snapName)
	c.Assert(err, IsNil)
	c.Assert(changed, Equals, true)

	path := filepath.Join(dirs.SnapKModModulesDir, "snap.foo.conf")
	modfile, err := ioutil.ReadFile(path)
	c.Assert(err, IsNil)
	c.Assert(string(modfile), Equals, "# This file is automatically generated.\nmodule1\nmodule2\n")

	// no modules present, the file should be removed
	err, changed = kmod.SyncModulesFile([][]byte{}, snapName)
	c.Assert(err, IsNil)
	c.Assert(changed, Equals, false)
	c.Assert(osutil.FileExists(path), Equals, false)
}
