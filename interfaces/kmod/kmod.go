// -*- Mode: Go; indent-tabs-mode: t -*-

/*
 * Copyright (C) 2016 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package kmod

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/snapcore/snapd/dirs"
	"github.com/snapcore/snapd/osutil"
	"github.com/snapcore/snapd/snap"
)

func moduleFilePath(snapName string) string {
	confFileName := fmt.Sprintf("%s.conf", snap.SecurityTag(snapName))
	return filepath.Join(dirs.SnapKModModulesDir, confFileName)
}

// WriteModulesFile creates a .conf file with list of modules for given snap.
func writeModulesFile(modules [][]byte, snapName string) error {
	dir := dirs.SnapKModModulesDir
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("cannot create directory for kmod files %q: %s", dir, err)
	}

	var buffer bytes.Buffer
	buffer.WriteString("# This file is automatically generated.\n")
	for _, module := range modules {
		buffer.Write(module)
		buffer.WriteByte('\n')
	}

	content := &osutil.FileState{
		Content: buffer.Bytes(),
		Mode:    0644,
	}

	return osutil.EnsureFileState(moduleFilePath(snapName), content)
}

// RemoveModulesFile removes modules .conf file for given snap.
// No error is reported if the file doesn't exist.
func removeModulesFile(snapName string) error {
	err := os.Remove(moduleFilePath(snapName))
	if err != nil && !os.IsNotExist(err) {
		return err
	}
	return nil
}

// LoadModules loads given list of modules via modprobe.
// Any error from modprobe interrupts loading of subsequent modules and returns the error.
func loadModules(modules [][]byte) error {
	for _, mod := range modules {
		if output, err := exec.Command("modprobe", "--syslog", string(mod)).CombinedOutput(); err != nil {
			return fmt.Errorf("cannot load module %s: %s", mod, osutil.OutputErr(output, err))
		}
	}
	return nil
}
