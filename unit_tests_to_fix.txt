Obtaining dependencies
Obtaining c-dependencies
7ce9d15f4b0a7a76ddf08e662abde4a3e340bb41
Show go version
/usr/lib/go-1.18/bin/go
go version go1.18.1 linux/amd64
Building
Running tests from /home/ernest/source/snapd
ok  	github.com/snapcore/snapd/advisor	0.206s	coverage: 80.4% of statements
ok  	github.com/snapcore/snapd/arch	0.028s	coverage: 66.7% of statements
?   	github.com/snapcore/snapd/arch/archtest	[no test files]
ok  	github.com/snapcore/snapd/aspects	0.053s	coverage: 91.3% of statements
ok  	github.com/snapcore/snapd/asserts	12.491s	coverage: 93.5% of statements
ok  	github.com/snapcore/snapd/asserts/assertstest	0.202s	coverage: 69.9% of statements
?   	github.com/snapcore/snapd/asserts/info	[no test files]
ok  	github.com/snapcore/snapd/asserts/internal	0.029s	coverage: 99.2% of statements
ok  	github.com/snapcore/snapd/asserts/signtool	0.184s	coverage: 74.3% of statements
ok  	github.com/snapcore/snapd/asserts/snapasserts	1.015s	coverage: 94.8% of statements
ok  	github.com/snapcore/snapd/asserts/sysdb	0.295s	coverage: 84.6% of statements
?   	github.com/snapcore/snapd/asserts/systestkeys	[no test files]
ok  	github.com/snapcore/snapd/boot	42.349s	coverage: 86.7% of statements
ok  	github.com/snapcore/snapd/boot/boottest	0.103s	coverage: 46.7% of statements
ok  	github.com/snapcore/snapd/bootloader	3.156s	coverage: 86.2% of statements
ok  	github.com/snapcore/snapd/bootloader/androidbootenv	0.012s	coverage: 77.3% of statements
ok  	github.com/snapcore/snapd/bootloader/assets	0.025s	coverage: 83.0% of statements
ok  	github.com/snapcore/snapd/bootloader/assets/genasset	0.029s	coverage: 82.2% of statements
?   	github.com/snapcore/snapd/bootloader/bootloadertest	[no test files]
ok  	github.com/snapcore/snapd/bootloader/efi	0.039s	coverage: 88.6% of statements
ok  	github.com/snapcore/snapd/bootloader/grubenv	0.015s	coverage: 48.8% of statements
ok  	github.com/snapcore/snapd/bootloader/lkenv	0.128s	coverage: 91.8% of statements
ok  	github.com/snapcore/snapd/bootloader/ubootenv	0.061s	coverage: 91.1% of statements
ok  	github.com/snapcore/snapd/client	2.137s	coverage: 86.5% of statements
ok  	github.com/snapcore/snapd/client/clientutil	0.131s	coverage: 86.0% of statements
ok  	github.com/snapcore/snapd/cmd/snap	46.595s	coverage: 82.1% of statements
ok  	github.com/snapcore/snapd/cmd/snap-bootstrap	34.987s	coverage: 82.6% of statements
ok  	github.com/snapcore/snapd/cmd/snap-bootstrap/triggerwatch	0.026s	coverage: 30.7% of statements
ok  	github.com/snapcore/snapd/cmd/snap-exec	0.056s	coverage: 84.2% of statements
ok  	github.com/snapcore/snapd/cmd/snap-failure	0.548s	coverage: 88.5% of statements
ok  	github.com/snapcore/snapd/cmd/snap-fde-keymgr	0.016s	coverage: 80.9% of statements
ok  	github.com/snapcore/snapd/cmd/snap-preseed	0.024s	coverage: 84.2% of statements
ok  	github.com/snapcore/snapd/cmd/snap-recovery-chooser	0.107s	coverage: 77.3% of statements
ok  	github.com/snapcore/snapd/cmd/snap-repair	1.098s	coverage: 89.0% of statements
ok  	github.com/snapcore/snapd/cmd/snap-seccomp	6.165s	coverage: 71.9% of statements
?   	github.com/snapcore/snapd/cmd/snap-seccomp/syscalls	[no test files]
ok  	github.com/snapcore/snapd/cmd/snap-update-ns	0.149s	coverage: 92.5% of statements
ok  	github.com/snapcore/snapd/cmd/snapctl	0.021s	coverage: 14.7% of statements
ok  	github.com/snapcore/snapd/cmd/snapd	11.945s	coverage: 49.2% of statements
?   	github.com/snapcore/snapd/cmd/snapd-aa-prompt-listener	[no test files]
?   	github.com/snapcore/snapd/cmd/snapd-aa-prompt-ui	[no test files]
ok  	github.com/snapcore/snapd/cmd/snapd-apparmor	0.093s	coverage: 80.4% of statements
ok  	github.com/snapcore/snapd/cmd/snaplock	0.015s	coverage: 71.4% of statements
ok  	github.com/snapcore/snapd/cmd/snaplock/runinhibit	0.019s	coverage: 77.8% of statements
ok  	github.com/snapcore/snapd/daemon	48.788s	coverage: 86.9% of statements
ok  	github.com/snapcore/snapd/dbusutil	0.018s	coverage: 67.4% of statements
?   	github.com/snapcore/snapd/dbusutil/dbustest	[no test files]
?   	github.com/snapcore/snapd/dbusutil/netplantest	[no test files]
ok  	github.com/snapcore/snapd/desktop/notification	0.148s	coverage: 89.0% of statements
?   	github.com/snapcore/snapd/desktop/notification/notificationtest	[no test files]
ok  	github.com/snapcore/snapd/desktop/portal	0.078s	coverage: 85.0% of statements
ok  	github.com/snapcore/snapd/dirs	0.009s	coverage: 95.4% of statements
?   	github.com/snapcore/snapd/docs	[no test files]
ok  	github.com/snapcore/snapd/errtracker	0.399s	coverage: 86.8% of statements
ok  	github.com/snapcore/snapd/features	0.018s	coverage: 96.0% of statements
ok  	github.com/snapcore/snapd/gadget	1.380s	coverage: 93.2% of statements
ok  	github.com/snapcore/snapd/gadget/device	0.023s	coverage: 80.6% of statements
ok  	github.com/snapcore/snapd/gadget/edition	0.006s	coverage: 87.5% of statements
?   	github.com/snapcore/snapd/gadget/gadgettest	[no test files]
ok  	github.com/snapcore/snapd/gadget/install	1.942s	coverage: 81.2% of statements
ok  	github.com/snapcore/snapd/gadget/quantity	0.005s	coverage: 96.0% of statements
ok  	github.com/snapcore/snapd/httputil	0.879s	coverage: 76.3% of statements
ok  	github.com/snapcore/snapd/i18n	0.059s	coverage: 91.2% of statements
ok  	github.com/snapcore/snapd/i18n/xgettext-go	0.017s	coverage: 85.7% of statements
ok  	github.com/snapcore/snapd/image	48.551s	coverage: 86.3% of statements
ok  	github.com/snapcore/snapd/image/preseed	1.452s	coverage: 82.5% of statements
ok  	github.com/snapcore/snapd/interfaces	0.189s	coverage: 93.4% of statements
ok  	github.com/snapcore/snapd/interfaces/apparmor	0.378s	coverage: 90.3% of statements
ok  	github.com/snapcore/snapd/interfaces/backends	0.011s	coverage: 100.0% of statements
ok  	github.com/snapcore/snapd/interfaces/builtin	0.926s	coverage: 90.0% of statements
ok  	github.com/snapcore/snapd/interfaces/dbus	0.076s	coverage: 84.7% of statements
ok  	github.com/snapcore/snapd/interfaces/hotplug	0.029s	coverage: 94.3% of statements
ok  	github.com/snapcore/snapd/interfaces/ifacetest	0.022s	coverage: 14.0% of statements
ok  	github.com/snapcore/snapd/interfaces/kmod	0.310s	coverage: 84.9% of statements
ok  	github.com/snapcore/snapd/interfaces/mount	0.169s	coverage: 93.0% of statements
ok  	github.com/snapcore/snapd/interfaces/policy	0.155s	coverage: 95.1% of statements
ok  	github.com/snapcore/snapd/interfaces/polkit	0.024s	coverage: 83.6% of statements
ok  	github.com/snapcore/snapd/interfaces/seccomp	1.408s	coverage: 89.9% of statements
ok  	github.com/snapcore/snapd/interfaces/systemd	0.028s	coverage: 87.1% of statements
ok  	github.com/snapcore/snapd/interfaces/udev	3.254s	coverage: 90.4% of statements
ok  	github.com/snapcore/snapd/interfaces/utils	0.006s	coverage: 100.0% of statements
ok  	github.com/snapcore/snapd/jsonutil	0.009s	coverage: 100.0% of statements
ok  	github.com/snapcore/snapd/jsonutil/safejson	0.014s	coverage: 98.7% of statements
ok  	github.com/snapcore/snapd/kernel	0.010s	coverage: 94.3% of statements
ok  	github.com/snapcore/snapd/kernel/fde	1.143s	coverage: 76.9% of statements
ok  	github.com/snapcore/snapd/logger	0.012s	coverage: 98.3% of statements
ok  	github.com/snapcore/snapd/metautil	0.010s	coverage: 100.0% of statements
?   	github.com/snapcore/snapd/netutil	[no test files]
ok  	github.com/snapcore/snapd/osutil	1.763s	coverage: 88.3% of statements
ok  	github.com/snapcore/snapd/osutil/disks	0.427s	coverage: 83.0% of statements
ok  	github.com/snapcore/snapd/osutil/epoll	0.818s	coverage: 94.5% of statements
ok  	github.com/snapcore/snapd/osutil/inotify	3.008s	coverage: 85.7% of statements
ok  	github.com/snapcore/snapd/osutil/kcmdline	0.036s	coverage: 91.4% of statements
ok  	github.com/snapcore/snapd/osutil/kmod	0.020s	coverage: 100.0% of statements
ok  	github.com/snapcore/snapd/osutil/mkfs	0.141s	coverage: 88.9% of statements
ok  	github.com/snapcore/snapd/osutil/mount	0.003s	coverage: 100.0% of statements
?   	github.com/snapcore/snapd/osutil/squashfs	[no test files]
ok  	github.com/snapcore/snapd/osutil/strace	0.014s	coverage: 86.2% of statements
?   	github.com/snapcore/snapd/osutil/sys	[no test files]
?   	github.com/snapcore/snapd/osutil/udev/crawler	[no test files]
ok  	github.com/snapcore/snapd/osutil/udev/netlink	0.156s	coverage: 68.4% of statements
ok  	github.com/snapcore/snapd/overlord	76.101s	coverage: 90.0% of statements
ok  	github.com/snapcore/snapd/overlord/aspectstate	0.050s	coverage: 88.5% of statements
?   	github.com/snapcore/snapd/overlord/aspectstate/aspecttest	[no test files]
ok  	github.com/snapcore/snapd/overlord/assertstate	2.708s	coverage: 88.1% of statements
?   	github.com/snapcore/snapd/overlord/assertstate/assertstatetest	[no test files]
ok  	github.com/snapcore/snapd/overlord/auth	0.018s	coverage: 84.8% of statements
ok  	github.com/snapcore/snapd/overlord/cmdstate	0.462s	coverage: 90.6% of statements
ok  	github.com/snapcore/snapd/overlord/configstate	0.140s	coverage: 87.7% of statements
ok  	github.com/snapcore/snapd/overlord/configstate/config	0.027s	coverage: 88.6% of statements
ok  	github.com/snapcore/snapd/overlord/configstate/configcore	2.891s	coverage: 87.1% of statements
ok  	github.com/snapcore/snapd/overlord/configstate/proxyconf	0.008s	coverage: 85.7% of statements
ok  	github.com/snapcore/snapd/overlord/configstate/settings	0.011s	coverage: 80.0% of statements

----------------------------------------------------------------------
FAIL: firstboot20_test.go:1110: firstBoot20Suite.TestPopulateFromSeedClassicWithModesDangerousRunModeNoKernelAndGadgetClassicSnap

firstboot20_test.go:1117:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelDangerous, nil, "")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc000381400), (*state.Task)(0xc00013f2c0)}
... n int = 0

firstboot20_test.go:1117:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelDangerous, nil, "")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"25", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0006254d0), "hook-setup":(*json.RawMessage)(0xc000625458)}, waitTasks:[]string{"10", "22"}, haltTasks:[]string{"11"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec54fb80498e, ext:53947115784, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:1117:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelDangerous, nil, "")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000381400)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000624900)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec54fb09b04a, ext:53939343310, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:1117:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelDangerous, nil, "")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0006f6280)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"13", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000625188)}, waitTasks:[]string{"10"}, haltTasks:[]string{"14", "24"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec54fb7ce55c, ext:53946893536, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot20_test.go:764: firstBoot20Suite.TestPopulateFromSeedClassicWithModesRunMode

firstboot20_test.go:776:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelSigned)
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc00043b540), (*state.Task)(0xc0007c5900), (*state.Task)(0xc0005d5180), (*state.Task)(0xc000419cc0)}
... n int = 0

firstboot20_test.go:776:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelSigned)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0009aa5a0), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0004279c8), "hook-setup":(*json.RawMessage)(0xc000427998)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5513397d3c, ext:54271387318, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:776:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelSigned)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00043b540)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0009aa5a0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000426870)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5511c3b9eb, ext:54246892389, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:776:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelSigned)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c5900)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0009aa5a0), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000426eb8)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55123ff885, ext:54255034899, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:776:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelSigned)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0005d5180)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0009aa5a0), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000427380)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5512b7c32c, ext:54262885552, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot20_test.go:779: firstBoot20Suite.TestPopulateFromSeedClassicWithModesRunModeNoKernelAndGadget

firstboot20_test.go:821:
    checkOrder(c, tsAll, snaps...)
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc000419cc0), (*state.Task)(0xc000380500)}
... n int = 0

firstboot20_test.go:821:
    checkOrder(c, tsAll, snaps...)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"25", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000c84438), "hook-setup":(*json.RawMessage)(0xc000c84408)}, waitTasks:[]string{"10", "22"}, haltTasks:[]string{"11"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55281b5fa5, ext:54621735519, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:821:
    checkOrder(c, tsAll, snaps...)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000419cc0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0003ea540)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55279a5a8d, ext:54613279761, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot20_test.go:1120: firstBoot20Suite.TestPopulateFromSeedClassicWithModesSignedRunModeNoKernelAndGadgetClassicSnap

firstboot20_test.go:1127:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelSigned, nil, "")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc000a98780), (*state.Task)(0xc000a99b80)}
... n int = 0

firstboot20_test.go:1127:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelSigned, nil, "")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a02d0), id:"25", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0004b0978), "hook-setup":(*json.RawMessage)(0xc0004b0948)}, waitTasks:[]string{"10", "22"}, haltTasks:[]string{"11"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5534e360b3, ext:54836169271, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:1127:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelSigned, nil, "")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000a98780)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a02d0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0300)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec553464509e, ext:54827842082, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:1127:
    s.testPopulateFromSeedClassicWithModesRunModeNoKernelAndGadgetClassicSnap(c, asserts.ModelSigned, nil, "")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000a99e00)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a02d0), id:"13", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b07b0)}, waitTasks:[]string{"10"}, haltTasks:[]string{"14", "24"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5534e08c37, ext:54835983803, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot20_test.go:537: firstBoot20Suite.TestPopulateFromSeedCore20InstallMode

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc00044fa40), (*state.Task)(0xc000288000), (*state.Task)(0xc0007c5040), (*state.Task)(0xc0002c6dc0)}
... n int = 0

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000625950), "hook-setup":(*json.RawMessage)(0xc0006258c0)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55504446b8, ext:55221762610, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00044fa40)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000133b18)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec554ea0e560, ext:55194278116, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000288000)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000624378)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec554f49d00c, ext:55205348240, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c5040)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000624df8)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec554fc02602, ext:55213103504, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:279:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc00044fa40), (*state.Task)(0xc000288000), (*state.Task)(0xc0007c5040), (*state.Task)(0xc0002c6dc0)}
... n int = 0

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000625950), "hook-setup":(*json.RawMessage)(0xc0006258c0)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55504446b8, ext:55221762610, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00044fa40)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000133b18)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec554ea0e560, ext:55194278116, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000288000)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000624378)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec554f49d00c, ext:55205348240, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:544:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c5040)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a6c0), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000624df8)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec554fc02602, ext:55213103504, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot20_test.go:548: firstBoot20Suite.TestPopulateFromSeedCore20RecoverMode

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc000288000), (*state.Task)(0xc0000dda40), (*state.Task)(0xc0006f7cc0), (*state.Task)(0xc0002c7540)}
... n int = 0

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000469a58), "hook-setup":(*json.RawMessage)(0xc000469a28)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec556a781b58, ext:55661366994, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000288000)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000468018)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55690e7d4c, ext:55637668048, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0000dda40)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000468738)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55697c070d, ext:55644846737, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0006f7cc0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000468f90)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5569fe8ff3, ext:55653401463, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:279:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc000288000), (*state.Task)(0xc0000dda40), (*state.Task)(0xc0006f7cc0), (*state.Task)(0xc0002c7540)}
... n int = 0

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000469a58), "hook-setup":(*json.RawMessage)(0xc000469a28)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec556a781b58, ext:55661366994, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000288000)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000468018)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55690e7d4c, ext:55637668048, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0000dda40)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000468738)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55697c070d, ext:55644846737, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:555:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0006f7cc0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000468f90)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5569fe8ff3, ext:55653401463, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot20_test.go:526: firstBoot20Suite.TestPopulateFromSeedCore20RunMode

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc0001ea500), (*state.Task)(0xc000b223c0), (*state.Task)(0xc000b23b80), (*state.Task)(0xc00043af00)}
... n int = 0

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0004b1620), "hook-setup":(*json.RawMessage)(0xc0004b15f0)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55872298f0, ext:56068560490, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0001ea500)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0768)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5585c92979, ext:56045922045, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000b223c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0b70)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55863c89c7, ext:56053483329, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000b23b80)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0fd8)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5586af467f, ext:56061002755, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:279:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc0001ea500), (*state.Task)(0xc000b223c0), (*state.Task)(0xc000b23b80), (*state.Task)(0xc00043af00)}
... n int = 0

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0004b1620), "hook-setup":(*json.RawMessage)(0xc0004b15f0)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55872298f0, ext:56068560490, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0001ea500)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0768)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5585c92979, ext:56045922045, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000b223c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0b70)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55863c89c7, ext:56053483329, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:533:
    s.testPopulateFromSeedCore20Happy(c, &m, grade)
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000b23b80)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0ea0), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0fd8)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5586af467f, ext:56061002755, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot20_test.go:517: firstBoot20Suite.TestPopulateFromSeedCore20RunModeDangerousWithDevmode

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc00043a8c0), (*state.Task)(0xc0007c4000), (*state.Task)(0xc000418500), (*state.Task)(0xc000ad4780)}
... n int = 0

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000427b48), "hook-setup":(*json.RawMessage)(0xc000427b18)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55a0dbe54c, ext:56500134598, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00043a8c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000426ae0)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec559f762afc, ext:56476690560, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c4000)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000427050)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec559fe60698, ext:56484021286, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000418500)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000427500)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55a06286be, ext:56492180546, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000ad4c80)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"41", kind:"prerequisites", summary:"Ensure prerequisites for \"pc\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004278f0)}, waitTasks:[]string{"38"}, haltTasks:[]string{"42", "56"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55a0d8dfc0, ext:56499936580, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot20_test.go:279:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc00043a8c0), (*state.Task)(0xc0007c4000), (*state.Task)(0xc000418500), (*state.Task)(0xc000ad4780)}
... n int = 0

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000427b48), "hook-setup":(*json.RawMessage)(0xc000427b18)}, waitTasks:[]string{"11", "24", "38", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55a0dbe54c, ext:56500134598, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00043a8c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000426ae0)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec559f762afc, ext:56476690560, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c4000)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000427050)}, waitTasks:[]string{"11"}, haltTasks:[]string{"15", "28"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec559fe60698, ext:56484021286, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000418500)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"29", kind:"prerequisites", summary:"Ensure prerequisites for \"core20\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000427500)}, waitTasks:[]string{"24"}, haltTasks:[]string{"30", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55a06286be, ext:56492180546, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot20_test.go:523:
    s.testPopulateFromSeedCore20Happy(c, &m, asserts.ModelDangerous, "test-devmode=20")
firstboot20_test.go:281:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000ad4c80)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538240), id:"41", kind:"prerequisites", summary:"Ensure prerequisites for \"pc\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004278f0)}, waitTasks:[]string{"38"}, haltTasks:[]string{"42", "56"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec55a0d8dfc0, ext:56499936580, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot_preseed_test.go:497: firstbootPreseedingClassic16Suite.TestPopulatePreseedWithConnectHook

firstboot_preseed_test.go:594:
    checkPreseedOrder(c, tsAll, "snapd", "core18", "foo", "bar")
firstboot_preseed_test.go:168:
    c.Assert(waitTasks, HasLen, 1)
... obtained []*state.Task = []*state.Task{}
... n int = 1


----------------------------------------------------------------------
FAIL: firstboot_preseed_test.go:411: firstbootPreseedingClassic16Suite.TestPreseedClassicWithSnapdOnlyHappy

firstboot_preseed_test.go:464:
    checkPreseedOrder(c, tsAll, "snapd", "core18", "foo")
firstboot_preseed_test.go:168:
    c.Assert(waitTasks, HasLen, 1)
... obtained []*state.Task = []*state.Task{}
... n int = 1


----------------------------------------------------------------------
FAIL: firstboot_preseed_test.go:256: firstbootPreseedingClassic16Suite.TestPreseedOnClassicHappy

firstboot_preseed_test.go:311:
    checkPreseedOrder(c, tsAll, "core", "foo", "bar")
firstboot_preseed_test.go:209:
    c.Check(waitsForPreviousSnap, Equals, true, Commentf("%s", snaps[matched-1]))
... obtained bool = false
... expected bool = true
... foo


----------------------------------------------------------------------
PANIC: firstboot_test.go:837: firstBoot16Suite.TestPopulateFromSeedConfigureHappy

... Panic: runtime error: invalid memory address or nil pointer dereference (PC=0x4379C6)

/usr/lib/go-1.18/src/runtime/panic.go:838
  in gopanic
/usr/lib/go-1.18/src/runtime/panic.go:220
  in panicmem
/usr/lib/go-1.18/src/runtime/signal_unix.go:818
  in sigpanic
/home/ernest/source/snapd/overlord/state/task.go:500
  in Task.WaitFor
firstboot.go:305
  in DeviceManager.populateStateFromSeedImpl.func5
firstboot.go:334
  in DeviceManager.populateStateFromSeedImpl.func6
firstboot.go:381
  in DeviceManager.populateStateFromSeedImpl
export_test.go:200
  in PopulateStateFromSeedImpl
firstboot_test.go:900
  in firstBoot16Suite.TestPopulateFromSeedConfigureHappy
/usr/lib/go-1.18/src/reflect/value.go:339
  in Value.Call
/usr/lib/go-1.18/src/runtime/asm_amd64.s:1571
  in goexit

----------------------------------------------------------------------
FAIL: firstboot_test.go:2364: firstBoot16Suite.TestPopulateFromSeedCore18ValidationSetTrackingHappy

firstboot_test.go:2396:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc0007c4780), (*state.Task)(0xc00036b180), (*state.Task)(0xc000381400), (*state.Task)(0xc00043b900)}
... n int = 0

firstboot_test.go:2396:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538d80), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000133cf8), "hook-setup":(*json.RawMessage)(0xc000133c80)}, waitTasks:[]string{"11", "36", "23", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec565b164e9c, ext:59403299350, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2396:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c4780)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538d80), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000624f78)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec565961e4ea, ext:59374698606, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2396:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00036b180)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538d80), id:"26", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000625de8)}, waitTasks:[]string{"11"}, haltTasks:[]string{"27", "40"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec565a8476a4, ext:59393741352, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2396:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000381400)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538d80), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"core18\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000625710)}, waitTasks:[]string{"36"}, haltTasks:[]string{"15", "25"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec5659fa3437, ext:59384680379, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot_test.go:2415: firstBoot16Suite.TestPopulateFromSeedCore18ValidationSetTrackingUnmetCriteria

firstboot_test.go:2448:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc0007c5900), (*state.Task)(0xc000532b40), (*state.Task)(0xc00045d680), (*state.Task)(0xc000588500)}
... n int = 0

firstboot_test.go:2448:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538ea0), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0009bb578), "hook-setup":(*json.RawMessage)(0xc0009bb548)}, waitTasks:[]string{"11", "36", "23", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec56de189a7a, ext:61453781492, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2448:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c5900)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538ea0), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0009ba6a8)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec56dca5ff6e, ext:61429493490, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2448:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000532b40)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538ea0), id:"26", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0009baea0)}, waitTasks:[]string{"11"}, haltTasks:[]string{"27", "40"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec56dd9a834d, ext:61445518033, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2448:
    chg := s.testPopulateFromSeedCore18ValidationSetTracking(c, []asserts.Assertion{a}, []interface{}{headers})
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00045d680)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000538ea0), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"core18\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0009baab0)}, waitTasks:[]string{"36"}, haltTasks:[]string{"15", "25"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec56dd1d1255, ext:61437297123, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
PANIC: firstboot_test.go:1001: firstBoot16Suite.TestPopulateFromSeedGadgetConnectHappy

... Panic: runtime error: invalid memory address or nil pointer dereference (PC=0x4379C6)

/usr/lib/go-1.18/src/runtime/panic.go:838
  in gopanic
/usr/lib/go-1.18/src/runtime/panic.go:220
  in panicmem
/usr/lib/go-1.18/src/runtime/signal_unix.go:818
  in sigpanic
/home/ernest/source/snapd/overlord/state/task.go:500
  in Task.WaitFor
firstboot.go:305
  in DeviceManager.populateStateFromSeedImpl.func5
firstboot.go:334
  in DeviceManager.populateStateFromSeedImpl.func6
firstboot.go:381
  in DeviceManager.populateStateFromSeedImpl
export_test.go:200
  in PopulateStateFromSeedImpl
firstboot_test.go:1048
  in firstBoot16Suite.TestPopulateFromSeedGadgetConnectHappy
/usr/lib/go-1.18/src/reflect/value.go:339
  in Value.Call
/usr/lib/go-1.18/src/runtime/asm_amd64.s:1571
  in goexit

----------------------------------------------------------------------
PANIC: firstboot_test.go:591: firstBoot16Suite.TestPopulateFromSeedHappy

... Panic: runtime error: invalid memory address or nil pointer dereference (PC=0x4379C6)

/usr/lib/go-1.18/src/runtime/panic.go:838
  in gopanic
/usr/lib/go-1.18/src/runtime/panic.go:220
  in panicmem
/usr/lib/go-1.18/src/runtime/signal_unix.go:818
  in sigpanic
/home/ernest/source/snapd/overlord/state/task.go:500
  in Task.WaitFor
firstboot.go:305
  in DeviceManager.populateStateFromSeedImpl.func5
firstboot.go:334
  in DeviceManager.populateStateFromSeedImpl.func6
firstboot.go:381
  in DeviceManager.populateStateFromSeedImpl
export_test.go:200
  in PopulateStateFromSeedImpl
firstboot_test.go:570
  in firstBoot16BaseTest.makeSeedChange
firstboot_test.go:598
  in firstBoot16Suite.TestPopulateFromSeedHappy
/usr/lib/go-1.18/src/reflect/value.go:339
  in Value.Call
/usr/lib/go-1.18/src/runtime/asm_amd64.s:1571
  in goexit

----------------------------------------------------------------------
PANIC: firstboot_test.go:737: firstBoot16Suite.TestPopulateFromSeedHappyMultiAssertsFiles

... Panic: runtime error: invalid memory address or nil pointer dereference (PC=0x4379C6)

/usr/lib/go-1.18/src/runtime/panic.go:838
  in gopanic
/usr/lib/go-1.18/src/runtime/panic.go:220
  in panicmem
/usr/lib/go-1.18/src/runtime/signal_unix.go:818
  in sigpanic
/home/ernest/source/snapd/overlord/state/task.go:500
  in Task.WaitFor
firstboot.go:305
  in DeviceManager.populateStateFromSeedImpl.func5
firstboot.go:334
  in DeviceManager.populateStateFromSeedImpl.func6
firstboot.go:381
  in DeviceManager.populateStateFromSeedImpl
export_test.go:200
  in PopulateStateFromSeedImpl
firstboot_test.go:785
  in firstBoot16Suite.TestPopulateFromSeedHappyMultiAssertsFiles
/usr/lib/go-1.18/src/reflect/value.go:339
  in Value.Call
/usr/lib/go-1.18/src/runtime/asm_amd64.s:1571
  in goexit

----------------------------------------------------------------------
PANIC: firstboot_test.go:1745: firstBoot16Suite.TestPopulateFromSeedMissingBase

... Panic: runtime error: invalid memory address or nil pointer dereference (PC=0x4379C6)

/usr/lib/go-1.18/src/runtime/panic.go:838
  in gopanic
/usr/lib/go-1.18/src/runtime/panic.go:220
  in panicmem
/usr/lib/go-1.18/src/runtime/signal_unix.go:818
  in sigpanic
/home/ernest/source/snapd/overlord/state/task.go:500
  in Task.WaitFor
firstboot.go:305
  in DeviceManager.populateStateFromSeedImpl.func5
firstboot.go:334
  in DeviceManager.populateStateFromSeedImpl.func6
firstboot.go:381
  in DeviceManager.populateStateFromSeedImpl
export_test.go:200
  in PopulateStateFromSeedImpl
firstboot_test.go:1785
  in firstBoot16Suite.TestPopulateFromSeedMissingBase
/usr/lib/go-1.18/src/reflect/value.go:339
  in Value.Call
/usr/lib/go-1.18/src/runtime/asm_amd64.s:1571
  in goexit

----------------------------------------------------------------------
PANIC: firstboot_test.go:688: firstBoot16Suite.TestPopulateFromSeedMissingBootloader

... Panic: runtime error: invalid memory address or nil pointer dereference (PC=0x4379C6)

/usr/lib/go-1.18/src/runtime/panic.go:838
  in gopanic
/usr/lib/go-1.18/src/runtime/panic.go:220
  in panicmem
/usr/lib/go-1.18/src/runtime/signal_unix.go:818
  in sigpanic
/home/ernest/source/snapd/overlord/state/task.go:500
  in Task.WaitFor
firstboot.go:305
  in DeviceManager.populateStateFromSeedImpl.func5
firstboot.go:334
  in DeviceManager.populateStateFromSeedImpl.func6
firstboot.go:381
  in DeviceManager.populateStateFromSeedImpl
export_test.go:200
  in PopulateStateFromSeedImpl
firstboot_test.go:570
  in firstBoot16BaseTest.makeSeedChange
firstboot_test.go:722
  in firstBoot16Suite.TestPopulateFromSeedMissingBootloader
/usr/lib/go-1.18/src/reflect/value.go:339
  in Value.Call
/usr/lib/go-1.18/src/runtime/asm_amd64.s:1571
  in goexit

----------------------------------------------------------------------
FAIL: firstboot_test.go:321: firstBoot16Suite.TestPopulateFromSeedOnClassicEmptySeedYaml

firstboot_test.go:346:
    // note, cannot use st.Tasks() here as it filters out tasks with no change
    c.Check(st.TaskCount(), Equals, 0)
... obtained int = 1
... expected int = 0


----------------------------------------------------------------------
FAIL: firstboot_test.go:1926: firstBoot16Suite.TestPopulateFromSeedOnClassicWithSnapdOnlyAndGadgetHappy

firstboot_test.go:1978:
    checkOrder(c, tsAll, "snapd", "core18", "pc", "foo")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc0007c52c0), (*state.Task)(0xc0008323c0), (*state.Task)(0xc00045cb40)}
... n int = 0

firstboot_test.go:1978:
    checkOrder(c, tsAll, "snapd", "core18", "pc", "foo")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044b170), id:"39", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0004b1008), "hook-setup":(*json.RawMessage)(0xc0004b0fd8)}, waitTasks:[]string{"10", "36", "22"}, haltTasks:[]string{"11"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec572eec6fb5, ext:62736099641, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1978:
    checkOrder(c, tsAll, "snapd", "core18", "pc", "foo")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0007c52c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044b170), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b04f8)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec572e05a5d4, ext:62720974690, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1978:
    checkOrder(c, tsAll, "snapd", "core18", "pc", "foo")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0008323c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044b170), id:"27", kind:"prerequisites", summary:"Ensure prerequisites for \"core18\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0e70)}, waitTasks:[]string{"10"}, haltTasks:[]string{"28", "38"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec572eea30b6, ext:62735952442, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1978:
    checkOrder(c, tsAll, "snapd", "core18", "pc", "foo")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00045d040)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044b170), id:"13", kind:"prerequisites", summary:"Ensure prerequisites for \"pc\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0004b0930)}, waitTasks:[]string{"36"}, haltTasks:[]string{"14", "26"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec572e754306, ext:62728289418, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot_test.go:1789: firstBoot16Suite.TestPopulateFromSeedOnClassicWithSnapdOnlyHappy

firstboot_test.go:1837:
    checkOrder(c, tsAll, "snapd", "core18", "foo")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc000ab5540)}
... n int = 0

firstboot_test.go:1837:
    checkOrder(c, tsAll, "snapd", "core18", "foo")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000854360), id:"13", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc00045e978), "hook-setup":(*json.RawMessage)(0xc00045e948)}, waitTasks:[]string{"10"}, haltTasks:[]string{"11"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5749937662, ext:63109511644, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1837:
    checkOrder(c, tsAll, "snapd", "core18", "foo")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000ab57c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000854360), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc00045e468)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec57499124f3, ext:63109359735, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1837:
    checkOrder(c, tsAll, "snapd", "core18", "foo")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00045c3c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000854360), id:"28", kind:"prerequisites", summary:"Ensure prerequisites for \"core18\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0009ba0f0)}, waitTasks:[]string{"12"}, haltTasks:[]string{"29", "39"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec574a72aa8f, ext:63124139529, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot_test.go:1503: firstBoot16Suite.TestPopulateFromSeedOrdering

firstboot_test.go:1552:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc", "other-base", "snap-req-other-base")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc0006f7900), (*state.Task)(0xc00045ca00), (*state.Task)(0xc0004452c0), (*state.Task)(0xc000ab4780)}
... n int = 0

firstboot_test.go:1552:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc", "other-base", "snap-req-other-base")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a870), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000a816e0), "hook-setup":(*json.RawMessage)(0xc000a816b0)}, waitTasks:[]string{"11", "36", "23", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec575ec95e23, ext:63465365927, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1552:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc", "other-base", "snap-req-other-base")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0006f7900)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a870), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a807e0)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec575d3cba10, ext:63439371668, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1552:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc", "other-base", "snap-req-other-base")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00045ca00)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a870), id:"26", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a80fa8)}, waitTasks:[]string{"11"}, haltTasks:[]string{"27", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec575e4c054f, ext:63457151177, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1552:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc", "other-base", "snap-req-other-base")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0004452c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a870), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"core18\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a80be8)}, waitTasks:[]string{"36"}, haltTasks:[]string{"15", "25"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec575db07b22, ext:63446957744, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1552:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc", "other-base", "snap-req-other-base")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc000ab4c80)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a870), id:"41", kind:"prerequisites", summary:"Ensure prerequisites for \"pc\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a814a0)}, waitTasks:[]string{"23"}, haltTasks:[]string{"42", "56"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec575ec68244, ext:63465178568, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1552:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc", "other-base", "snap-req-other-base")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0005af400)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc00044a870), id:"72", kind:"prerequisites", summary:"Ensure prerequisites for \"other-base\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a81de8)}, waitTasks:[]string{"56"}, haltTasks:[]string{"73", "83"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec575fc0252e, ext:63481538738, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

[1] Ensure prerequisites for "snapd" are available
[2] Prepare snap "/tmp/check-2091976727/121/var/lib/snapd/seed/snaps/snapd_1.0_all.snap" (2)
[3] Mount snap "snapd" (2)
[4] Copy snap "snapd" data
[5] Setup snap "snapd" (2) security profiles
[6] Make snap "snapd" (2) available to the system
[7] Automatically connect eligible plugs and slots of snap "snapd"
[8] Set automatic aliases for snap "snapd"
[9] Setup snap "snapd" aliases
[10] Update managed boot config assets from "snapd" (2)
[11] Run install hook of "snapd" snap if present
[26] Ensure prerequisites for "pc-kernel" are available
[27] Prepare snap "/tmp/check-2091976727/121/var/lib/snapd/seed/snaps/pc-kernel_1.0_all.snap" (1)
[28] Mount snap "pc-kernel" (1)
[29] Update assets from kernel "pc-kernel" (1)
[30] Copy snap "pc-kernel" data
[31] Setup snap "pc-kernel" (1) security profiles
[32] Make snap "pc-kernel" (1) available to the system
[33] Automatically connect eligible plugs and slots of snap "pc-kernel"
[34] Set automatic aliases for snap "pc-kernel"
[35] Setup snap "pc-kernel" aliases
[36] Run install hook of "pc-kernel" snap if present
[14] Ensure prerequisites for "core18" are available
[15] Prepare snap "/tmp/check-2091976727/121/var/lib/snapd/seed/snaps/core18_1.0_all.snap" (1)
[16] Mount snap "core18" (1)
[17] Copy snap "core18" data
[18] Setup snap "core18" (1) security profiles
[19] Make snap "core18" (1) available to the system
[20] Automatically connect eligible plugs and slots of snap "core18"
[21] Set automatic aliases for snap "core18"
[22] Setup snap "core18" aliases
[23] Run install hook of "core18" snap if present
[41] Ensure prerequisites for "pc" are available
[42] Prepare snap "/tmp/check-2091976727/121/var/lib/snapd/seed/snaps/pc_1.0_all.snap" (1)
[43] Mount snap "pc" (1)
[44] Update assets from gadget "pc" (1)
[45] Update kernel command line from gadget "pc" (1)
[46] Copy snap "pc" data
[47] Setup snap "pc" (1) security profiles
[48] Make snap "pc" (1) available to the system
[49] Automatically connect eligible plugs and slots of snap "pc"
[50] Set automatic aliases for snap "pc"
[51] Setup snap "pc" aliases
[52] Run install hook of "pc" snap if present
[57] Run configure hook of "core" snap if present
[12] Start snap "snapd" (2) services
[13] Run health check of "snapd" snap
[37] Run default-configure hook of "pc-kernel" snap if present
[38] Start snap "pc-kernel" (1) services
[39] Run configure hook of "pc-kernel" snap if present
[40] Run health check of "pc-kernel" snap
[24] Start snap "core18" (1) services
[25] Run health check of "core18" snap
[53] Run default-configure hook of "pc" snap if present
[54] Start snap "pc" (1) services
[55] Run configure hook of "pc" snap if present
[56] Run health check of "pc" snap
[72] Ensure prerequisites for "other-base" are available
[73] Prepare snap "/tmp/check-2091976727/121/var/lib/snapd/seed/snaps/other-base_1.0_all.snap" (127)
[74] Mount snap "other-base" (127)
[75] Copy snap "other-base" data
[76] Setup snap "other-base" (127) security profiles
[77] Make snap "other-base" (127) available to the system
[78] Automatically connect eligible plugs and slots of snap "other-base"
[79] Set automatic aliases for snap "other-base"
[80] Setup snap "other-base" aliases
[81] Run install hook of "other-base" snap if present
[82] Start snap "other-base" (127) services
[83] Run health check of "other-base" snap
[58] Ensure prerequisites for "snap-req-other-base" are available
[59] Prepare snap "/tmp/check-2091976727/121/var/lib/snapd/seed/snaps/snap-req-other-base_1.0_all.snap" (128)
[60] Mount snap "snap-req-other-base" (128)
[61] Copy snap "snap-req-other-base" data
[62] Setup snap "snap-req-other-base" (128) security profiles
[63] Make snap "snap-req-other-base" (128) available to the system
[64] Automatically connect eligible plugs and slots of snap "snap-req-other-base"
[65] Set automatic aliases for snap "snap-req-other-base"
[66] Setup snap "snap-req-other-base" aliases
[67] Run install hook of "snap-req-other-base" snap if present
[68] Run default-configure hook of "snap-req-other-base" snap if present
[69] Start snap "snap-req-other-base" (128) services
[70] Run configure hook of "snap-req-other-base" snap if present
[71] Run health check of "snap-req-other-base" snap
[84] Mark system seeded

----------------------------------------------------------------------
FAIL: firstboot_test.go:1384: firstBoot16Suite.TestPopulateFromSeedWithBaseHappy

firstboot_test.go:1429:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc00042d400), (*state.Task)(0xc00045c8c0), (*state.Task)(0xc0006f7b80), (*state.Task)(0xc00036ba40)}
... n int = 0

firstboot_test.go:1429:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000854120), id:"57", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc000a81770), "hook-setup":(*json.RawMessage)(0xc000a81740)}, waitTasks:[]string{"11", "36", "23", "52"}, haltTasks:[]string{"12"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec577459b14f, ext:63827145929, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1429:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00042d400)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000854120), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a808a0)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "13"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec57730676e2, ext:63804914328, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1429:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00045c8c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000854120), id:"26", kind:"prerequisites", summary:"Ensure prerequisites for \"pc-kernel\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a81068)}, waitTasks:[]string{"11"}, haltTasks:[]string{"27", "40"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec5773dbb745, ext:63818889929, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:1429:
    checkOrder(c, tsAll, "snapd", "pc-kernel", "core18", "pc")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0006f7b80)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc000854120), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"core18\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc000a80ca8)}, waitTasks:[]string{"36"}, haltTasks:[]string{"15", "25"}, lanes:[]int(nil), log:[]string(nil), change:"", spawnTime:time.Time{wall:0xc135ec577377a05d, ext:63812330465, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
FAIL: firstboot_test.go:2096: firstBoot16Suite.TestPopulateFromSeedWithConnectHook

firstboot_test.go:2190:
    checkOrder(c, tsAll, "snapd", "core18", "foo", "bar")
firstboot_test.go:480:
    c.Check(waitTasks, HasLen, 0)
... obtained []*state.Task = []*state.Task{(*state.Task)(0xc00036b7c0)}
... n int = 0

firstboot_test.go:2190:
    checkOrder(c, tsAll, "snapd", "core18", "foo", "bar")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"13", kind:"run-hook", summary:"Run configure hook of \"core\" snap if present", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"hook-context":(*json.RawMessage)(0xc0009f6a98), "hook-setup":(*json.RawMessage)(0xc0009f6a68)}, waitTasks:[]string{"10"}, haltTasks:[]string{"11"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec5791b08de8, ext:64245635938, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2190:
    checkOrder(c, tsAll, "snapd", "core18", "foo", "bar")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00036ba40)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"1", kind:"prerequisites", summary:"Ensure prerequisites for \"snapd\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0009f6900)}, waitTasks:[]string(nil), haltTasks:[]string{"2", "12"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec5791ad96a8, ext:64245441590, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2190:
    checkOrder(c, tsAll, "snapd", "core18", "foo", "bar")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc0004452c0)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"14", kind:"prerequisites", summary:"Ensure prerequisites for \"core18\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0009f6d20)}, waitTasks:[]string{"12"}, haltTasks:[]string{"15", "25"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec5792206508, ext:64252965516, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}

firstboot_test.go:2190:
    checkOrder(c, tsAll, "snapd", "core18", "foo", "bar")
firstboot_test.go:482:
    c.Check(waitTasks, testutil.Contains, prevTask)
... container []*state.Task = []*state.Task{(*state.Task)(0xc00045ca00)}
... elem *state.Task = &state.Task{state:(*state.State)(0xc0003a0000), id:"26", kind:"prerequisites", summary:"Ensure prerequisites for \"foo\" are available", status:0, waitedStatus:0, clean:false, progress:(*state.progress)(nil), data:state.customData{"snap-setup":(*json.RawMessage)(0xc0009f7158)}, waitTasks:[]string{"25"}, haltTasks:[]string{"27", "39"}, lanes:[]int(nil), log:[]string(nil), change:"1", spawnTime:time.Time{wall:0xc135ec57929a3a92, ext:64260950038, loc:(*time.Location)(0x1a14b20)}, readyTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, doingTime:0, undoingTime:0, atTime:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}}


----------------------------------------------------------------------
PANIC: firstboot_test.go:1653: firstBoot16Suite.TestPopulateFromSeedWrongContentProviderOrder

... Panic: runtime error: invalid memory address or nil pointer dereference (PC=0x4379C6)

/usr/lib/go-1.18/src/runtime/panic.go:838
  in gopanic
/usr/lib/go-1.18/src/runtime/panic.go:220
  in panicmem
/usr/lib/go-1.18/src/runtime/signal_unix.go:818
  in sigpanic
/home/ernest/source/snapd/overlord/state/task.go:500
  in Task.WaitFor
firstboot.go:305
  in DeviceManager.populateStateFromSeedImpl.func5
firstboot.go:334
  in DeviceManager.populateStateFromSeedImpl.func6
firstboot.go:381
  in DeviceManager.populateStateFromSeedImpl
export_test.go:200
  in PopulateStateFromSeedImpl
firstboot_test.go:1714
  in firstBoot16Suite.TestPopulateFromSeedWrongContentProviderOrder
/usr/lib/go-1.18/src/reflect/value.go:339
  in Value.Call
/usr/lib/go-1.18/src/runtime/asm_amd64.s:1571
  in goexit
OOPS: 448 passed, 19 FAILED, 7 PANICKED
--- FAIL: TestDeviceManager (69.97s)
FAIL
coverage: 85.5% of statements
FAIL	github.com/snapcore/snapd/overlord/devicestate	70.274s
?   	github.com/snapcore/snapd/overlord/devicestate/devicestatetest	[no test files]
ok  	github.com/snapcore/snapd/overlord/devicestate/internal	0.008s	coverage: 77.8% of statements
ok  	github.com/snapcore/snapd/overlord/healthstate	0.066s	coverage: 85.1% of statements
ok  	github.com/snapcore/snapd/overlord/hookstate	3.216s	coverage: 79.5% of statements
ok  	github.com/snapcore/snapd/overlord/hookstate/ctlcmd	0.766s	coverage: 89.1% of statements
ok  	github.com/snapcore/snapd/overlord/hookstate/hooktest	0.005s	coverage: 100.0% of statements
ok  	github.com/snapcore/snapd/overlord/ifacestate	15.204s	coverage: 84.2% of statements
ok  	github.com/snapcore/snapd/overlord/ifacestate/ifacerepo	0.042s	coverage: 100.0% of statements
?   	github.com/snapcore/snapd/overlord/ifacestate/schema	[no test files]
ok  	github.com/snapcore/snapd/overlord/ifacestate/udevmonitor	0.225s	coverage: 81.5% of statements
ok  	github.com/snapcore/snapd/overlord/install	3.046s	coverage: 84.6% of statements
ok  	github.com/snapcore/snapd/overlord/patch	0.129s	coverage: 80.4% of statements
ok  	github.com/snapcore/snapd/overlord/restart	0.088s	coverage: 89.6% of statements
ok  	github.com/snapcore/snapd/overlord/servicestate	0.939s	coverage: 90.1% of statements
ok  	github.com/snapcore/snapd/overlord/servicestate/internal	0.046s	coverage: 86.3% of statements
?   	github.com/snapcore/snapd/overlord/servicestate/servicestatetest	[no test files]
ok  	github.com/snapcore/snapd/overlord/snapshotstate	9.710s	coverage: 91.7% of statements
ok  	github.com/snapcore/snapd/overlord/snapshotstate/backend	30.253s	coverage: 77.3% of statements

----------------------------------------------------------------------
FAIL: booted_test.go:268: bootedSuite.TestUpdateBootRevisionsOSErrorsLate

booted_test.go:303:
    c.Assert(chg.IsReady(), Equals, true)
... obtained bool = false
... expected bool = true

OOPS: 984 passed, 13 skipped, 1 FAILED
--- FAIL: TestSnapManager (67.34s)
FAIL
coverage: 87.5% of statements
FAIL	github.com/snapcore/snapd/overlord/snapstate	67.442s
ok  	github.com/snapcore/snapd/overlord/snapstate/agentnotify	0.013s	coverage: 63.2% of statements
ok  	github.com/snapcore/snapd/overlord/snapstate/backend	30.255s	coverage: 78.3% of statements
ok  	github.com/snapcore/snapd/overlord/snapstate/policy	0.487s	coverage: 88.9% of statements
?   	github.com/snapcore/snapd/overlord/snapstate/snapstatetest	[no test files]
ok  	github.com/snapcore/snapd/overlord/standby	7.172s	coverage: 90.9% of statements
ok  	github.com/snapcore/snapd/overlord/state	9.812s	coverage: 96.5% of statements
ok  	github.com/snapcore/snapd/overlord/storecontext	0.019s	coverage: 89.3% of statements
ok  	github.com/snapcore/snapd/polkit	0.006s	coverage: 34.2% of statements
ok  	github.com/snapcore/snapd/polkit/validate	0.010s	coverage: 99.0% of statements
ok  	github.com/snapcore/snapd/progress	0.349s	coverage: 91.2% of statements
?   	github.com/snapcore/snapd/progress/progresstest	[no test files]
ok  	github.com/snapcore/snapd/randutil	0.005s	coverage: 93.9% of statements
ok  	github.com/snapcore/snapd/release	0.006s	coverage: 90.8% of statements
ok  	github.com/snapcore/snapd/sandbox	0.003s	coverage: 100.0% of statements
ok  	github.com/snapcore/snapd/sandbox/apparmor	30.226s	coverage: 95.3% of statements
ok  	github.com/snapcore/snapd/sandbox/apparmor/notify	0.023s	coverage: 94.2% of statements
ok  	github.com/snapcore/snapd/sandbox/cgroup	16.064s	coverage: 90.1% of statements
ok  	github.com/snapcore/snapd/sandbox/seccomp	0.084s	coverage: 88.9% of statements
ok  	github.com/snapcore/snapd/sandbox/selinux	0.185s	coverage: 95.5% of statements
ok  	github.com/snapcore/snapd/secboot	1.797s	coverage: 88.7% of statements
ok  	github.com/snapcore/snapd/secboot/keymgr	6.573s	coverage: 88.5% of statements
?   	github.com/snapcore/snapd/secboot/keyring	[no test files]
ok  	github.com/snapcore/snapd/secboot/keys	0.006s	coverage: 24.1% of statements
ok  	github.com/snapcore/snapd/secboot/luks2	4.292s	coverage: 75.3% of statements
ok  	github.com/snapcore/snapd/seed	20.481s	coverage: 92.8% of statements
ok  	github.com/snapcore/snapd/seed/internal	0.009s	coverage: 69.7% of statements
?   	github.com/snapcore/snapd/seed/seedtest	[no test files]
ok  	github.com/snapcore/snapd/seed/seedwriter	13.481s	coverage: 90.2% of statements
ok  	github.com/snapcore/snapd/snap	1.096s	coverage: 92.8% of statements
ok  	github.com/snapcore/snapd/snap/channel	0.004s	coverage: 98.1% of statements
ok  	github.com/snapcore/snapd/snap/integrity	0.025s	coverage: 81.6% of statements
ok  	github.com/snapcore/snapd/snap/integrity/dmverity	0.066s	coverage: 86.9% of statements
?   	github.com/snapcore/snapd/snap/internal	[no test files]
ok  	github.com/snapcore/snapd/snap/naming	0.008s	coverage: 98.0% of statements
ok  	github.com/snapcore/snapd/snap/pack	0.837s	coverage: 84.0% of statements
ok  	github.com/snapcore/snapd/snap/quota	0.012s	coverage: 96.1% of statements
ok  	github.com/snapcore/snapd/snap/snapdir	1.732s	coverage: 70.7% of statements
ok  	github.com/snapcore/snapd/snap/snapenv	0.008s	coverage: 96.6% of statements
ok  	github.com/snapcore/snapd/snap/snapfile	0.019s	coverage: 95.2% of statements
ok  	github.com/snapcore/snapd/snap/snaptest	0.100s	coverage: 74.8% of statements
ok  	github.com/snapcore/snapd/snap/squashfs	1.208s	coverage: 90.0% of statements
ok  	github.com/snapcore/snapd/snap/sysparams	0.007s	coverage: 92.1% of statements
ok  	github.com/snapcore/snapd/snapdenv	0.005s	coverage: 94.1% of statements
ok  	github.com/snapcore/snapd/snapdtool	0.074s	coverage: 90.8% of statements
ok  	github.com/snapcore/snapd/spdx	0.008s	coverage: 95.8% of statements
ok  	github.com/snapcore/snapd/store	7.039s	coverage: 89.8% of statements
?   	github.com/snapcore/snapd/store/storetest	[no test files]
ok  	github.com/snapcore/snapd/store/tooling	0.361s	coverage: 69.9% of statements
ok  	github.com/snapcore/snapd/strutil	0.078s	coverage: 97.9% of statements
?   	github.com/snapcore/snapd/strutil/chrorder	[no test files]
ok  	github.com/snapcore/snapd/strutil/quantity	0.007s	coverage: 97.7% of statements
ok  	github.com/snapcore/snapd/strutil/shlex	0.013s	coverage: 96.5% of statements
ok  	github.com/snapcore/snapd/syscheck	0.083s	coverage: 84.2% of statements
ok  	github.com/snapcore/snapd/sysconfig	0.290s	coverage: 86.2% of statements
ok  	github.com/snapcore/snapd/systemd	0.738s	coverage: 87.7% of statements
?   	github.com/snapcore/snapd/systemd/systemdtest	[no test files]
?   	github.com/snapcore/snapd/tests/lib	[no test files]
?   	github.com/snapcore/snapd/tests/lib/fakedevicesvc	[no test files]
?   	github.com/snapcore/snapd/tests/lib/fakestore/cmd/fakestore	[no test files]
?   	github.com/snapcore/snapd/tests/lib/fakestore/refresh	[no test files]
ok  	github.com/snapcore/snapd/tests/lib/fakestore/store	1.385s	coverage: 64.6% of statements
ok  	github.com/snapcore/snapd/tests/lib/fde-setup-hook	0.032s	coverage: 56.8% of statements
?   	github.com/snapcore/snapd/tests/lib/fde-setup-hook-v1	[no test files]
?   	github.com/snapcore/snapd/tests/lib/gendeveloper1	[no test files]
?   	github.com/snapcore/snapd/tests/lib/snaps/store/test-snapd-go-webserver	[no test files]
?   	github.com/snapcore/snapd/tests/lib/systemd-escape	[no test files]
?   	github.com/snapcore/snapd/tests/lib/uc20-create-partitions	[no test files]
?   	github.com/snapcore/snapd/tests/main/chattr	[no test files]
?   	github.com/snapcore/snapd/tests/main/drop-privs/runas-1	[no test files]
?   	github.com/snapcore/snapd/tests/main/drop-privs/runas-2	[no test files]
?   	github.com/snapcore/snapd/tests/main/drop-privs/runas-3	[no test files]
?   	github.com/snapcore/snapd/tests/main/high-user-handling	[no test files]
?   	github.com/snapcore/snapd/tests/main/local-install-w-metadata	[no test files]
?   	github.com/snapcore/snapd/tests/main/retry-network	[no test files]
?   	github.com/snapcore/snapd/tests/main/snap-seccomp-syscalls	[no test files]
?   	github.com/snapcore/snapd/tests/main/user-libnss	[no test files]
?   	github.com/snapcore/snapd/tests/nested/manual/core20-da-lockout	[no test files]
ok  	github.com/snapcore/snapd/testutil	0.133s	coverage: 91.8% of statements
ok  	github.com/snapcore/snapd/timeout	0.005s	coverage: 73.7% of statements
ok  	github.com/snapcore/snapd/timeutil	0.032s	coverage: 97.5% of statements
ok  	github.com/snapcore/snapd/timings	0.016s	coverage: 92.0% of statements
ok  	github.com/snapcore/snapd/usersession/agent	0.798s	coverage: 86.6% of statements
ok  	github.com/snapcore/snapd/usersession/autostart	0.047s	coverage: 83.2% of statements
ok  	github.com/snapcore/snapd/usersession/client	0.162s	coverage: 91.1% of statements
ok  	github.com/snapcore/snapd/usersession/userd	0.409s	coverage: 74.3% of statements
ok  	github.com/snapcore/snapd/usersession/userd/ui	1.072s	coverage: 60.7% of statements
ok  	github.com/snapcore/snapd/usersession/xdgopenproxy	0.026s	coverage: 64.9% of statements
ok  	github.com/snapcore/snapd/wrappers	0.963s	coverage: 83.3% of statements
ok  	github.com/snapcore/snapd/x11	0.005s	coverage: 86.3% of statements
FAIL

Crushing failure and despair.
