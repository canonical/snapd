#!/bin/sh

set -ex

HERE="$(dirname $0)"

# build the updated deb packages for the image
rm -f "$HERE/debs/*"
# the "-us -uc " flags tell it not to sign it
bzr-buildpackage --result-dir="$HERE/debs" "$HERE/.." -- -us -uc

# build a base image
IMAGE="$HERE/image/snappy.img"
rm -f "$IMAGE/*"
# FIXME: hrm, hrm, needs sudo to work on testbed
#
# FIXME2: use wget here instead and just get the latest image from
#         cdimage
sudo ubuntu-device-flash core -o "$IMAGE" rolling --channel edge --enable-ssh --developer-mode

# base cmd
QEMU_CMD="qemu-system-$(uname -m) -enable-kvm -m 768 -localtime -nographic -net user -net nic,model=virtio"

# fire it up
port=11022
SERIAL=stdio
$QEMU_CMD -drive file="$IMAGE",if=virtio -redir tcp:$port::22 -monitor none -serial $SERIAL &
QEMU_PID=$!
trap "kill $QEMU_PID" INT QUIT

# wait until the image is ready
SSH="ssh -oStrictHostKeyChecking=no -o UserKnownHostsFile=\"$HERE/image/known_hosts\" -p $port ubuntu@localhost"
SCP="scp -oStrictHostKeyChecking=no -o UserKnownHostsFile=\"$HERE/image/known_hosts\" -P $port"
for i in $(seq 100); do
    if $SSH true; then
        break
    fi
    sleep 1
done
if [ $i = 100 ]; then
    echo "Failed to setup qemu"
    exit 1
fi

# install debs
$SSH rm -rf /tmp/debs
$SSH mkdir /tmp/debs
$SCP "$HERE"/debs/*.deb ubuntu@localhost:/tmp/debs
$SSH sudo mount -o remount,rw /
$SSH sudo dpkg -i /tmp/debs/*.deb

# shut it down
$SSH sudo halt --poweroff || true

# wait for qemu pid
for i in $(seq 100); do
    if [ ! -e /proc/$QEMU_PID/exe ]; then
        break
    fi
    i=$((i+1))
    sleep 1
done

# now run the tests against the image
(cd "$HERE";
 adt-run run-in-image/ --- ssh -s snappy -- -i image/snappy.img;
)

