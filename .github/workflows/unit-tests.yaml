on:
  workflow_call:
    inputs:
      runs-on:
        description: 'A tag to indicate which runner to use'
        required: true
        type: string
      gochannel:
        description: 'The snap store channel to use to install the go snap'
        required: true
        type: string
      skip-coverage:
        description: 'If true, will not generate test coverage files'
        type: boolean
        default: false
        required: false
      go-build-tags:
        description: 'Tag to add to go test'
        type: string
        required: false
      go-test-race:
        description: 'If true, will add race tag to go test'
        type: boolean
        default: false
        required: false
      snapd-debug:
        description: 'If true, will set SNAPD_DEBUG=1'
        type: boolean
        default: false
        required: false

jobs:
  unit-tests:
    runs-on: ${{ inputs.runs-on }}
    env:
      # Set PATH to ignore the load of magic binaries from /usr/local/bin And
      # to use the go snap automatically. Note that we install go from the
      # snap in a step below. Without this we get the GitHub-controlled latest
      # version of go.
      PATH: /snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:${{ github.workspace }}/bin
      GOROOT: ""
      GO_BUILD_TAGS: ${{ inputs.go-build-tags }}
      SKIP_DIRTY_CHECK: 1
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download and install Debian dependencies
      # Github does not allow variables in "uses"; this has to be a hard-coded path
      uses: ./.github/workflows/actions/download-install-debian-deps
      with:
        snapd-src-dir: "${{ github.workspace }}"

    # golang latest ensures things work on the edge
    - name: Install the go snap
      run: |
          sudo snap install --classic --channel=${{ inputs.gochannel }} go

    - name: Get deps
      run: |
          ./get-deps.sh

    - name: Build C
      run: |
          cd cmd/
          ./autogen.sh
          make -j$(nproc)

    - name: Build Go
      run: |
          go build ./...

    - name: Test C
      run: |
          cd cmd/ && make distcheck
    
    - name: Set Snapd debug
      if: ${{ inputs.snapd-debug }}
      run: echo "SNAPD_DEBUG=1" >> $GITHUB_ENV

    - name: Set Go test Race
      if: ${{ inputs.go-test-race }}
      run: echo "GO_TEST_RACE=1" >> $GITHUB_ENV

    - name: Set Skip Coverage
      if: ${{ inputs.skip-coverage }}
      run: echo "SKIP_COVERAGE=1" >> $GITHUB_ENV

    - name: Test Go
      run: |
          ./run-checks --unit

    - name: Upload the coverage results
      if: ${{ inputs.gochannel != 'latest/stable' && ! inputs.go-test-race }}
      uses: actions/upload-artifact@v4
      with:
        include-hidden-files: true
        name: "coverage-files-${{ inputs.go-build-tags || 'notags' }}"
        path: "${{ github.workspace }}/.coverage/coverage*.cov"
