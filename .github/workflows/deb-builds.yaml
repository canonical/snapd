name: Build deb package

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'A json list of tags to indicate which runner to use'
        required: true
        type: string
      os:
        description: 'The OS to build the deb package for'
        required: true
        type: string
      os-version:
        description: 'The OS version to build the deb package for'
        required: true
        type: string
      system:
        description: 'The system name as known by spread'
        required: true
        type: string

jobs:
  build-deb:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download vendor
      uses: actions/download-artifact@v5
      with:
        name: vendor-pkgs
        path: /tmp/pkg

    - name: Extract vendor
      run: |
        mkdir /tmp/vendor-dir
        tar -xf /tmp/pkg/snapd*.vendor.tar.xz -C /tmp/vendor-dir
        mv /tmp/vendor-dir/snapd-*/vendor .
        mv /tmp/vendor-dir/snapd-*/c-vendor/* c-vendor/

        # HACK: we normally build snapd with go1.22, but 18.04 only has go1.18
        # available. since the x/crypto dependency version that we use in snapd
        # requires go1.20, we replace it with an older version that is
        # compatible with go1.18.
        if [ "${{ inputs.os }}" = "ubuntu" ] && [ "${{ inputs.os-version }}" = "18.04" ]; then
          go mod edit -go=1.18 -replace=golang.org/x/crypto=golang.org/x/crypto@v0.23.0
          go mod tidy
          go mod vendor
        fi

    - name: Setup debian dir
      run: |
        if [ -d "packaging/${{ inputs.os }}-${{ inputs.os-version }}" ]; then
          rm -r debian
          mv "packaging/${{ inputs.os }}-${{ inputs.os-version }}" debian
        fi

        if [ "${{ inputs.os }}" = "ubuntu" ] && [ "${{ inputs.os-version }}" = "18.04" ]; then
          sed -i 's/golang-1.22/golang-1.18/' ./debian/control
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image with cache support
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        load: true
        file: tests/lib/packaging/debian.dockerfile
        build-args: |
          SYSTEM=${{ inputs.os }}
          TAG=${{ inputs.os-version }}
        tags: deb-base:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build deb
      run: |
        chmod a+w ../
        chmod -R a+w .
        mkdir -p /tmp/builds
        chmod -R a+w /tmp/builds
        docker run --cap-add SYS_ADMIN --rm \
          --mount type=bind,src=$(dirname $(pwd)),dst=/home/test/snapd-parent \
          --mount type=bind,src=/tmp/builds,dst=/tmp/builds \
          deb-base:latest \
          bash -c "
            chown -R test:test /home/test/snapd-parent/snapd* && \
            cd /home/test/snapd-parent/snapd* && \
            tests/lib/packaging/build-deb.sh --user test --pkg-version "$(cat /tmp/pkg/version)" && \
            cp /home/test/snapd-parent/*.deb /tmp/builds
          "

    - name: upload packages
      uses: actions/upload-artifact@v4
      with:
        name: package-${{ inputs.system }}
        path: /tmp/builds/
