name: Feature Tagging

on:

  workflow_dispatch:
    inputs:
      features:
        type: string
        description: 'Comma-separated list of features to tag'
        default: 'all'
      maximum-reruns:
        type: number
        description: 'Maximum number of times to rerun failed spread tasks'
        default: 2

jobs:
  set-inputs:
    runs-on: ubuntu-latest
    outputs:
      features: ${{ steps.set-inputs.outputs.features }}
      maximum-reruns: ${{ steps.set-inputs.outputs.maximum-reruns }}
    steps:
      - name: Set inputs
        id: set-inputs
        run: |
          echo "features=${{ inputs.features || 'all' }}" >> $GITHUB_OUTPUT
          echo "maximum-reruns=${{ inputs.maximum-reruns || 2 }}" >> $GITHUB_OUTPUT

  read-systems:
    runs-on: ubuntu-latest
    outputs:
      fundamental-systems: ${{ steps.read-systems.outputs.fundamental-systems }}
      non-fundamental-systems: ${{ steps.read-systems.outputs.non-fundamental-systems }}
      nested-systems: ${{ steps.read-systems.outputs.nested-systems }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read matrix file
        id: read-systems
        shell: bash
        run: |
          echo "fundamental-systems=$(jq -c . ./.github/workflows/data-fundamental-systems.json)" >> $GITHUB_OUTPUT
          echo "non-fundamental-systems=$(jq -c . ./.github/workflows/data-non-fundamental-systems.json)" >> $GITHUB_OUTPUT
          echo "nested-systems=$(jq -c . ./.github/workflows/data-nested-systems.json)" >> $GITHUB_OUTPUT

  tag-features-fundamental:
    uses: ./.github/workflows/spread-tests.yaml
    needs: [set-inputs, read-systems]
    name: "spread ${{ matrix.group }}"
    with:
      runs-on: '["self-hosted", "spread-enabled"]'
      group: ${{ matrix.group }}
      backend: ${{ matrix.backend }}
      systems: ${{ matrix.systems }}  
      tasks: ${{ matrix.tasks }}
      rules: ${{ matrix.rules }}
      is-fundamental: true
      use-snapd-snap-from-master: true
      spread-env: "SPREAD_TAG_FEATURES=\"${{ needs.set-inputs.outputs.features }}\""
      upload-artifacts: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.read-systems.outputs.fundamental-systems) }}

  tag-features-non-fundamental:
    uses: ./.github/workflows/spread-tests.yaml
    needs: [set-inputs, read-systems]
    name: "spread ${{ matrix.group }}"
    with:
      runs-on: '["self-hosted", "spread-enabled"]'
      group: ${{ matrix.group }}
      backend: ${{ matrix.backend }}
      systems: ${{ matrix.systems }}  
      tasks: ${{ matrix.tasks }}
      rules: ${{ matrix.rules }}
      use-snapd-snap-from-master: true
      spread-env: "SPREAD_TAG_FEATURES=\"${{ needs.set-inputs.outputs.features }}\""
      upload-artifacts: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.read-systems.outputs.non-fundamental-systems) }}

  tag-features-nested:
    uses: ./.github/workflows/spread-tests.yaml
    needs: [set-inputs, read-systems]
    name: "spread ${{ matrix.group }}"
    with:
      runs-on: '["self-hosted", "spread-enabled"]'
      group: ${{ matrix.group }}
      backend: ${{ matrix.backend }}
      systems: ${{ matrix.systems }}  
      tasks: ${{ matrix.tasks }}
      rules: ${{ matrix.rules }}
      use-snapd-snap-from-master: true
      spread-env: "SPREAD_TAG_FEATURES=\"${{ needs.set-inputs.outputs.features }}\""
      upload-artifacts: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.read-systems.outputs.nested-systems) }}

  re-run:
    permissions:
      actions: write
    needs: [set-inputs, tag-features-fundamental, tag-features-non-fundamental, tag-features-nested]
    # If the spread tests ended in failure, rerun the workflow up to maximum-reruns times
    if: failure() && fromJSON(github.run_attempt) <= fromJSON(needs.set-inputs.outputs.maximum-reruns)
    runs-on: ubuntu-latest
    steps:
      - env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: gh workflow run rerun.yaml -F run_id=${{ github.run_id }}

  create-reports:
    needs: [set-inputs, tag-features-fundamental, tag-features-non-fundamental, tag-features-nested]
    runs-on: ["self-hosted", "spread-enabled"]
    if: success() || fromJSON(github.run_attempt) > fromJSON(needs.set-inputs.outputs.maximum-reruns)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get generated data
        uses: actions/download-artifact@v4
        with:
          path: feature-tags-artifacts
          pattern: spread-artifacts-*
          merge-multiple: true

      - name: Create feature tags
        run: |
          featdir="extracted-tags"
          mkdir -p "$featdir"
          composedir="composed-tags"
          mkdir -p "$composedir"
          IFS=',' read -ra features <<< "${{ needs.set-inputs.outputs.features }}"
          for file in "feature-tags-artifacts"/*; do
            mkdir working
            tar -xzf "$file" -C working
            for dir in "working/spread-artifacts/feature-tags"/*/; do
              if [ -f "${dir}/journal.txt" ] && [ -f "${dir}/state.json" ]; then
                ./tests/utils/features/featextractor.py \
                  -f "${features[@]}" \
                  --journal "${dir}/journal.txt" \
                  --state "${dir}/state.json" \
                  --output "$featdir/$(basename ${dir})"
              fi
            done
            ./tests/utils/features/featcomposer.py \
                --dir "$featdir" \
                --output "$composedir" \
                --failed-tests "$(cat "working/spread-artifacts/failed-tests.txt")" \
                --run-attempt "$(cat "working/spread-artifacts/run-attempt.txt")" \
                --env-variables "$(cat "working/spread-artifacts/env-variables.txt")"
            rm -r working
          done
          ./tests/utils/features/featcomposer.py \
            --dir "$composedir" \
            --output "final-feature-tags" \
            --replace-old-runs
          
          tar -czf "final-feature-tags.tar.gz" "final-feature-tags"

      - name: Upload results to mongo
        env: 
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASS }}
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          MONGO_PORT: ${{ secrets.MONGO_PORT }}
        run: ./tests/utils/features/mongo_upload.py --dir "final-feature-tags" --verbose
      
      - name: Upload feature data
        uses: actions/upload-artifact@v4
        with:
          name: "feature-tags"
          path: "final-feature-tags.tar.gz"
