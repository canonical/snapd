name: Nightly Firefox peformance tests

on:
  schedule:
  - cron: "0 0 * * *"
  workflow_dispatch:

jobs:

  test-firefox-snap:
    name: Test Firefox snap performance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        wget https://storage.googleapis.com/snapd-spread-tests/snapd-tests/snaps/snapd_master_amd64.snap
        sudo snap install snapd_master_amd64.snap --dangerous
        sudo snap install firefox
        sudo apt install xvfb

    - name: Run Firefox performance tests
      uses: ./.github/actions/run-firefox-performance-tests
      with:
        firefox-exec: firefox
        results-file: /tmp/snap-results.json

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: snap-results
        path: /tmp/snap-results.json

  test-firefox-binary:
    name: Test Firefox snap binary performance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo snap install firefox
        sudo apt install xvfb

    - name: Run Firefox performance tests
      uses: ./.github/actions/run-firefox-performance-tests
      with:
        firefox-exec: /snap/firefox/current/usr/lib/firefox/firefox
        results-file: /tmp/bin-results.json

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: bin-results
        path: /tmp/bin-results.json

  compare-results:
    needs:
      - test-firefox-snap
      - test-firefox-binary
    name: Compare snap vs. binary results
    runs-on: [self-hosted, spread-enabled]
    steps:
    - name: Download snap results
      uses: actions/download-artifact@v4
      with:
        name: snap-results
    
    - name: Download bin results
      uses: actions/download-artifact@v4
      with:
        name: bin-results

    - name: Compare and report results
      run: |
          cat <<EOF > comparison.py
          import json
          import requests
          from statistics import geometric_mean
          import sys

          exit_error = 0

          def post(type, data):
              endpoint = 'http://localhost:9091/metrics/job/snapd-ci/test/firefox/type'
              response = requests.post(f'{endpoint}/{type}', data=data)
              if not response.ok:
                  print(f'error when posting {data} to {endpoint}: {response.text}', file=sys.stderr)
                  global exit_error
                  exit_error = 1
              print(f'{type}: {data}')

          def log_scores(snap_json, bin_json):
              snap_scores = []
              bin_scores = []
              for metric, data in snap_json.items():
                  s = data['metrics']['Score']['current'][0]
                  b = bin_json[metric]['metrics']['Score']['current'][0]
                  snap_scores.append(s)
                  bin_scores.append(b)

                  # Metric names cannot have hyphens, dots, or begin with begin with numbers
                  metric = metric.replace("-", "_").replace(".", "_").replace("3", "three")
                  post('snap', f'{metric} {s:.3f}\n')
                  post('bin', f'{metric} {b:.3f}\n')
                  post('diff', f'{metric} {b - s:.3f}\n')

              snap_score = geometric_mean(snap_scores)
              bin_score = geometric_mean(bin_scores)
              post('snap', f'overall_geometric_mean {snap_score:.3f}\n')
              post('bin', f'overall_geometric_mean {bin_score:.3f}\n')
              post('diff', f'overall_geometric_mean {bin_score - snap_score:.3f}\n')

              return snap_score, bin_score

          with open("snap-results.json", 'r') as f:
              snap = json.load(f)["JetStream2.0"]["tests"]
          with open("bin-results.json", 'r') as f:
              bin = json.load(f)["JetStream2.0"]["tests"]

          snap_score, bin_score = log_scores(snap, bin)

          # The bigger the overall score is, the better it is; see https://browserbench.org/JetStream2.2/index.html
          # The choice of threshold is somewhat arbitrary. After various iterations,
          # the numbers remain fairly close within 5 of each other. Use 10 as a threshold
          # to ensure this fails if something drastic happens.
          if bin_score - snap_score > 10:
            print(f'The binary ({bin_score}) is better than the snap ({snap_score}) by more than 10: {bin_score - snap_score}', file=sys.stderr)
            exit(1)

          exit(exit_error)
          EOF

          python3 comparison.py

    - name: Remove metrics
      if: always()
      run: |
          # The metrics gathering occurs every minute. Sleep for 1.5 minutes
          # to ensure the metrics were gathered and then delete them.
          sleep 1.5m
          curl -X DELETE http://localhost:9091/metrics/job/snapd-ci/test/firefox/type/snap || true
          curl -X DELETE http://localhost:9091/metrics/job/snapd-ci/test/firefox/type/bin || true
          curl -X DELETE http://localhost:9091/metrics/job/snapd-ci/test/firefox/type/diff || true