name: Tests
on:
  pull_request:
    branches: [ "master", "release/**" ]
  push:
    # we trigger runs on master branch, but we do not run spread on master 
    # branch, the master branch runs are just for unit tests + codecov.io
    branches: [ "master","release/**" ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  snap-builds:
    runs-on: ubuntu-20.04
    # only build the snap for pull requests, it's not needed on release branches
    # or on master since we have launchpad build recipes which do this already
    if: ${{ github.event_name == 'pull_request' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Cache snapd snap build status
      id: cache-snapd-build-status
      uses: actions/cache@v1
      with:
        path: "${{ github.workspace }}/.test-results"
        key: "${{ github.run_id }}-${{ github.job }}-results"
    - name: Check cached snap build
      id: cached-results
      run: |
          CACHE_RESULT_STAMP="${{ github.workspace }}/.test-results/snap-build-success"
          echo "CACHE_RESULT_STAMP=$CACHE_RESULT_STAMP" >> $GITHUB_ENV
          if [ -e "$CACHE_RESULT_STAMP" ]; then
              has_cached_snap=0
              while read name; do
                  has_cached_snap=1
                  # bring back artifacts from the cache
                  cp -v "$name" "${{ github.workspace }}"
              done < <(find "$(dirname $CACHE_RESULT_STAMP)" -name "*.snap")
              if [ "$has_cached_snap" = "1" ]; then
                  # we have restored an artifact from the cache
                  echo "::set-output name=already-ran::true"
              fi
          fi
    - name: Build snapd snap
      if: steps.cached-results.outputs.already-ran != 'true'
      uses: snapcore/action-build@v1
      with:
        snapcraft-channel: 4.x/candidate
    - name: Cache and check built artifact
      run: |
        mkdir -p $(dirname "$CACHE_RESULT_STAMP")
        unsquashfs snapd*.snap meta/snap.yaml usr/lib/snapd/info
        if cat squashfs-root/meta/snap.yaml | grep -q "version:.*dirty.*"; then
          echo "PR produces dirty snapd snap version"
          cat squashfs-root/usr/lib/snapd/dirty-git-tree-info.txt
          exit 1
        elif cat squashfs-root/usr/lib/snapd/info | grep -q "VERSION=.*dirty.*"; then
          echo "PR produces dirty internal snapd info version"
          cat squashfs-root/usr/lib/snapd/info
          exit 1
        fi
        cp -v *.snap "$(dirname $CACHE_RESULT_STAMP)/"
    - name: Uploading snapd snap artifact
      uses: actions/upload-artifact@v2
      with:
        name: snap-files
        path: "*.snap"
    - name: Mark successful snap build
      run: |
        mkdir -p $(dirname "$CACHE_RESULT_STAMP")
        touch "$CACHE_RESULT_STAMP"

  static-checks:
    runs-on: ubuntu-20.04
    env:
      GOPATH: ${{ github.workspace }}
      # Set PATH to ignore the load of magic binaries from /usr/local/bin And
      # to use the go snap automatically. Note that we install go from the
      # snap in a step below. Without this we get the GitHub-controlled latest
      # version of go.
      PATH: /snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:${{ github.workspace }}/bin
      GOROOT: ""
      GITHUB_PULL_REQUEST: ${{ github.event.number }}
    strategy:
      # we cache successful runs so it's fine to keep going
      fail-fast: false      
      matrix:
        gochannel:
          - 1.13
          - latest/stable
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        # needed for git commit history
        fetch-depth: 0
        # NOTE: checkout the code in a fixed location, even for forks, as this
        # is relevant for go's import system.
        path: ./src/github.com/snapcore/snapd

    # Fetch base ref, needed for golangci-lint
    - name: Fetching base ref ${{ github.base_ref }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd
        git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

    - name: Cache Debian dependencies
      id: cache-deb-downloads
      uses: actions/cache@v1
      with:
        path: /var/cache/apt
        key: var-cache-apt-{{ hashFiles('**/debian/control') }}

    - name: Run "apt update"
      run: |
          sudo apt update

    - name: Download Debian dependencies
      if: steps.cache-deb-downloads.outputs.cache-hit != 'true'
      run: |
          sudo apt clean
          sudo apt build-dep -d -y ${{ github.workspace }}/src/github.com/snapcore/snapd

    - name: Cache snapd test results
      id: cache-snapd-test-results
      uses: actions/cache@v1
      with:
        path: "${{ github.workspace }}/.test-results"
        # must include matrix or things get racy, i.e. when latest/edge
        # finishes after 1.9 it overrides the results from 1.9
        key: "${{ github.run_id }}-${{ github.job }}-${{ matrix.gochannel }}-results"

    - name: Check cached test results
      id: cached-results
      run: |
          CACHE_RESULT_STAMP="${{ github.workspace }}/.test-results/success"
          echo "CACHE_RESULT_STAMP=$CACHE_RESULT_STAMP" >> $GITHUB_ENV
          if [ -e "$CACHE_RESULT_STAMP" ]; then
              echo "::set-output name=already-ran::true"
          fi
    - name: Install Debian dependencies
      if: steps.cached-results.outputs.cached-results != 'true'
      run: |
          sudo apt build-dep -y ${{ github.workspace }}/src/github.com/snapcore/snapd

    # golang latest ensures things work on the edge
    - name: Install the go snap
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          sudo snap install --classic --channel=${{ matrix.gochannel }} go

    - name: Install ShellCheck as a snap
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          sudo apt-get remove --purge shellcheck
          sudo snap install shellcheck

    - name: Get C vendoring
      run: cd ${{ github.workspace }}/src/github.com/snapcore/snapd/c-vendor && ./vendor.sh

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2
      if: ${{ matrix.gochannel == 'latest/stable' }}
      with:
        # version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest`
        # to use the latest version
        version: v1.45.2
        working-directory: ./src/github.com/snapcore/snapd
        # show only new issues
        # use empty path prefix to make annotations work
        args: --new-from-rev=${{ github.base_ref }} --path-prefix=
        # skip all additional steps
        skip-go-installation: true
        skip-pkg-cache: true
        skip-build-cache: true
        # XXX: does no work with working-directory
        # only-new-issues: true

    - name: Run static checks
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          cd ${{ github.workspace }}/src/github.com/snapcore/snapd || exit 1
          # run gofmt checks only with Go 1.13
          if ! echo "${{ matrix.gochannel }}" | grep -E '1\.13' ; then
              # and skip with other versions
              export SKIP_GOFMT=1
              echo "Formatting checks will be skipped due to the use of Go version ${{ matrix.gochannel }}"
          else
              # misspell and infessassign do not build with Go 1.13
              export SKIP_MISSPELL=1
              export SKIP_INEFFASSIGN=1
          fi
          sudo apt-get install -y python3-yamlordereddictloader
          ./run-checks --static

    - name: Cache successful run
      run: |
        mkdir -p $(dirname "$CACHE_RESULT_STAMP")
        touch "$CACHE_RESULT_STAMP"

  unit-tests:
    needs: [static-checks]
    runs-on: ubuntu-20.04
    env:
      GOPATH: ${{ github.workspace }}
      # Set PATH to ignore the load of magic binaries from /usr/local/bin And
      # to use the go snap automatically. Note that we install go from the
      # snap in a step below. Without this we get the GitHub-controlled latest
      # version of go.
      PATH: /snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:${{ github.workspace }}/bin
      GOROOT: ""
      GITHUB_PULL_REQUEST: ${{ github.event.number }}
    strategy:
      # we cache successful runs so it's fine to keep going
      fail-fast: false      
      matrix:
        gochannel:
          - 1.13
          - latest/stable
        unit-scenario:
          - normal
          - snapd_debug
          - withbootassetstesting
          - nosecboot
          - faultinject

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        # needed for git commit history
        fetch-depth: 0
        # NOTE: checkout the code in a fixed location, even for forks, as this
        # is relevant for go's import system.
        path: ./src/github.com/snapcore/snapd

    # Fetch base ref, needed for golangci-lint
    - name: Fetching base ref ${{ github.base_ref }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd
        git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

    - name: Cache Debian dependencies
      id: cache-deb-downloads
      uses: actions/cache@v1
      with:
        path: /var/cache/apt
        key: var-cache-apt-{{ hashFiles('**/debian/control') }}

    - name: Run "apt update"
      run: |
          sudo apt update

    - name: Download Debian dependencies
      if: steps.cache-deb-downloads.outputs.cache-hit != 'true'
      run: |
          sudo apt clean
          sudo apt build-dep -d -y ${{ github.workspace }}/src/github.com/snapcore/snapd

    - name: Cache snapd test results
      id: cache-snapd-test-results
      uses: actions/cache@v1
      with:
        path: "${{ github.workspace }}/.test-results"
        # must include matrix or things get racy, i.e. when latest/edge
        # finishes after 1.9 it overrides the results from 1.9
        key: "${{ github.run_id }}-${{ github.job }}-${{ matrix.gochannel }}-${{ matrix.unit-scenario }}-results"

    - name: Check cached test results
      id: cached-results
      run: |
          CACHE_RESULT_STAMP="${{ github.workspace }}/.test-results/success"
          echo "CACHE_RESULT_STAMP=$CACHE_RESULT_STAMP" >> $GITHUB_ENV
          if [ -e "$CACHE_RESULT_STAMP" ]; then
              echo "::set-output name=already-ran::true"
          fi

    - name: Install Debian dependencies
      if: steps.cached-results.outputs.cached-results != 'true'
      run: |
          sudo apt build-dep -y ${{ github.workspace }}/src/github.com/snapcore/snapd

    # golang latest ensures things work on the edge
    - name: Install the go snap
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          sudo snap install --classic --channel=${{ matrix.gochannel }} go

    - name: Build C
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          cd ${{ github.workspace }}/src/github.com/snapcore/snapd/cmd/
          ./autogen.sh
          make -j2
    - name: Build Go
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          go build github.com/snapcore/snapd/...
    - name: Test C
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          cd ${{ github.workspace }}/src/github.com/snapcore/snapd/cmd/ && make check
    - name: Reset code coverage data
      if: steps.cached-results.outputs.already-ran != 'true'
      run: |
          rm -rf ${{ github.workspace }}/.coverage/

    - name: Test Go
      if: ${{ matrix.unit-scenario == 'normal' && steps.cached-results.outputs.already-ran != 'true' }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd || exit 1
        ./run-checks --unit

    - name: Test Go (SNAPD_DEBUG=1)
      if: ${{ matrix.unit-scenario == 'snapd_debug' && steps.cached-results.outputs.already-ran != 'true' }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd || exit 1
        SKIP_DIRTY_CHECK=1 SNAPD_DEBUG=1 ./run-checks --unit

    - name: Test Go (withbootassetstesting)
      if: ${{ matrix.unit-scenario == 'withbootassetstesting' && steps.cached-results.outputs.already-ran != 'true' }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd || exit 1
        SKIP_DIRTY_CHECK=1 GO_BUILD_TAGS=withbootassetstesting ./run-checks --unit

    - name: Test Go (nosecboot)
      if: ${{ matrix.unit-scenario == 'nosecboot' && steps.cached-results.outputs.already-ran != 'true' }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd || exit 1
        echo "Dropping github.com/snapcore/secboot"
        # use govendor remove so that a subsequent govendor sync does not
        # install secboot again
        # ${{ github.workspace }}/bin/govendor remove github.com/snapcore/secboot
        # ${{ github.workspace }}/bin/govendor remove +unused
        SKIP_DIRTY_CHECK=1 GO_BUILD_TAGS=nosecboot ./run-checks --unit

    - name: Test Go (faultinject)
      if: ${{ matrix.unit-scenario == 'faultinject' && steps.cached-results.outputs.already-ran != 'true' }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd || exit 1
        SKIP_DIRTY_CHECK=1 GO_BUILD_TAGS=faultinject ./run-checks --unit

    - name: Upload the coverage results
      if: ${{ matrix.gochannel != 'latest/stable' }}
      uses: actions/upload-artifact@v2
      with:
        path: ".coverage/coverage*.cov"

    - name: Cache successful run
      run: |
        mkdir -p $(dirname "$CACHE_RESULT_STAMP")
        touch "$CACHE_RESULT_STAMP"

  code-coverage:
    needs: [unit-tests]
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        # needed for git commit history
        fetch-depth: 0
        # NOTE: checkout the code in a fixed location, even for forks, as this
        # is relevant for go's import system.
        path: ./src/github.com/snapcore/snapd

    - name: Cache snapd test results
      id: cache-snapd-test-results
      uses: actions/cache@v1
      with:
        path: "${{ github.workspace }}/.test-results"
        # must include matrix or things get racy, i.e. when latest/edge
        # finishes after 1.9 it overrides the results from 1.9
        key: "${{ github.run_id }}-${{ github.job }}-results"

    - name: Check cached test results
      id: cached-results
      run: |
          CACHE_RESULT_STAMP="${{ github.workspace }}/.test-results/success"
          echo "CACHE_RESULT_STAMP=$CACHE_RESULT_STAMP" >> $GITHUB_ENV
          if [ -e "$CACHE_RESULT_STAMP" ]; then
              echo "::set-output name=already-ran::true"
          fi

    - name: Download the coverage files
      uses: actions/download-artifact@v3
      with:
        name: '*.cov'
        path: .coverage/

    - name: Merge coverage results
      if: ${{ steps.cached-results.outputs.already-ran != 'true' }}
      run: |
        cd ${{ github.workspace }}/src/github.com/snapcore/snapd || exit 1
        go install github.com/makholm/covertool
        covertool merge -o .coverage/all.cov .coverage/coverage*.cov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      # uploading to codecov occasionally fails, so continue running the test
      # workflow regardless of the upload
      continue-on-error: true
      if: ${{ steps.cached-results.outputs.already-ran != 'true' }}
      with:
        fail_ci_if_error: true
        flags: unittests
        name: codecov-umbrella
        files: .coverage/all.cov
        verbose: true

    - name: Cache successful run
      run: |
        mkdir -p $(dirname "$CACHE_RESULT_STAMP")
        touch "$CACHE_RESULT_STAMP"